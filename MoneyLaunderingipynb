{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyNIZUbuEugRMpTwehoqs0tu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Rohitpatilanalyst/data-/blob/master/Untitled7.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "m7nV-6HwtFfK"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "gxZM0MTOrqk3"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import keras\n",
        "     \n",
        "     "
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#mounting from google drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "     "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WK2mnHZjtIwm",
        "outputId": "9bab18ca-4167-4a5c-89c2-73af30d4d198"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# You have to include the full link to the csv file containing your dataset\n",
        "data = pd.read_csv('/content/drive/My Drive/MoneyLaundering_collabNotebook/PS_20174392719_1491204439457_log.csv')"
      ],
      "metadata": {
        "id": "uQ7yWCA5uXhm"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "kCkKdfE9uYBW",
        "outputId": "11a9284c-c180-48d4-eafd-bfec538ab678"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         step      type      amount     nameOrig  oldbalanceOrg  \\\n",
              "0           1   PAYMENT     9839.64  C1231006815      170136.00   \n",
              "1           1   PAYMENT     1864.28  C1666544295       21249.00   \n",
              "2           1  TRANSFER      181.00  C1305486145         181.00   \n",
              "3           1  CASH_OUT      181.00   C840083671         181.00   \n",
              "4           1   PAYMENT    11668.14  C2048537720       41554.00   \n",
              "...       ...       ...         ...          ...            ...   \n",
              "6362615   743  CASH_OUT   339682.13   C786484425      339682.13   \n",
              "6362616   743  TRANSFER  6311409.28  C1529008245     6311409.28   \n",
              "6362617   743  CASH_OUT  6311409.28  C1162922333     6311409.28   \n",
              "6362618   743  TRANSFER   850002.52  C1685995037      850002.52   \n",
              "6362619   743  CASH_OUT   850002.52  C1280323807      850002.52   \n",
              "\n",
              "         newbalanceOrig     nameDest  oldbalanceDest  newbalanceDest  isFraud  \\\n",
              "0             160296.36  M1979787155            0.00            0.00        0   \n",
              "1              19384.72  M2044282225            0.00            0.00        0   \n",
              "2                  0.00   C553264065            0.00            0.00        1   \n",
              "3                  0.00    C38997010        21182.00            0.00        1   \n",
              "4              29885.86  M1230701703            0.00            0.00        0   \n",
              "...                 ...          ...             ...             ...      ...   \n",
              "6362615            0.00   C776919290            0.00       339682.13        1   \n",
              "6362616            0.00  C1881841831            0.00            0.00        1   \n",
              "6362617            0.00  C1365125890        68488.84      6379898.11        1   \n",
              "6362618            0.00  C2080388513            0.00            0.00        1   \n",
              "6362619            0.00   C873221189      6510099.11      7360101.63        1   \n",
              "\n",
              "         isFlaggedFraud  \n",
              "0                     0  \n",
              "1                     0  \n",
              "2                     0  \n",
              "3                     0  \n",
              "4                     0  \n",
              "...                 ...  \n",
              "6362615               0  \n",
              "6362616               0  \n",
              "6362617               0  \n",
              "6362618               0  \n",
              "6362619               0  \n",
              "\n",
              "[6362620 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3f10bd72-7d69-483d-ba83-3e079b30dfd7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>step</th>\n",
              "      <th>type</th>\n",
              "      <th>amount</th>\n",
              "      <th>nameOrig</th>\n",
              "      <th>oldbalanceOrg</th>\n",
              "      <th>newbalanceOrig</th>\n",
              "      <th>nameDest</th>\n",
              "      <th>oldbalanceDest</th>\n",
              "      <th>newbalanceDest</th>\n",
              "      <th>isFraud</th>\n",
              "      <th>isFlaggedFraud</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>9839.64</td>\n",
              "      <td>C1231006815</td>\n",
              "      <td>170136.00</td>\n",
              "      <td>160296.36</td>\n",
              "      <td>M1979787155</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>1864.28</td>\n",
              "      <td>C1666544295</td>\n",
              "      <td>21249.00</td>\n",
              "      <td>19384.72</td>\n",
              "      <td>M2044282225</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>181.00</td>\n",
              "      <td>C1305486145</td>\n",
              "      <td>181.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>C553264065</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>181.00</td>\n",
              "      <td>C840083671</td>\n",
              "      <td>181.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>C38997010</td>\n",
              "      <td>21182.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>PAYMENT</td>\n",
              "      <td>11668.14</td>\n",
              "      <td>C2048537720</td>\n",
              "      <td>41554.00</td>\n",
              "      <td>29885.86</td>\n",
              "      <td>M1230701703</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362615</th>\n",
              "      <td>743</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>339682.13</td>\n",
              "      <td>C786484425</td>\n",
              "      <td>339682.13</td>\n",
              "      <td>0.00</td>\n",
              "      <td>C776919290</td>\n",
              "      <td>0.00</td>\n",
              "      <td>339682.13</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362616</th>\n",
              "      <td>743</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>6311409.28</td>\n",
              "      <td>C1529008245</td>\n",
              "      <td>6311409.28</td>\n",
              "      <td>0.00</td>\n",
              "      <td>C1881841831</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362617</th>\n",
              "      <td>743</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>6311409.28</td>\n",
              "      <td>C1162922333</td>\n",
              "      <td>6311409.28</td>\n",
              "      <td>0.00</td>\n",
              "      <td>C1365125890</td>\n",
              "      <td>68488.84</td>\n",
              "      <td>6379898.11</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362618</th>\n",
              "      <td>743</td>\n",
              "      <td>TRANSFER</td>\n",
              "      <td>850002.52</td>\n",
              "      <td>C1685995037</td>\n",
              "      <td>850002.52</td>\n",
              "      <td>0.00</td>\n",
              "      <td>C2080388513</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6362619</th>\n",
              "      <td>743</td>\n",
              "      <td>CASH_OUT</td>\n",
              "      <td>850002.52</td>\n",
              "      <td>C1280323807</td>\n",
              "      <td>850002.52</td>\n",
              "      <td>0.00</td>\n",
              "      <td>C873221189</td>\n",
              "      <td>6510099.11</td>\n",
              "      <td>7360101.63</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6362620 rows × 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f10bd72-7d69-483d-ba83-3e079b30dfd7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3f10bd72-7d69-483d-ba83-3e079b30dfd7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3f10bd72-7d69-483d-ba83-3e079b30dfd7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ExuJthcAuaPu",
        "outputId": "c96d52d6-c8e8-4ccf-80ee-d0ce5417e489"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 6362620 entries, 0 to 6362619\n",
            "Data columns (total 11 columns):\n",
            " #   Column          Dtype  \n",
            "---  ------          -----  \n",
            " 0   step            int64  \n",
            " 1   type            object \n",
            " 2   amount          float64\n",
            " 3   nameOrig        object \n",
            " 4   oldbalanceOrg   float64\n",
            " 5   newbalanceOrig  float64\n",
            " 6   nameDest        object \n",
            " 7   oldbalanceDest  float64\n",
            " 8   newbalanceDest  float64\n",
            " 9   isFraud         int64  \n",
            " 10  isFlaggedFraud  int64  \n",
            "dtypes: float64(5), int64(3), object(3)\n",
            "memory usage: 534.0+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 344
        },
        "id": "-O9G4pHUuc0e",
        "outputId": "835e9b9e-6773-4da5-b7b1-da3b2246a7d8"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               step        amount  oldbalanceOrg  newbalanceOrig  \\\n",
              "count  6.362620e+06  6.362620e+06   6.362620e+06    6.362620e+06   \n",
              "mean   2.433972e+02  1.798619e+05   8.338831e+05    8.551137e+05   \n",
              "std    1.423320e+02  6.038582e+05   2.888243e+06    2.924049e+06   \n",
              "min    1.000000e+00  0.000000e+00   0.000000e+00    0.000000e+00   \n",
              "25%    1.560000e+02  1.338957e+04   0.000000e+00    0.000000e+00   \n",
              "50%    2.390000e+02  7.487194e+04   1.420800e+04    0.000000e+00   \n",
              "75%    3.350000e+02  2.087215e+05   1.073152e+05    1.442584e+05   \n",
              "max    7.430000e+02  9.244552e+07   5.958504e+07    4.958504e+07   \n",
              "\n",
              "       oldbalanceDest  newbalanceDest       isFraud  isFlaggedFraud  \n",
              "count    6.362620e+06    6.362620e+06  6.362620e+06    6.362620e+06  \n",
              "mean     1.100702e+06    1.224996e+06  1.290820e-03    2.514687e-06  \n",
              "std      3.399180e+06    3.674129e+06  3.590480e-02    1.585775e-03  \n",
              "min      0.000000e+00    0.000000e+00  0.000000e+00    0.000000e+00  \n",
              "25%      0.000000e+00    0.000000e+00  0.000000e+00    0.000000e+00  \n",
              "50%      1.327057e+05    2.146614e+05  0.000000e+00    0.000000e+00  \n",
              "75%      9.430367e+05    1.111909e+06  0.000000e+00    0.000000e+00  \n",
              "max      3.560159e+08    3.561793e+08  1.000000e+00    1.000000e+00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a7a44648-bb19-4fe0-a7bf-54800e649933\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>step</th>\n",
              "      <th>amount</th>\n",
              "      <th>oldbalanceOrg</th>\n",
              "      <th>newbalanceOrig</th>\n",
              "      <th>oldbalanceDest</th>\n",
              "      <th>newbalanceDest</th>\n",
              "      <th>isFraud</th>\n",
              "      <th>isFlaggedFraud</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "      <td>6.362620e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2.433972e+02</td>\n",
              "      <td>1.798619e+05</td>\n",
              "      <td>8.338831e+05</td>\n",
              "      <td>8.551137e+05</td>\n",
              "      <td>1.100702e+06</td>\n",
              "      <td>1.224996e+06</td>\n",
              "      <td>1.290820e-03</td>\n",
              "      <td>2.514687e-06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.423320e+02</td>\n",
              "      <td>6.038582e+05</td>\n",
              "      <td>2.888243e+06</td>\n",
              "      <td>2.924049e+06</td>\n",
              "      <td>3.399180e+06</td>\n",
              "      <td>3.674129e+06</td>\n",
              "      <td>3.590480e-02</td>\n",
              "      <td>1.585775e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.560000e+02</td>\n",
              "      <td>1.338957e+04</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2.390000e+02</td>\n",
              "      <td>7.487194e+04</td>\n",
              "      <td>1.420800e+04</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>1.327057e+05</td>\n",
              "      <td>2.146614e+05</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>3.350000e+02</td>\n",
              "      <td>2.087215e+05</td>\n",
              "      <td>1.073152e+05</td>\n",
              "      <td>1.442584e+05</td>\n",
              "      <td>9.430367e+05</td>\n",
              "      <td>1.111909e+06</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>7.430000e+02</td>\n",
              "      <td>9.244552e+07</td>\n",
              "      <td>5.958504e+07</td>\n",
              "      <td>4.958504e+07</td>\n",
              "      <td>3.560159e+08</td>\n",
              "      <td>3.561793e+08</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a7a44648-bb19-4fe0-a7bf-54800e649933')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a7a44648-bb19-4fe0-a7bf-54800e649933 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a7a44648-bb19-4fe0-a7bf-54800e649933');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#this data is imbalanced and highly scaled\n",
        "print(\"max amount\",data['amount'].max())\n",
        "print(\"min amount\",data['amount'].min())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kMcKvA9Queh9",
        "outputId": "72cb0846-9878-4ab6-f13e-efdb6eeddf6c"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "max amount 92445516.64\n",
            "min amount 0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ML_df =data[data['isFraud'] == 1]\n",
        "NoML_df = data[data['isFraud'] == 0]\n",
        "\n",
        "print(\"Total No of Transactions =\", len(data['isFraud']))\n",
        "\n",
        "print(\"Total No of identified Money Laundered Transactions =\", len(ML_df))\n",
        "print(\"Percentage of identified Money Laundered Transactions =\", 1.*len(ML_df)/len(data['isFraud'])*100.0, \"%\")\n",
        " \n",
        "print(\"Total No of  NOT  money laundering transactions =\", len(NoML_df))\n",
        "print(\"Percentage of NOT money laundering transactions =\", 1.*len(NoML_df)/len(data['isFraud'])*100.0, \"%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WtNKiirWugqp",
        "outputId": "d056f385-c1de-4839-e1ff-51cba16f0655"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total No of Transactions = 6362620\n",
            "Total No of identified Money Laundered Transactions = 8213\n",
            "Percentage of identified Money Laundered Transactions = 0.12908204481801522 %\n",
            "Total No of  NOT  money laundering transactions = 6354407\n",
            "Percentage of NOT money laundering transactions = 99.87091795518198 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Let's see if we have any missing data, luckily we don't!\n",
        "sns.heatmap(data.isnull(), yticklabels = False, cbar = False, cmap=\"Blues\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 549
        },
        "id": "ODYHkkkYujOW",
        "outputId": "dd946435-a9e7-4a24-de9d-b75235243d71"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Let's see if there is relationship between types of transaction and Money laundering transaction\n",
        "data['type'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wwZ3Xd5uulwR",
        "outputId": "b4c2c2e3-423c-4954-d646-3fc07b1bb9d6"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CASH_OUT    2237500\n",
              "PAYMENT     2151495\n",
              "CASH_IN     1399284\n",
              "TRANSFER     532909\n",
              "DEBIT         41432\n",
              "Name: type, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#create scatter plot for fraud\n",
        "     \n",
        "plt.figure(figsize= [25, 12])\n",
        "sns.countplot(x = 'type', hue = 'isFraud' , data = data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 557
        },
        "id": "ABsinbIGupH4",
        "outputId": "4a3d0889-9119-4369-a2ea-e4c0cbe6ef70"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='type', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2500x1200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# distplot combines the matplotlib.hist function with seaborn kdeplot()\n",
        "# KDE Plot represents the Kernel Density Estimate\n",
        "# KDE is used for visualizing the Probability Density of a continuous variable. \n",
        "# KDE demonstrates the probability density at different values in a continuous variable. \n",
        "# KDE (Kernel Density Estimate) is used for visualizing the Probability Density of a continuous variable. \n",
        "# KDE describes the probability density at different values in a continuous variable. \n",
        "\n",
        "Fraud_df =data[data['isFraud'] == 1]\n",
        "NoFraud_df = data[data['isFraud'] == 0]\n",
        "\n",
        "plt.figure(figsize=(12,7))\n",
        "\n",
        "sns.kdeplot(ML_df['amount'], label = 'Money Laundered Txn', shade = True, color = 'r')\n",
        "sns.kdeplot(NoML_df['amount'], label = 'Not Money Laundered Txn', shade = True, color = 'b')\n",
        "\n",
        "plt.xlabel('Money Laundering in comparision to amount')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 866
        },
        "id": "dA0Zppr8ur81",
        "outputId": "b359f7ee-c27b-486b-c5ba-c972ea367aaa"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-15-25c2ed5a46d9>:13: FutureWarning: \n",
            "\n",
            "`shade` is now deprecated in favor of `fill`; setting `fill=True`.\n",
            "This will become an error in seaborn v0.14.0; please update your code.\n",
            "\n",
            "  sns.kdeplot(ML_df['amount'], label = 'Money Laundered Txn', shade = True, color = 'r')\n",
            "<ipython-input-15-25c2ed5a46d9>:14: FutureWarning: \n",
            "\n",
            "`shade` is now deprecated in favor of `fill`; setting `fill=True`.\n",
            "This will become an error in seaborn v0.14.0; please update your code.\n",
            "\n",
            "  sns.kdeplot(NoML_df['amount'], label = 'Not Money Laundered Txn', shade = True, color = 'b')\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'Money Laundering in comparision to amount')"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "correlations = data.corr()\n",
        "f, ax = plt.subplots(figsize = (20,20))\n",
        "sns.heatmap(correlations, annot = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "1160nyLwuuW0",
        "outputId": "9dcfb3b8-40bd-464c-9046-7abcaa479df9"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-16-d7ac27b8aa88>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  correlations = data.corr()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x2000 with 2 Axes>"
            ],
            "image/png": "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i93zdpfuSZIFFmiYL4f3yQ7b7ZPOnX3DrxgVYqzNN9986dv/tVx04TW5795Ha+fE5hJ1UlLoEv4wL736WHr26JtTfzbW+n30Rm67+b5cXcVYu+Oea9KwQf38a9dDK9pefOWx9OvbPyce177K52jUaIEMHtYrO2y3T17v/HaVfY457uAcePCeWX3lTWvgrOYek6YW77XBG68/lffe653jT5j+N6ikpCQDB7ybG2+6K5dffuMM/e+/78Y0bFg/O+18QEXb6689mT593s/Rx5yZJBn0Wfdcc81tuerqn97bDRncIwcfclIenckHdNtt+488+ujtadR42UydOrXKPpde0j5rrLlqNtvsn7/rnOdkk78bUugS5jqT3+9U6BLmOvX+ulmhS/hN1Zrp/fnnn2fllVfODjvskKOOOiqjRo1KklxyySU5+WSzOWFOULdu3ay2+t/y6qtvVbSVl5en86tvZe21V69yn7Xbtknnn/VPkk4vv5G121bdP0kaN2mUsrKyXw2BmjRulHHjJszmGTC3W3rpJbPIIi3T6ZU3K9omTvwq777bM+u0XaPKferWrZs2bVZJp1feqGgrLy9Pp1fezDrrVL0PGGvUtB9fQzu/+lPIPP01tEvWmslr6Fprrz7ja2inN2baP5l+AT/9NfSrJMnYMePy8ccDs8ceO6dBg/qZb775csCBe2TkyNHp1atfDZwZc5pCjbVVV/trFltskZSVleWNt57KRwPezmOP31kxW5zi89NYq3xt8NqvjLW111690thMkld+ZazVrVs3+x2weyaMn5h+fT+caS2Nm7g2KCbT31OtnFd+9j6svLw8r7z6xkzfh7Vdp02l/kny0suvpe0P/X96b/fT+7SJE7/Ku916ZZ22bao85kILLZh//WunvP1O95kG3ssu0zpbbLFR3njjndk6R2DuVK3Q+7jjjsuaa66ZcePGpX79+hXtO+20Uzp18ukIzAmaNl0opaWlGTVydKX2kSNHp2XL5lXu07Jls4ycjf716s2f884/NY89+nS++urrKvsss8xSOfTw/XLXHQ9W4yyYm7VqOX3t0BEjRlVqHzFydJXriiZJs2YLp7S0NCNH/HIcjkqrmYxDMNaoaT++hv7yNXHUb72Gjhozy/2nv4aeNsNr6A7b7ZtVVl0pXw7vk5Fj+ueoYw7MP3c8IOPHz7vfMChmhRprSy+9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AFBd1Qq9e/bsWennKVOmpGfPnrnyyitz4YUX1khhAAAAAAAwu6oVeq+66qoztK255ppZdNFFc9lll2XnnXf+3YUBAAAAAMDsqlOTB1thhRXSrVu3mjxk0Trk0H3St//rGTnmg7zS+fGsscYqv9p/x522TvceL2XkmA/y9rvPZ4stN67YVlpamvPOPy1vv/t8ho3sl48GvJ1bbrs8rVq1qOiz5JKL5fobL06f91/LiNH907vvqznzrONTt27d2jpF5nLde/XNUad2yCbb75W/rb91Or3epdAlMQfq0OHkDP68RyZOGJAXnn8oyy239G/uc8Th++WTj9/JVxMH5q03n85aa65WaXu9evVy7TUXZviwfhk39uM8/PCtadGiWcX2VVZZKffdd0M+HdgtEycMSJ8+nXPM0QfN8Dx77LFT3uv+UiaMH5DBn/fIbbdekYUXXuh3nzOFcW6HkzPk8x75asKAdJyNsTbg43fy9cSB6fIrY23EsH4ZP/bjPPKLsbbvPrtl6vdfVvlo3rxppefp26dzvpowIO/3ez17771LjZ03c5519/lHTnvz2lzw0T056onzs/iqy86079r/2jSHP9IhHXrflg69b8vB9585Q/8FmjXJrpcfnrO63pjzP7g7B95zepq2blXbp8FcYPEDtsh63a7Lxp/flzWfvyCNV5/5WPu5ljuul81GPJxV7j55hm0Nll8sq9x7Sjb65K5s/Nk9WeuF/0u9xZpWcRSK1T4H7pbXezybD754J493vDerrP7XX+2/9fab56W3H88HX7yT519/JBtvvkGl7Z+O7lnl45Cj902StF1/jZn2WWX1lWrtPCm8ww7bNx9++GbGjfsor7/+RNZcc8bJkz+3887bpFevThk37qN069YxW265SaXtO+ywVZ5++r588UWvfPvt51lllcrjZ6GFmuTKK89L796vZOzYj/Lxx11yxRXnpnHjRjV+bhSh8jKP2X3MBaoVek+cOLHSY8KECfnwww9z9tlnZ/nll6/pGovOzv/cNv938Zm5+KJrs+H67dK37wd5/Ml70qx51W84127bJnfefU3uvfeRbLDednn26Rfz4EM3Z8WV/pwkadCgflZd7a+59OLrsuH67bL3Hkdk+eWXyUOP3lZxjD+vsGzq1KmT4489K23X3DKnn3ZBDjx4z3Q4b8Y3w5Ak3377XVZYbpmcddKRhS6FOdTJJx+Zo486MEcdfXrW36Bdvpk0Kc8+80Dq1as303123XX7XHZZh1xwwZVZu+1W6dOnf5599oFKAeIVl5+bbbf9R/61x2HZbLN/ZtFFWuXRR26v2N5m9ZUzauTo7Lf/MVl1tU1z8cXX5oILzsiRR+xf0We9ddfMXXdek7vu+k9WXW2T7LHHYVlzrdVy882X1srvgtp1yg9j7cijT896P4y152ZhrF1+WYecf8GVWavtVundp3+eq2KsbffDWNv0h7H22M/G2iOPPpXFllit0qNjx1fz2mtdMmrUmCTJYYfumwsvOCP/Pv/KrLLapjnv35fnumsuzHbb/qP2fiEUzCrbrZPtzt4nna75b67d9swM6/95Drr39DRs2rjK/suss2J6PdUlt+5xQW7cuUMmDBuTg+87I41b/vQB3L63npiFl2iRew65PNdse0bGfzkqh9x/ZurWn/n4pvi12GHdLH/evvnsiv+m2z9Oz9fvf57VHjozdZtVPdZ+9Kclmme5Dntn3NsfzLCt/lIts+ZT52XSJ0Pz3k7npevGp+azq/6bsslTaus0mMNsu+MWOfP8k3LtZbek3aZ75oP3P849j96Yps2qnhTQZq1Vc82tF+WRB57IdpvskRef65yb770yf/7LTx/ArL3S5pUepx7TIWVlZXnh6U5Jkh7v9p6hz0P3PZ7Bg75In579/5Dz5o+3yy7b5ZJLzs6FF16TddfdLn36fJCnnrqv0vuwn1tnnTVyzz3X5Z57Hsk662ybp59+MY88cmtW+iHzSKbnHl26dMvZZ19c5TEWWaRlFlmkZc4448KsscY/csghJ+cf/9jI+3+Yh5WUl5eXz+5OderUmeFGluXl5VliiSXy0EMPZd11153tQho3XGa295lbvdL58fR4r09OPuncJElJSUk++Pit3HLzvbnqiptn6H/XPdemYcMG2W2XgyvaOr363/Tp80FOOO7sKp+jTZtV0vmNJ7LSChvkiy+GVtnn2OMPyUEH75VV/7bx7z6nucmYz18udAlznb+tv3WuueicbPb39QpdylylwaIbFrqEWjX48x656upbctVVtyRJGjdulC+/6JWDDj4hjzzyVJX7vPXm0+nevXeOO376366SkpJ89mm33HDjXbnsshvSuHGjDBvaJ/vse3Qef/zZJMkKKyybfn1fzwYbtEvXd3tUedxrr7kwf/nL8tliy92SJCeccFgOO3Tf/GXF9Sv6HHXkATn55KOy9DJr1tjvYE4x2y/kc5khP4y1K3821oZ+0SsH/spY6/Lm0+n2i7E26IexdukPY2340D7Z+xdj7f2+r2f9mYy1Zs0WzuBB7+WQw07OAw/8N0nyxmtPpkuXbjntjAsq+l12Sfusvfbq2WiTnWr09zAnOGnRvxe6hII66onz80XvgXmyw91Jpo+rM96+Pl3u6ZjON1U9Fn+upE5Jzu19e57scHd6PP5Gmi3dKqe8elWu/McpGfHJFxXHPLvbTXnhsofT7eFXa/N05mhbfDt3zCCqLWs+f0Em9hyYj8+8a3pDSUnW73ljvrjjhXx+3ZNV71SnJGs8eV6G/ufVLNj2L6nbpGH67H95xea/3XJcyqZMTf+jb/gDzmDucci0jwtdwh/m8Y73pk/P93Pu6Zckmf735q0+L+Te2x7KzdfeNUP/a2+/OA0a1M/Bex5X0fbfF+7JB/0+ztknV30vr5vvvTILLNAge+98eJXbS0tL06Vvx9x7+0O5/orbquxTrIZ9M7bQJfxhXn/9ibz3Xp+ccEL7JNPH2oAB7+Smm+7O5ZffNEP/++67Pg0aNMg//3lgRdtrr/0vvXv3z7HHnlWp75JLLp6PPnorbdtunT59fv2Dk5133iZ33nl1mjZdMdOmTauBM5s7fPvt54UuYa7z7f1n/XYnKqm/95x/T8dqzfR+9dVX88orr1Q8OnfunP79+2fgwIHVCrznJXXr1s1qq/8tr776VkVbeXl5Or/6VtZee/Uq91m7bZt0/ln/JOn08htZu23V/ZOkcZNGKSsry4QJE2fap0njRhk3bsJsngFAsvTSS2aRRVrmlVferGibOPGrvPtuz6zTdo0q96lbt27atFklnV55o6KtvLw8r7zyZtZZZ/o+bdqskvnnnz+dOv3U56OPBubzz7+o6FOVJk0aZey48RU/d33nvSyxxKLZaqtNkyQtWjTLzjtvmxde6FSt86VwfhxrnWpgrHX62VhboxpjbZ+9d82kSd/mv/99tqJt/nrz57vJkyv1+/a777LWWqultLRat05hDjVf3fmy2N+Wzidv9atoKy8vz4C3+mXJNrP2Tce69etlvrqlmTT+6yRJ6fzTl5mbMvn7Ssec+v3UtF5rhRqsnrlJSd350miVZTL2jb4/NZaXZ9zrfdNkzZmPtaVP2iXfj56QYQ9W8WFJSUmabr56Jg0cltUeOjMbvn9r1nz+gjTbuvg+CKZqdeuW5m+rrpi3Xuta0VZeXp63Xuua1deqeqnNNmuuUql/krzx6ttZfc2q+zdrvnA2+ccGeeSBJ2Zax+ZbbZSFFm6Sxx6cyYc3zPXq1q2b1VdfudJ1wo/v+ddeu02V+7Rt2yavvvpmpbaXXno9bdtW3X9WNW7cOBMnfj1PBd7AT6oVem+00UaVHhtuuGH+8pe/uLibBU2bLpTS0tKMGjm6UvvIkaPTsmXzKvdp2bJZRs5G/3r15s9555+axx59Ol999XWVfZZZZqkcevh+ueuOB6txFsC8rlXL6fcMGDFiVKX2ESNHp+XP7ifwc82aLZzS0tKMHDH6F/uMSqsf/p61atU8kydPnuEDu5EjR6Vlq6r/5q27zprZddftc/vt91e0dXm7e/bd75g8+MBNmfTNoHz5Re9MmPhVjjnWJ/hzm18ba61mc6yN/NlYa/krY63VTMbaAQf8K/956Il89913FW0vvfRaDjxgj7RZfeUk08P0Aw/YI/PPP3+aNVt4Ns6UOV2DhRpnvtL58vXoyhMGvho1IY2aLzhLx9jm9D0zccS4DPghOB85cGjGfTEqW5+6R+o3bpj56s6XjQ5vlwUXbZrGLWbtmBSfugs3Tp3S+fL9qMpj7ftREzL/TMZFk7VXyKJ7bpIPT7q1yu3zN2uc0gXqp/WxO2TMq73Sc7cLM+q5blnlzpOy4Lor1vQpMAda6Ifr0NGjKs82Hj1qTJq3qHrJiWYtms3Yf+TM++/8r3b55utJeeGZV2Zax2577Zg3Xnk7w4eNnM0zYG7RrNn0sVZVhjGz91gtWzafrcxjVjRtulDOOOOY3Hnnf6p9DGDuVu0bWQ4cODDHHHNMNt9882y++eY59thjM3DgwFnad/LkyTOsC16NVVaoQmlpae657/qUlJTkhOPOqbLPIou0zONP3JUn/vdc7rn74T+4QmButMceO2Xc2I8rHqV154wPOf/61xXy3//emfMvuCovv/x6RfuKKy6fK684LxdceFXarrN1ttl2z7ReavHceEPVawAy59hjj50yfuzHFY+6c8hYW6ftGllpxT/nrrsqXzhdcOHVeaHjq3nrzafz3aTP8/h/78x99z+aJCkrm7eXZ6CyjY/YPqu2Wzf3HnZlpv6whnLZ1Gm57/Cr0myZVjm3z+05/4N7suy6f82Hr/ZMeZn3xsya+Rr+KX+94eh8eNKtmTL2q6o71Zl+2Tfqhe4Zcstz+fr9z/P5dU9m9Es9sth+7kFAzdh1zx3y5GPP5/uffXvl51ot0iIbbrrur84Eh5rQqNEC+d//7soHHwzIBRdcVehygAKp1pVkx44ds/3222e11VbL+utPXy/1rbfeyl//+tc8/fTT+cc/fv2N00UXXZTzzjuvUtv8pQum3vxV30CjmIwZMy5Tp05N8xbNKrW3aNFshllsPxoxYnRazEL/6YH3dVliycXSbpu9qpzl3apVizz7/IPp2rVHjj36zN95NsC84umnX8y77/as+LlevfmTTJ+VMXz4TzN1WrZolt6936/yGKNHj83UqVPTomXlv2ctWzTP8B/+ng0fPir16tVLkyaNK83AbdGieUYMr/w3b8UVl0/HFx7O7Xc8kIsuuqbSttNOPSZd3u6eK6+cfp+Evn0/yKRvJqVz5yfSvsOllWpmzjI7Y63XbI61Fj8bayN+ZawNHz7j6/GBB+6Rnr36pUfPvpXav/vuuxxy6Ek54sjT0rJl8wwbNiKHHLx3Jk78quJmlxSHSeMmZtrUaVmgWZNK7Y2aN8lXo8b/6r5/P2TbbHzE9rltr//L8A8HV9r2Zb/Pcs02Z+RPjepnvrql+WbsV9PXDu/zaU2fAnOJKWMnpmzqtMzfvPJYm795k3w/cvwM/eu3bpn6S7bIKvedWtFWUmf6/Zc2+fLBvLPeCflu6OiUTZmabz7+stK+33z8ZRZs+5eaPwnmOON+uA5t1rzyt5CaNW+aUSOrfr0aPXL0jP1bVN1/rXVWz7LLL51jDj59pjXssucOGTd2Ql5+4bVqnAFzi9Gjp4+1qjKMqt5jJdO/0TcrmcesWGCBhnnqqXvz1VffZPfdD83UqVNn+xjMg0xWKUrVmul9+umn54QTTkjXrl1z5ZVX5sorr0zXrl1z/PHH57TTTvvN/c8444xMmDCh0mP+ugtWp5S5zpQpU9KrZ79svPFPNwQsKSnJRhuvV+ki/+fe7dojG21c+QaCm2y6ft7t+lP/HwPvZZdrne232ydjx46f4TiLLNIyz73wn/Tq1S9HHHaq2fXALPv6628ycOCgikf//h9n2LAR2WSTDSr6NGq0QNZee/W80/W9Ko8xZcqU9OjRJ5v+bJ+SkpJssskGeeed6fv06NEn33//fTbd9Kc+f/7zsllqqcUr+iTJSiv9OS+9+Gjuu//RtG9/yQzPVb/Bn2aYZTttWlnFczLnmtlY27QGxtqmPxtr783iWEuShg0bZNdd2s0wy/vnpk6dmi+/HJaysrLsvtv2efa5l73OFplpU6bly36fZbn1/lbRVlJSkuXW+2sG9/hkpvttdFi7bHbMzrlzv4vzZd+ZB9nfffVtvhn7VZq2bpXFV14m/V/qXqP1M/conzItX/X5NAtvuPJPjSUlWWjDv2VC9xnH2qQBQ/PORifn3c1Oq3iM7vhexr31ft7d7LR8N3R0yqdMy8ReA9Ng2UUq7dtg2UXy3RezHyox95kyZWr69f4g6/29bUVbSUlJ1vv72unZrU+V+/To3ifr/X3tSm3rb7ROenafsf+ue+2Yvr3658P3Z35j0F322D7/e+QZIWSRmzJlSnr27JtNNvnphvLT3/Ovn3dnclP6rl17ZOON16/UttlmG6Zr16r7z0yjRgvkmWfuz/fff59ddjkok39x3xVg3lKtmd4ffPBBHnnkkRnaDzzwwFx99dW/uX+9evVSr169Sm3zUghx/XV35OZbL0/Pnn3TvXvvHHnUAWnQoEHuv++xJMktt12eoUNH5LwOlyVJbrrx7jzf8T85+tiD0vGFV7PLLu2yepuVc+wx09emLS0tzX0P3JBVV/trdtvl4Mw3X52K2W3jxk7IlClTKgLvwUO+zFln/F+lT+x/ueYpJMmkSd9m8BdDK37+cuiIfPjxwDRp3CiLzGQdXeYt1153e84849gMGPBpBg0aknPPPSVDh47Ik092rOjT8YWH8+STz+fGm+5Oklx9zW25846r8l6PPunWrWeOPeaQNGxYP/fcM32ppYkTv8pddz2Uyy7tkLFjx+eriV/l6qsvyNtvd0/XH94k//WvK+TFjo/kpZdey9VX31qx1t+0adMyevT0dSeffebl3HzzpTns0H3z4kuds0irFrniivPy7rs9MmzYiD/wt0RN+HGsffLDWDuvirH24gsP54mfjbWrrrktd1Ux1u7+2Vi7866HcvmlHTJu7PhMnPhVrvnFWPvRbrtun9LS+fLAg4/PUNvyyy+TtdZaLe++2zMLLdgkxx9/aP7617/kgIOOr7XfB4Xzxu3PZrcrjsgXfT/NF70GZIODtk7dBvXS/dHpsxZ3u+KITBwxLi9c+lCSZKPD22WLE3bNf467PmO/GJUFfpi5+/033+X7SdMvxFfepm2+GTsx478ck1Z/WSLtOuyX91/slk/e6Ft1EcwTBt/8bFa69shM7DUwE3sOzJKHbpP5GtTLsIc6J0lWuu6oTB4+NgMv/E/KJk/JNx8OqbT/lAnfJEml9sE3PJ2/3Xp8xr/zQca9+X6abrpamm2xRnrsVPkbuBSvO266P5df/+/07dU/vXv0ywGH75kGDernsf9Mv6nk5TecnxHDRuayC65Lktx9y3/yn6duy0FH7pNXX3wj7XbeMiuvtlLOOvH8SsddYIGG2Wb7f+T/Olw50+deb8O1s2TrxfPwff+rvRNkjnHttbfnttuuyHvv9Un37r1z9NEHpkGDBrn33ulLwN1++5UZOnR42re/NElyww135cUXH85xxx2S559/Jbvu2i5t2qyco4766ZsDCy3UJEsssVgWWaRlkuTPf14myfRZ4iNGjPoh8L4v9evXzwEHHJfGjRulceNGSZJRo8ZYdg7mQdUKvZs3b55evXpl+eUr3z28V69eadFCGPZbHv/vs2nWbOGcefYJadmyWfr2+SD/3HH/iptbLr74opX+IL/btUcOOuD4nNP+pHQ49+QMHDgoe/7r8HzQf/qn6Isu2jLbbjd9SZku7zxX6bm22WqPvPlG12yy2QZZdrnWWXa51vlowNuV+jRuuExtni5zqX4ffpIDj/npmxuXXjf9xkg7bL15Ljz7pEKVxRzk8stvTMOGDXLTjZdmwQUb5623umW7dntXmlGxzDJLpenPbub36KNPpXmzhdOh/clp1ap5evd+P9ttt3elG9ecdPK5KSsryyMP35p69erlxZc655hjflqOaeedt02LFs2y117/zF57/bOifdCgIVn+z+skSe6975E0atQwRxy5fy69tH3Gj5+Qzp3fyhln/l9t/kqoJZf9MNZu/tlY27aKsdasirF27s/G2razMNaOPmbGpb8OPGCP/O+J52e46WWSzDdfnZxw/GFZ4c/LZsqUKen8WpdsuNEO+fzzL2r4t8CcoM8z76Thwo2zxQm7pFHzBTP0g89z534XV9zccsHFmlWa4b/O3v9Iab262efmEyod56WrH8vLV/83SdKoxYLZ7ux9skCzJvlq5Lj0ePyNdLpuxg9YmLeMfPLtzN+0cZY5dbfUa7Fgvnp/UHrtcVHFzS3/tFjTlM9mgDPq+W758NTb0vrYHfPnCw7IpIFD0/egKzPh3Y9q4xSYAz37xItZuOlCOeH0I9KsRdN80O+j7L/bURU3q1x08VaVrkN7dOud4w87MyedeVROPuvoDPp0cA7f98R8/GHle3ltt/OWKSlJnv7vCzN97t323jHdu/bKpwMG1cq5MWd57LFn0qxZ07Rvf2JatmyePn36Z4cd9q14H7bEEpUzj3feeS/7739sOnQ4Oeedd0oGDBiU3XY7NP37//TNgW23/Uduu+2Kip/vu++GJMkFF1yVCy+8Oqut9resvXabJEn//m9UqmeFFdbP4MHem8G8pqS8Gt+9/fe//52rrroqp59+etZbb/qyG2+99VYuueSSnHjiiTnnnKpvoPhrBK/8UcZ8/nKhS2Ae0WDRDQtdAvMIi2jwRzlp0b8XugTmEVt8a0Yef4xDps18OQ6oScO+GVvoEphHfPvt54UuYa7z7b1nFLqEuU79fS8qdAm/qVozvc8555w0atQoV1xxRc44Y/rAWHTRRXPuuefm2GOPrdECAQAAAABgVlUr9C4pKckJJ5yQE044IV999VWSpFGjRjVaGAAAAABArXID+qJUrdD754TdAAAAAADMKaoVeo8ZMybt27fPq6++mpEjR85wF9yxY61VBQAAAADAH69aofc+++yTAQMG5KCDDkrLli1TUlJS03UBAAAAAMBsq1bo/cYbb+TNN9/MqquuWtP1AAAAAABAtdWpzk5/+ctf8u2339Z0LQAAAAAA8LtUK/S+8cYbc9ZZZ+W1117LmDFjMnHixEoPAAAAAIA5XlmZx+w+quGGG25I69at86c//Slt27bNu++++6v9r7766qywwgqpX79+llhiiZxwwgn57rvvZvn5qrW8yYILLpiJEydm0003rdReXl6ekpKSTJs2rTqHBQAAAACgiDz88MM58cQTc/PNN6dt27a5+uqrs+WWW+ajjz5KixYtZuj/4IMP5vTTT8+dd96Z9dZbLx9//HH233//lJSU5Morr5yl56xW6L3XXnulbt26efDBB93IEgAAAACAKl155ZU55JBDcsABByRJbr755jz77LO58847c/rpp8/Qv0uXLll//fWz5557Jklat26dPfbYI127dp3l56xW6N2vX7/07NkzK6ywQnV2BwAAAABgLjR58uRMnjy5Ulu9evVSr169Gfp+//33ee+993LGGWdUtNWpUyebb7553n777SqPv9566+X+++/Pu+++m7XXXjuffvppnnvuueyzzz6zXGO11vRec801M2TIkOrsCgAAAADAXOqiiy5KkyZNKj0uuuiiKvuOHj0606ZNS8uWLSu1t2zZMsOHD69ynz333DP//ve/s8EGG6Ru3bpZdtlls/HGG+fMM8+c5RqrNdP7mGOOyXHHHZdTTjklK6+8curWrVtp+yqrrFKdwwIAAAAAMAc744wzcuKJJ1Zqq2qWd3V17tw5//d//5cbb7wxbdu2zYABA3Lcccfl/PPPzznnnDNLx6hW6L377rsnSQ488MAZtrmRJQAAAAAwVygrK3QFc52ZLWVSlWbNmmW++ebLiBEjKrWPGDEirVq1qnKfc845J/vss08OPvjgJMnKK6+cb775JoceemjOOuus1Knz24uXVCv0/uyzz6qzGwAAAAAA84j5558/a6yxRjp16pQdd9wxSVJWVpZOnTrl6KOPrnKfSZMmzRBszzfffEmS8vLyWXreaoXeSy21VJKkf//+GTx4cL7//vuKbSUlJRXbAQAAAACYd5144onZb7/9suaaa2bttdfO1VdfnW+++SYHHHBAkmTffffNYostVrEueLt27XLllVdm9dVXr1je5Jxzzkm7du0qwu/fUq3Q+9NPP81OO+2Uvn37pqSkpCJhLykpSRLLmwAAAAAAkN133z2jRo1K+/btM3z48Ky22mp54YUXKm5uOXjw4Eozu88+++yUlJTk7LPPzpdffpnmzZunXbt2ufDCC2f5OUvKZ3VO+M/8mKrffvvtWXrppdO1a9eMHTs2J510Ui6//PJsuOGGs3vING64zGzvA9Ux5vOXC10C84gGi87+30Kojtl+IYdqOmnRvxe6BOYRW3xrbU3+GIdM+7jQJTCPGPbN2EKXwDzi228/L3QJc51v7zi50CXMdeofdHmhS/hN1Zrp/fbbb+eVV15Js2bNUqdOncw333zZYIMNctFFF+XYY49Nz549a7pOAAAAAAD4TdUKvadNm5ZGjRolmX4HzqFDh2aFFVbIUkstlY8++qhGCwQAAAAAqBXlvmFWjKoVev/tb39L7969s/TSS6dt27a59NJLM//88+fWW2/NMstYpgQAAAAAgMKoVuh99tln55tvvkmS/Pvf/852222XDTfcME2bNs3DDz9cowUCAAAAAMCsqlboveWWW1b8e7nllsuHH36YsWPHZqGFFkpJSUmNFQcAAAAAALOjWqF3VRZeeOGaOhQAAAAAAFRLnUIXAAAAAAAANaXGZnoDAAAAAMxNysvKC10CtcBMbwAAAAAAiobQGwAAAACAoiH0BgAAAACgaAi9AQAAAAAoGkJvAAAAAACKRmmhCwAAAAAAKIiyskJXQC0w0xsAAAAAgKIh9AYAAAAAoGgIvQEAAAAAKBpCbwAAAAAAiobQGwAAAACAolFa6AIAAAAAAAqivKzQFVALzPQGAAAAAKBoCL0BAAAAACgaQm8AAAAAAIqG0BsAAAAAgKIh9AYAAAAAoGiUFroAAAAAAICCKCsvdAXUAjO9AQAAAAAoGkJvAAAAAACKhtAbAAAAAICiIfQGAAAAAKBoCL0BAAAAACgapYUuAAAAAACgIMrKCl0BtcBMbwAAAAAAiobQGwAAAACAoiH0BgAAAACgaAi9AQAAAAAoGkJvAAAAAACKRmmhCwAAAAAAKIiyskJXQC0w0xsAAAAAgKIh9AYAAAAAoGgIvQEAAAAAKBpCbwAAAAAAiobQGwAAAACAolFa6AIAAAAAAAqivLzQFVALzPQGAAAAAKBoCL0BAAAAACgaQm8AAAAAAIqG0BsAAAAAgKIh9AYAAAAAoGiUFroAAAAAAICCKCsrdAXUAjO9AQAAAAAoGkJvAAAAAACKhtAbAAAAAICiIfQGAAAAAKBoCL0BAAAAACgapYUuAAAAAACgIMrKC10BtcBMbwAAAAAAiobQGwAAAACAoiH0BgAAAACgaAi9AQAAAAAoGkJvAAAAAACKRmmhCwAAAAAAKIjyskJXQC0w0xsAAAAAgKIh9AYAAAAAoGgIvQEAAAAAKBpCbwAAAAAAiobQGwAAAACAolFa6AIAAAAAAAqirLzQFVALzPQGAAAAAKBoCL0BAAAAACgaQm8AAAAAAIqG0BsAAAAAgKIh9AYAAAAAoGiUFrqAH02aMrnQJTCPaLDohoUugXnEpKFvFLoEgBq17J93KHQJzCPunPZ9oUtgHvH1998VugTmEWXlZYUuAZiJ8jL//yxGZnoDAAAAAFA0hN4AAAAAABQNoTcAAAAAAEVD6A0AAAAAQNEQegMAAAAAUDRKC10AAAAAAEBBlJUXugJqgZneAAAAAAAUDaE3AAAAAABFQ+gNAAAAAEDREHoDAAAAAFA0hN4AAAAAABSN0kIXAAAAAABQEOVlha6AWmCmNwAAAAAARUPoDQAAAABA0RB6AwAAAABQNITeAAAAAAAUDaE3AAAAAABFo7TQBQAAAAAAFERZeaEroBaY6Q0AAAAAQNEQegMAAAAAUDSE3gAAAAAAFA2hNwAAAAAARUPoDQAAAABA0SgtdAEAAAAAAAVRVlboCqgFZnoDAAAAAFA0hN4AAAAAABQNoTcAAAAAAEVD6A0AAAAAQNEQegMAAAAAUDRKC10AAAAAAEBBlJUXugJqgZneAAAAAAAUDaE3AAAAAABFQ+gNAAAAAEDREHoDAAAAAFA0hN4AAAAAABSN0kIXAAAAAABQEOVlha6AWmCmNwAAAAAARUPoDQAAAABA0RB6AwAAAABQNITeAAAAAAAUDaE3AAAAAABFo7TQBQAAAAAAFERZeaEroBaY6Q0AAAAAQNEQegMAAAAAUDSE3gAAAAAAFA2hNwAAAAAARUPoDQAAAABA0Sitzk4TJ06ssr2kpCT16tXL/PPP/7uKAgAAAACobeVlZYUugVpQrdB7wQUXTElJyUy3L7744tl///3ToUOH1KljMjkAAAAAAH+MaoXed999d84666zsv//+WXvttZMk7777bu65556cffbZGTVqVC6//PLUq1cvZ555Zo0WDAAAAAAAM1Ot0Puee+7JFVdckd12262irV27dll55ZVzyy23pFOnTllyySVz4YUXCr0BAAAAAPjDVGvtkS5dumT11VefoX311VfP22+/nSTZYIMNMnjw4N9XHQAAAAAAzIZqhd5LLLFE7rjjjhna77jjjiyxxBJJkjFjxmShhRb6fdUBAAAAAMBsqNbyJpdffnl23XXXPP/881lrrbWSJN27d8+HH36Yxx57LEnSrVu37L777jVXKQAAAABATSorL3QF1IJqhd7bb799Pvroo9xyyy356KOPkiRbb711nnjiibRu3TpJcsQRR9RYkQAAAAAAMCtmO/SeMmVKttpqq9x888256KKLaqMmAAAAAAColtle07tu3brp06dPbdQCAAAAAAC/S7VuZLn33ntXeSNLAAAAAAAopGqt6T116tTceeedefnll7PGGmukYcOGlbZfeeWVNVIcAAAAAADMjmqF3v369UubNm2SJB9//HGlbSUlJb+/KgAAAACA2lZWXugKqAXVCr1fffXVmq4DAAAAAAB+t2qF3kkyfvz4DBgwIEmy3HLLZcEFF6ypmgAAAAAAoFpm+0aWgwYNyrbbbptmzZqlbdu2adu2bZo1a5btttsugwYNqoUSAQAAAABg1szWTO8hQ4ZknXXWSd26dXP++ednxRVXTJL0798/N910U9Zdd91069Ytiy++eK0UCwAAAAAAv6akvLx8lldrP+iggzJgwIB07Ngxf/rTnypt+/bbb7PVVltl+eWXz+233z7bhZTOv9hs7wPV4Var/FEmDX2j0CUA1Khl/7xDoUtgHvHttO8LXQLziK+//67QJTCPKCsvK3QJzCMmfzek0CXMdb4+ZadClzDXWeCy/xW6hN80WzO9X3jhhTz88MMzBN5JUr9+/Zx//vn517/+VWPFAQAAAADUGh9KFaXZWtN79OjRad269Uy3L7PMMhk7duzvrQkAAAAAAKpltkLvRRZZJP3795/p9n79+qVVq1a/uygAAAAAAKiO2Qq9d9xxx5x88skZNWrUDNtGjhyZ0047LTvuuGNN1QYAAAAAALNlttb07tChQ5577rksu+yy2XvvvfOXv/wl5eXl+eCDD/Lggw+mVatWad++fW3VCgAAAAAAv2q2Qu+FFlooXbt2zZlnnpmHHnoo48ePT5IsuOCC2XPPPfN///d/WXjhhWujTgAAAAAA+E2zFXon04Pvm266KTfeeGPFMifNmzdPSUlJjRcHAAAAAFBrysoLXQG1YLbW9P65adOmpU+fPvnf//6Xr7/+OkkydOjQin8DAAAAAMAfbbZneifJ559/nq222iqDBw/O5MmT849//CONGjXKJZdcksmTJ+fmm2+u6ToBAAAAAOA3VWum93HHHZc111wz48aNS/369Svad9ppp3Tq1KnGigMAAAAAgNlRrZneb7zxRrp06ZL555+/Unvr1q3z5Zdf1khhAAAAAAAwu6o107usrCzTpk2bof2LL75Io0aNfndRAAAAAABQHdUKvbfYYotcffXVFT+XlJTk66+/TocOHbLNNtvUVG0AAAAAALWmvKzcYzYfc4NqLW9yxRVXZMstt8xKK62U7777LnvuuWc++eSTNGvWLP/5z39qukYAAAAAAJgl1Qq9F1988fTu3TsPP/xwevfuna+//joHHXRQ9tprr0o3tgQAAAAAgD9StULvJCktLc1ee+2VvfbaqybrAQAAAACAaqvWmt4XXXRR7rzzzhna77zzzlxyySW/uygAAAAAAKiOaoXet9xyS/7yl7/M0P7Xv/41N9988+8uCgAAAAAAqqNay5sMHz48iyyyyAztzZs3z7Bhw353UQAAAAAAta6svNAVUAuqNdN7iSWWyFtvvTVD+1tvvZVFF130dxcFAAAAAADVUa2Z3occckiOP/74TJkyJZtuummSpFOnTjn11FNz0kkn1WiBAAAAAAAwq6oVep9yyikZM2ZMjjzyyHz//fdJkj/96U857bTTcsYZZ9RogQAAAAAAMKuqFXqXlJTkkksuyTnnnJMPPvgg9evXz/LLL5969erVdH0AAAAAADDLqhV6/2iBBRbIWmutVVO1AAAAAADA71Kt0Pubb77JxRdfnE6dOmXkyJEpKyurtP3TTz+tkeIAAAAAAGB21KnOTgcffHDuuOOObLjhhjn66KNz3HHHVXpQfed2ODlDPu+RryYMSMfnH8pyyy39m/sccfh+GfDxO/l64sB0efPprLXmapW2H3zQXun00qMZO/rDTP3+yzRp0riWqmdO0aHDyRn8eY9MnDAgL8zGOPrk43fy1cSBeauKcVSvXr1ce82FGT6sX8aN/TgPP3xrWrRoVrF9lVVWyn333ZBPB3bLxAkD0qdP5xxz9EEzPM8ee+yU97q/lAnjB2Tw5z1y261XZOGFF/rd58zcq3uvvjnq1A7ZZPu98rf1t06n17sUuiSKlLHG7Nr3oH/lrV4v5OOh3fPkSw9k1TZ/+9X+2+6wRV5556l8PLR7Xnzz8Wyy+YYz9Fnuz0vnjgeuTb9BXfLhkK55+uX/ZNHFWlXq02atVfOfJ27Ph0O65v3P386jz9yden+yjGAxO/DgPfNen04ZMqJPXuj0SFZvs/Kv9t9+x63SpdvzGTKiT17r8lQ2/8ffZ9r3sqvOy6gJH+WwI/araFtiycVy9fUXpnufThk8vHfe7fVSTj3jmNStW7fGzom5x2GH7ZsPP3wz48Z9lNdffyJrrrnqr/bfeedt0qtXp4wb91G6deuYLbfcpNL2HXbYKk8/fV+++KJXvv3286yyykq1WT5ziMMP2y8ffdQlE8Z/kjdefypr/uJ68pd23nnb9On9aiaM/yTvdX8pW/1iHCVJ+/YnZdBn3TN+3Cd5/rkHs9yyrStt/+9jd+aTT97JhPGfZNBn3XPnnVdnkUVaVurzj803yuuvPZnRoz7IF0N65aH/3JKlllr8954uxaaszGN2H3OBaoXezz//fB599NFccsklOf7444XeNeSUk4/M0UcdmCOPPj3rbdAu30yalOeeeeBX10rfddftc/llHXL+BVdmrbZbpXef/nnu2QfSvHnTij4NGtRPxxc75+JLrvsjToMCO/mHcXTU0adn/R/G0bOzMI4uu6xDLrjgyqzddqv06dM/z/5iHF1x+bnZdtt/5F97HJbNNvtnFl2kVR595PaK7W1WXzmjRo7Ofvsfk1VX2zQXX3xtLrjgjBx5xP4VfdZbd83cdec1ueuu/2TV1TbJHnscljXXWi0333xprfwumDt8++13WWG5ZXLWSUcWuhSKnLHG7Gi305Y554JTcvWlN2fbTXbLB/0+zv2P3ZKmzRausv8aa6+a6267JA8/8Hi22XjXdHzuldx2/zX584rLVfRZqvXi+e9z92bgJ59l93YHZssN/5lrL78lkyd/X9GnzVqr5t5Hb8obr76d7f+xZ9pttkfuuf0/KZ9LLi6YfTvuvHX+/X9n5PJLbshmf98p7/f7MI/87440m8lYW2vt1XPLHVfkgfsey6Yb7pjnn+2Uex68IX9ZcfkZ+m6z3eZZc81VM2zoiErtyy+/TOqUlOTk49tnw3W2zTlnXJT9DvxXzupwQq2cI3OuXXbZLpdccnYuvPCarLvudunT54M89dR9la4Dfm6dddbIPfdcl3vueSTrrLNtnn76xTzyyK1ZaaU/V/Rp0KB+unTplrPPvviPOg0KbJdd2uXSS8/JhRdenbbrbJO+ffvnmad/fRzdd+/1ufvuh9K27dZ56umOefTR27PSSitU9DnppCNy1JEH5JhjzswGG7bLN998m2eeub/Sde1rr3XJXnsdkZVX2Tj/2uOwLLP0UvnPgzdXbG/deok89tjt6fxal6zddqts127vNG22cB5+6Nba+2UAc4yS8vLy8tndaemll85zzz2XFVdcscYKKZ1/sRo71txqyOc9ctXVt+TKq25JkjRu3ChDv+iVAw8+IY888lSV+3R58+l06947xx1/dpLpNxkd9Gm33HDjXbn0shsq9d3o7+um08uPpWnzFTNhwsTaPZk5WEmhC6hlg38YR1f9bBx9+UWvHPQr4+itN59O91+Mo89+GEeXXXZDGjdulGFD+2SffY/O448/myRZYYVl06/v69lgg3bp+m6PKo977TUX5i9/WT5bbLlbkuSEEw7LYYfum7+suH5Fn6OOPCAnn3xUll5mzRr7HcwpJg19o9AlzHX+tv7Wueaic7LZ39crdCkUOWOtepb98w6FLuEP8+RLD6R3j/fT/rT/SzL9tbFr35dy923/yY3X3DFD/xvuuCwNGtTPAXscXdH2xIv3p3/fj3LmSecnSa6//dJMnTI1xx9x5kyf94kX788bnd/JFf93fQ2f0dzl22nf/3anIvFCp0fSq0ffnH7K9HFSUlKS3v1fy+233pdrr7pthv633XVVGjSon712P7yi7fmXH06/vh/mlBM6VLS1WqRFOnZ6NLvtfFAefOSW3HrTvbnlpntmWsdRxx6U/Q/aI2utunkNnt2c7+vvvyt0CQX1+utP5L33+uSEE9onmT7+Bgx4JzfddHcuv/ymGfrfd9/1adCgQf75zwMr2l577X/p3bt/jj32rEp9l1xy8Xz00Vtp23br9OnTv3ZPZC5QVl68H16+8fpTee+93jn+hHOSTB9HAwe8mxtvuiuXX37jDP3vv+/GNGxYPzvtfEBF2+uvPZk+fd7P0cdMf40c9Fn3XHPNbbnq6p+ua4cM7pGDDzkpjz5a9XXtdtv+I48+ensaNV42U6dOzU47bZP77r0+jRovmx+jr2232TyPPXZHRZ9iNPm7IYUuYa7z1dHbFLqEuU6j658rdAm/qVozvc8///y0b98+kyZNqul65llLL71kFlmkZTq98mZF28SJX+Xdd3tmnbZrVLlP3bp106bNKun0yk/BWnl5eTq98mbWWafqfShuP46jV2pgHL3ys3HUps0qmX/++dOp0099PvpoYD7//ItfHWtNmjTK2HHjK37u+s57WWKJRbPVVpsmSVq0aJadd942L7zQqVrnCwC1oW7d0qy86kp587V3KtrKy8vz5mvvpM1aVX/tv81aq1bqnySvv9Klon9JSUk2/cff8+nAz3PfYzenx0ed8+RLD2SLbTat6N+02cJps+aqGTNqbB5/4b6892HnPPL0XVmr7eq1cJbMCerWrZtVV/trXuv803JL5eXleb1zl6y5VtX/u6+51mp5vfPbldpe7fRm1lxrtYqfS0pKcuOtl+WGa+/IRx8OmKVaGjdulPHjJsz+STDXqlu3blZffeVK1w4/XgesvXabKvdp27ZNXn31zUptL730etq2rbo/xW/69WQV4+jVN2Z6Ddp2nTaV+ifJSy+/lrY/9P8pH/np+nPixK/ybrdeWWcmY22hhRbMv/61U95+p3tFmN2zZ9+UlZVlv/12S506ddK4caPsuefOeeWVN4s28AZ+Uq3Q+4orrkjHjh3TsmXLrLzyymnTpk2lB7OvVcsWSZIRI0ZVah8xcnRatWpR5T7Nmi2c0tLSjBwxulL7yJGj0qpl89oplDnar42jlrM5jkb8bBy1atU8kydPnuEbAiNHjkrLVlWPtXXXWTO77rp9br/9/oq2Lm93z777HZMHH7gpk74ZlC+/6J0JE7/KMb+YFQIAhbRw04VSWlqa0aPGVGofPWpMmres+qvazVs0y6iRlfuPGjkmzX+4/0Wz5gtngUYNc+RxB6Zzp7ey9z8PS8dnXsmt916VtutN/7bTkq2nrzF6wmlH5D/3/jf77np4+vX5IA8+cXtaL7NkTZ8mc4Afx9ovx87IUWPSomWzKvdp0bJZRo6s/L5t1C/6H3vCIZk6dWpuvfneWapj6WWWzMGH7p177npoNs+AuVmzZtPH3y/H08iRo9NqJu/xW7ZsXmX/lq4/51k/Xk+OGFn5GnTkiJmPi1Ytm2fEL8fRz/r/+N8ZxtqIUWnZsvJ17YUXnJGxYz7K8GF9s8QSi2aXXX66r9SgQUOy7XZ759/nnZavJg7MqJH9s9hii2TPvY6o3skCc5XS6uy04447/q4nnTx5ciZPnlyprby8PCUlxb7wxE/22GOn3HTDJRU/b7/DvgWshrnVHnvslBvnwHH017+ukP/+986cf8FVefnl1yvaV1xx+Vx5xXm54MKr8tJLr6VVqxa55OKzc+MNF+fQw04uYMUAULvq1Jk+1+TF5zvnjpvuS5L07/dR1lh71ex9wK7p2qV76tSZ/l74gbsfzaMPPpEkeb/vh1n/722z+1475ZLzrylI7cxdVlntrzn08H2z6d93nqX+rRZpkYf/e3ueevKF3H/Po7VcHUDNuvKqm3P33Q9lyaUWz1lnHZ8777g6O+60f5Lp4flNN16S++9/LA8/8mQaNVog7duflIf+c3O23mbPwhYO1Lpqhd4dOnT47U6/4qKLLsp5551Xqa2kzgIpma/x7zru3OTpp1/Mu+/2rPi5Xr35k0z/ozx8+MiK9pYtmqVX7/erPMbo0WMzderUGWaBtGjRPMN/MdOX4jQ746j3bI6jlj8bR8OHj0q9evXSpEnjSrO9W7RonhHDK4+1FVdcPh1feDi33/FALrqo8sX5aaceky5vd8+VV06/uUjfvh9k0jeT0rnzE2nf4dJKNQNAoYwdMy5Tp05Ns1/cgKtZ86YZNWJMlfuMGjk6zVtU7t+8RdOM+mGW2tgx4zJlypR88tHASn0GfPxZ1lpn+jIWI4dP7/vJR5/+os+nWXTxRap/Qsyxfhxrvxw7LZo3neFbeD8aOWJ0WrSo/L6t+c/6r7vummnWvGl6vf9qxfbS0tKcd+FpOfSIfbPGKptVtLds1SJPPHNv3u3aMycee05NnRZzidGjp4+/X46nFi2aZfjwqq8nR4wYVWX/X37TlHnHj9eTLVtUntXdouXMx8XwEaPS8pfj6Gf9f/zv9LE48md9mqfPL65rx4wZlzFjxuWTAZ/lww8/yacDu6Vt2zbp2rVHDj98v0yY8FXOPOv/KvofcMCx+XRgt6y99uqVrqWZx5XN9u0OmQtUa3mT3+uMM87IhAkTKj1K6jQqRCkF8/XX32TgwEEVj/79P86wYSOy6SYbVPRp1GiBrL326nmn63tVHmPKlCnp0aNPpX1KSkqy6SYb5J13qt6H4jKzcbRJDYyjTX42jnr06JPvv/8+m276U58//3nZLLXU4pXG2kor/Tkvvfho7rv/0bRv/9MM9B/Vb/CnlJVVvoHLtGllFc8JAHOCKVOmpm/v/ln/720r2kpKSrL+RuukR7feVe7To1vvSv2TZION163oP2XK1PTu+X6WXa51pT5LL7tUvhgyLEkyZPCXGT50RJZZfsY+Xw4Z+jvPijnRlClT0rvX+/n7RutWtJWUlGTDjdZN925VhzHdu/XKhhutU6lto03WS/duvZIkjzz0ZDZab/tsssGOFY9hQ0fkhmvvyG47H1yxT6tFWuTJZ+9N717v59gjz6i4yRvzjilTpqRnz77ZZJOfbjI//Tpg/bw7kxvVd+3aIxtvvH6lts022zBdu1bdn+I3/XqyinG08QYzvQbt+k6PSv2TZLNNN0zXH/p/9tngqvORtVbLO78y1n78VtWPk8Ea1K8/0+vPH/sCxataM72nTZuWq666Ko888kgGDx6c77+vfHf1sWPH/ur+9erVS7169Sq1CbySa6+7PWeecWw+GfBpBg0akvPOPSVDh47Ik092rOjz4gsP54knn8+NN92dJLnqmtty1x1X5b0efdKtW88ce8whadiwfu6+5+GKfVq2bJ5WrVpk2WVbJ0lW/ttf8tXX32Tw4C8z7mc3GaQ4/DiOBvwwjs6tYhx1fOHhPPmzcXT1NbflzirG0T0/jKOJE7/KXXc9lMsu7ZCxY8fnq4lf5eqrL8jbb3dP1x/eEP/1ryvkxY6P5KWXXsvVV99asQ7btGnTMnr09L8Jzz7zcm6++dIcdui+efGlzlmkVYtcccV5effdHhk2bMQf+FtiTjJp0rcZ/MVPYc6XQ0fkw48HpknjRllkJmvRQ3UYa8yO22+8N1fccGH69no/vXr0zUGH75MGDernkR+WHbnqxgszfNjIiiVH7rzl/jzy9F055Kh988qLb2T7nbfKKqv9Naef8NO3G2+57q7ccMfl6fr2e+nyxrvZeLMNsvlWG2X3dgf+1Of6u3PC6Ufmg34f5f2+H2aXPXbIcssvnSP2P/EPPX/+ODffcFeuu+mS9OrZLz3e65PDjtwvDRrWz3/ufzxJcv3Nl2T4sBG54LwrkyS33nRvnnzuvhxx9AF5qeNr2emf22S11f+Wk45rnyQZN278DO/xp0yZkpEjRmfggM+S/Bh435chQ4amw9mXpFmzhSv6/nINXYrbtdfenttuuyLvvdcn3bv3ztFHH5gGDRrk3nunL3Vz++1XZujQ4Wnf/tIkyQ033JUXX3w4xx13SJ5//pXsumu7tGmzco466vSKYy60UJMsscRiWWSRlkmSP/95mSTTZ++aEV6crrn2ttxx+5V5r0efdO/WK8ccc1AaNqyfe+99JElyxx1XZejQ4TnnnOkTo66/4Y68/NKjOf64Q/P8852y627bZ401VsmRPxtH111/R04//ZgMGPBZPhs0JOd2ODnDho3IU09Nv65da63VsuYaq+atLt0yfvyELLPMUunQ4eQMHDgo77wz/Rr1+Rc65dhjD86ZZx6XRx5+Mgs0WiDn//u0DPp8SHr1qvqb0EDxqFbofd555+X222/PSSedlLPPPjtnnXVWBg0alCeeeCLt27ev6RrnGZddfmMaNmyQm2+8NAsu2DhvvdUt27bbu9L658sss1SlN6WPPvpUmjdbOOe2PzmtWjVP797vZ9vt9q70ZvWwQ/dJ+3NOqvi586v/S5IceNAJufe+R/6AM+OPdPkP4+imn42j7aoYR02rGEcdfjaOtvvFODrp5HNTVlaWRx6+NfXq1cuLL3XOMcecWbF95523TYsWzbLXXv/MXnv9s6J90KAhWf7P02cj3XvfI2nUqGGOOHL/XHpp+4wfPyGdO7+VM8786etmzHv6ffhJDjzmtIqfL73u1iTJDltvngvPPmlmu8FsM9aYHU//r2MWbrpwTjzjqDRv0Sz9+32YfXY9vOLmlosuvkjKfvZV2Pfe7Z1jDz09J595dE49+7gM+vTzHLL3cfn4gwEVfTo++0rOPOnfOer4g3PeRadn4IBBOWy/E9Ot608zeu+4+f7Uq1cv7S88NQsu2Dj93/84e+18aD4f9MUfd/L8oZ54/Pk0bbpwTjvz2LRo2Tz9+n6Q3Xc+OKN+GGuLL75Iyn82U7Hbuz1z+MEn54yzj89Z7U/MpwMHZb89j8qHH3wyy8+58SbrZ5llW2eZZVun74dvVNrWvMkKNXNizBUee+yZNGvWNO3bn5iWLZunT5/+2WGHfSuuA5ZYYtFKM2Xfeee97L//senQ4eScd94pGTBgUHbb7dD07/9xRZ9tt/1Hbrvtioqf77vvhiTJBRdclQsvvPqPOTH+UI899nSaN1s47duflFYtm6d37/5pt/0+PxtHi1V6zXznnfey737H5LxzT8m//31qBgwYlF13PTj9+39U0eeKK25Kw4YNcsMNF2fBBRunS5duaddun4rr2kmTvssOO26dc845KQ0b1s/w4SPz4ouvZa+Lj6yYmNm5c5fsu98xOenEw3PSiUdk0qRv07Vrj2zfbp989913f+BvCCiEkvJqfI9t2WWXzbXXXpttt902jRo1Sq9evSra3nnnnTz44IOzXUjp/IvN9j5QHb5TwB9l0tA3frsTwFxk2T/vUOgSmEd8O+373+4ENeDr7wVf/DHKyst+uxPUgMnfDSl0CXOdr47cutAlzHUa3fh8oUv4TdVaxGj48OFZeeWVkyQLLLBAJkyYkCTZbrvt8uyzz9ZcdQAAAAAAMBuqFXovvvjiGTZs+g13ll122bz44otJkm7dus2wVjcAAAAAwByprNxjdh9zgWqF3jvttFM6deqUJDnmmGNyzjnnZPnll8++++6bAw888Df2BgAAAACA2lGtG1lefPHFFf/efffds+SSS+btt9/O8ssvn3bt2tVYcQAAAAAAMDuqFXr/0rrrrpt11123Jg4FAAAAAADVNsuh91NPPTXLB91+++2rVQwAAAAAAPwesxx677jjjrPUr6SkJNOmTatuPQAAAAAAUG2zHHqXlZXVZh0AAAAAAH+o8vLyQpdALahT6AIAAAAAAKCmVPtGlt98801ee+21DB48ON9//32lbccee+zvLgwAAAAAAGZXtULvnj17ZptttsmkSZPyzTffZOGFF87o0aPToEGDtGjRQugNAAAAAEBBVGt5kxNOOCHt2rXLuHHjUr9+/bzzzjv5/PPPs8Yaa+Tyyy+v6RoBAAAAAGCWVCv07tWrV0466aTUqVMn8803XyZPnpwlllgil156ac4888yarhEAAAAAAGZJtZY3qVu3burUmZ6Xt2jRIoMHD86KK66YJk2aZMiQITVaIAAAAABArSgrL3QF1IJqhd6rr756unXrluWXXz4bbbRR2rdvn9GjR+e+++7L3/72t5quEQAAAAAAZkm1ljf5v//7vyyyyCJJkgsvvDALLbRQjjjiiIwaNSq33nprjRYIAAAAAACzqlozvddcc82Kf7do0SIvvPBCjRUEAAAAAADVVa3Q+0cjR47MRx99lCT5y1/+kubNm9dIUQAAAAAAUB3VWt7kq6++yj777JPFFlssG220UTbaaKMsuuii2XvvvTNhwoSarhEAAAAAAGZJtULvgw8+OF27ds0zzzyT8ePHZ/z48XnmmWfSvXv3HHbYYTVdIwAAAABAzSsr95jdx1ygWsubPPPMM+nYsWM22GCDirYtt9wyt912W7baaqsaKw4AAAAAAGZHtWZ6N23aNE2aNJmhvUmTJllooYV+d1EAAAAAAFAd1Qq9zz777Jx44okZPnx4Rdvw4cNzyimn5Jxzzqmx4gAAAAAAYHbM8vImq6++ekpKSip+/uSTT7LkkktmySWXTJIMHjw49erVy6hRo6zrDQAAAABAQcxy6L3jjjvWYhkAAAAAAPD7zXLo3aFDh9qsAwAAAADgD1VeVl7oEqgF1VrTGwAAAAAA5kSzPNN7oYUWqrSm968ZO3ZstQsCAAAAAIDqmuXQ++qrr67495gxY3LBBRdkyy23zLrrrpskefvtt9OxY8ecc845NV4kAAAAAADMipLy8vLZXrjmn//8ZzbZZJMcffTRldqvv/76vPzyy3niiSdmu5DS+Reb7X2gOmbt+wrw+00a+kahSwCoUcv+eYdCl8A84ttp3xe6BOYRX3//XaFLYB5RVl5W6BKYR0z+bkihS5jrTDhg80KXMNdpctfLhS7hN1VrTe+OHTtmq622mqF9q622yssvz/knDQAAAABAcapW6N20adM8+eSTM7Q/+eSTadq06e8uCgAAAACg1pWVe8zuYy4wy2t6/9x5552Xgw8+OJ07d07btm2TJF27ds0LL7yQ2267rUYLBAAAAACAWVWt0Hv//ffPiiuumGuvvTaPP/54kmTFFVfMm2++WRGCAwAAAADAH61aoXeStG3bNg888EBN1gIAAAAAAL/LLIfeEydOnOWDNm7cuFrFAAAAAADA7zHLofeCCy6YkpKSX+1TXl6ekpKSTJs27XcXBgAAAAAAs2uWQ+9XX321NusAAAAAAPhjlRW6AGrDLIfeG220UaWfx48fnzvuuCMffPBBkmSllVbKQQcdlCZNmtRshQAAAAAAMIvqVGen7t27Z7nllstVV12VsWPHZuzYsbnqqquy7LLLpkePHjVdIwAAAAAAzJJZnun9cyeccELatWuX2267LaWl0w8xderUHHzwwTn++OPz+uuv12iRAAAAAAAwK6oVenfv3r1S4J0kpaWlOfXUU7PmmmvWWHEAAAAAADA7qrW8SePGjTN48OAZ2ocMGZJGjRr97qIAAAAAAKA6qjXTe/fdd89BBx2Uyy+/POutt16S5K233sopp5ySPfbYo0YLBAAAAACoDeVl5YUugVpQrdD78ssvT0lJSfbdd99MnTo1SVK3bt0cccQRufjii2u0QAAAAAAAmFXVCr3nn3/+XHPNNbnooosycODAJMmyyy6bBg0a1GhxAAAAAAAwO6oVev+oQYMGWXnllWuqFgAAAAAA+F2qdSNLAAAAAACYEwm9AQAAAAAoGr9reRMAAAAAgLlWWXmhK6AWmOkNAAAAAEDREHoDAAAAAFA0hN4AAAAAABQNoTcAAAAAAEVD6A0AAAAAQNEoLXQBAAAAAAAFUVboAqgNZnoDAAAAAFA0hN4AAAAAABQNoTcAAAAAAEVD6A0AAAAAQNEQegMAAAAAUDRKC10AAAAAAEAhlJeVF7oEaoGZ3gAAAAAAFA2hNwAAAAAARUPoDQAAAABA0RB6AwAAAABQNITeAAAAAAAUjdJCFwAAAAAAUBBlhS6A2mCmNwAAAAAARUPoDQAAAABA0RB6AwAAAABQNITeAAAAAAAUDaE3AAAAAABFo7TQBQAAAAAAFEJ5WXmhS6AWmOkNAAAAAEDREHoD/D979x3fVNXHcfybTnYZHSCyhwjI3nvKkulgyHhYKiAbFFBAlCGCgizZIIiylSkIlb2hUMremw7oYHclzx/VQGiRNqQEwuf9et2X9Nxzb743z3nS5peTcwEAAAAAAOAwKHoDAAAAAAAAABwGRW8AAAAAAAAAgMOg6A0AAAAAAAAAcBgu9g4AAAAAAAAAAHZhtHcAJAdmegMAAAAAAAAAHAZFbwAAAAAAAACAw6DoDQAAAAAAAABwGBS9AQAAAAAAAAAOg6I3AAAAAAAAAMBhuNg7AAAAAAAAAADYg8lo7wRIDsz0BgAAAAAAAAA4DIreAAAAAAAAAACHQdEbAAAAAAAAAOAwKHoDAAAAAAAAABwGRW8AAAAAAAAAgMNwsXcA4Hkz2TsAAAAAgBdCdGyMvSPgFeHsxJxD4IVltHcAJAdedQEAAAAAAAAADoOiNwAAAAAAAADAYVD0BgAAAAAAAAA4DIreAAAAAAAAAACHQdEbAAAAAAAAAOAwXOwdAAAAAAAAAADswWS0dwIkB2Z6AwAAAAAAAAAcBkVvAAAAAAAAAIDDoOgNAAAAAAAAAHAYFL0BAAAAAAAAAA6DojcAAAAAAAAAwGG42DsAAAAAAAAAANiF0d4BkByY6Q0AAAAAAAAAcBgUvQEAAAAAAAAADoOiNwAAAAAAAADAYVD0BgAAAAAAAAA4DIreAAAAAAAAAACH4WLvAAAAAAAAAABgDyajvRMgOTDTGwAAAAAAAADgMCh6AwAAAAAAAAAcBkVvAAAAAAAAAIDDoOgNAAAAAAAAAHAYFL0BAAAAAAAAAA7Dxd4BAAAAAAAAAMAeTEZ7J0ByYKY3AAAAAAAAAMBhUPQGAAAAAAAAADgMit4AAAAAAAAAAIdB0RsAAAAAAAAAkGwmT56snDlzKkWKFCpbtqz27t37n/3Dw8PVrVs3ZcmSRe7u7sqfP7/Wrl2b6MfjRpYAAAAAAAAAgGSxaNEi9enTR1OnTlXZsmU1fvx41alTRydPnpS3t3e8/lFRUapdu7a8vb21dOlSZc2aVRcvXlT69OkT/ZgUvQEAAAAAAAC8kkxGeydwfD/88IM6d+6s9u3bS5KmTp2qNWvWaPbs2RowYEC8/rNnz1ZoaKh27twpV1dXSVLOnDmT9JgsbwIAAAAAAAAASJTIyEjdunXLYouMjEywb1RUlA4cOKBatWqZ25ycnFSrVi3t2rUrwWNWrlyp8uXLq1u3bvLx8VHhwoU1cuRIxcbGJjojRW8AAAAAAAAAQKKMGjVKHh4eFtuoUaMS7Hvjxg3FxsbKx8fHot3Hx0eBgYEJHnPu3DktXbpUsbGxWrt2rQYPHqzvv/9ew4cPT3RGljcBAAAAAAAAACTKwIED1adPH4s2d3d3m53faDTK29tb06dPl7Ozs0qWLKmrV69qzJgxGjp0aKLOQdEbAAAAAAAAAJAo7u7uiS5ye3p6ytnZWUFBQRbtQUFBypw5c4LHZMmSRa6urnJ2dja3vfnmmwoMDFRUVJTc3Nye+rgsbwIAAAAAAAAAsDk3NzeVLFlSvr6+5jaj0ShfX1+VL18+wWMqVqyoM2fOyGh8eJfRU6dOKUuWLIkqeEsUvQEAAAAAAAC8qkwGtqRuSdSnTx/NmDFDP//8s44fP64uXbro7t27at++vSSpbdu2GjhwoLl/ly5dFBoaqp49e+rUqVNas2aNRo4cqW7duiX6MVneBAAAAAAAAACQLJo3b66QkBANGTJEgYGBKlasmNatW2e+ueWlS5fk5PRwbna2bNm0fv169e7dW0WKFFHWrFnVs2dPff7554l+TIPJZDLZ/Eqs4OKW1d4RAMCm7l/bZu8IAGBTefI3tncEvCLux0bZOwJeEWH379g7Al4Rzk580R7PR+SDy/aO8NIJqlbN3hFeOj6bN9s7wlPxqgsAAAAAAAAAcBgUvQEAAAAAAAAADoOiNwAAAAAAAADAYXAjSwAAAAAAAACvJJPR3gmQHJjpDQAAAAAAAABwGFbN9O7Tp0+C7QaDQSlSpFDevHnVuHFjZcyY8ZnCAQAAAAAAAACQFFYVvQ8ePCg/Pz/FxsbqjTfekCSdOnVKzs7OKlCggKZMmaK+fftq+/btKliwoE0DAwAAAAAAAADwJFYtb9K4cWPVqlVL165d04EDB3TgwAFduXJFtWvXVsuWLXX16lVVqVJFvXv3tnVeAAAAAAAAAACeyGAymUxJPShr1qzasGFDvFncR48e1dtvv62rV6/Kz89Pb7/9tm7cuJGoc7q4ZU1qDAB4od2/ts3eEQDApvLkb2zvCHhF3I+NsncEvCLC7t+xdwS8IpyduKUano/IB5ftHeGlE1ilmr0jvHQyb91s7whPZdXyJhEREQoODo5X9A4JCdGtW7ckSenTp1dUFH+sAgAAAAAAAHgxmYwGe0dAMrB6eZMOHTro999/15UrV3TlyhX9/vvv6tixo5o0aSJJ2rt3r/Lnz2/LrAAAAAAAAAAA/CerZnpPmzZNvXv3VosWLRQTExN3IhcXtWvXTuPGjZMkFShQQDNnzrRdUgAAAAAAAAAAnsKqNb3/defOHZ07d06SlDt3bqVJk8bqIKzpDcDRsKY3AEfDmt54XljTG88La3rjeWFNbzwvrOmddNcrVbd3hJdOlu2b7B3hqaya6f2vNGnSqEiRIrbKAgAAAAAAAADAM0l00btZs2aaO3eu0qVLp2bNmv1n3+XLlz9zMAAAAAAAAAAAkirRRW8PDw8ZDAbzvwEAAAAAAADgZWYy2jsBkkOii95z5syRJJlMJg0bNkxeXl5KmTJlsgUDAAAAAAAAACCpknwnBZPJpLx58+rKlSvJkQcAAAAAAAAAAKsluejt5OSkfPny6ebNm8mRBwAAAAAAAAAAqyW56C1J3377rfr3768jR47YOg8AAAAAAAAAAFZL9Jrej2rbtq3u3bunokWLys3NLd7a3qGhoTYJBwAAAAAAAABAUlhV9B4/fryNYwAAAAAAAADA82UyGewdAcnAqqJ3u3btbJ0DAAAAAAAAAIBnZlXR++rVq1q2bJlOnTolSXrjjTfUrFkzZc2a1abhAAAAAAAAAABIiiQXvadMmaI+ffooKipK6dKlkyTdunVL/fv31w8//KCuXbvaPCQAAAAAAAAAAInhlJTOa9asUY8ePfTpp5/q6tWrCg8PV3h4uK5evaquXbuqZ8+eWrt2bXJlBQAAAAAAAADgPyVppveYMWM0YMAADR8+3KI9S5Ys+uGHH5QqVSp99913ql+/vk1DAgAAAAAAAACQGEkqevv5+WnatGlP3N+mTRtNmDDhmUMBAAAAAAAAQHIzGe2dAMkhScubxMbGytXV9Yn7XV1dFRsb+8yhAAAAAAAAAACwRpKK3oUKFdKKFSueuP+PP/5QoUKFnjkUAAAAAAAAAADWSNLyJt26dVOXLl3k7u6ujz76SC4ucYfHxMRo2rRp+vLLLzVlypRkCQoAAAAAAAAAwNMkqejdrl07BQQE6NNPP9XAgQOVJ08emUwmnTt3Tnfu3FGPHj30v//9L5miAgAAAAAAAADw35JU9JaksWPH6r333tNvv/2m06dPS5KqVq2qFi1aqFy5cjYPCAAAAAAAAABAYiW56C1J5cqVo8ANAAAAAAAA4KVmMhrsHQHJIEk3snzUtm3b1Lp1a1WoUEFXr16VJM2fP1/bt2+3WTgAAAAAAAAAAJLCqqL3smXLVKdOHaVMmVJ+fn6KjIyUJEVERGjkyJE2DQgAAAAAAAAAQGJZVfQePny4pk6dqhkzZsjV1dXcXrFiRfn5+dksHAAAAAAAAAAASWFV0fvkyZOqUqVKvHYPDw+Fh4c/ayYAAAAAAAAAAKxiVdE7c+bMOnPmTLz27du3K3fu3M8cCgAAAAAAAAAAa7hYc1Dnzp3Vs2dPzZ49WwaDQdeuXdOuXbvUr18/DR482NYZAQAAAAAAAMDmTCZ7J0BysKroPWDAABmNRtWsWVP37t1TlSpV5O7urn79+ql79+62zggAAAAAAAAAQKIYTCbrP8+IiorSmTNndOfOHRUsWFBp0qSxOoiLW1arjwWAF9H9a9vsHQEAbCpP/sb2joBXxP3YKHtHwCsi7P4de0fAK8LZyarVZYEki3xw2d4RXjqXStW0d4SXTvb9vvaO8FRWzfSOiIhQbGysMmbMqIIFC5rbQ0ND5eLionTp0tksIAAAAAAAAAAAiWXVR40tWrTQwoUL47UvXrxYLVq0eOZQAAAAAAAAAABYw6qi9549e1S9evV47dWqVdOePXueORQAAAAAAAAAANawanmTyMhIxcTExGuPjo7W/fv3nzkUAAAAAAAAACQ3k9Fg7whIBlbN9C5TpoymT58er33q1KkqWbLkM4cCAAAAAAAAAMAaVs30Hj58uGrVqiV/f3/VrBl3h1NfX1/t27dPf/31l00DAgAAAAAAAACQWFbN9K5YsaJ27dqlbNmyafHixVq1apXy5s2rw4cPq3LlyrbOCAAAAAAAAABAolg101uSihUrpgULFtgyCwAAAAAAAAAAz8TqorfRaNSZM2cUHBwso9Fosa9KlSrPHAwAAAAAAAAAgKSyanmT3bt3K2/evHrzzTdVpUoVVatWzbxVr17d1hlfKV8N7afLF/10O+KM1v+5UHnz5nrqMV0+aaczp3brzq2z2rl9lUqXKmaxv1PHD+W7YYlCb5xQTNRVeXikS6b0eFEkxzhyd3fXhB9HKOj6EYWHntLiRdPl7e1p3t+2zQeKibqa4ObllcnicQIOb9btiDM6emSrWrd+z2bXjZfT/kMB6vbZUFVv9KEKV6wn36077R0JDoqxhqRq27GFdhxap1PX9mvFhgUqWqLwf/Zv0Pht/b17pU5d26+/ti9X9Vrxl/3Lmz+XZi2YoCMXdurE5T1atfE3vZY1s3m/l3cmjf9ppPYf36QTl/dozaZFqtewls2vDS+WDp1a6cBhX10OOqx1votVvMRb/9m/UZO62rnvT10OOqwtO1eqVu0nTzoaM26YQiJO6uMu7cxt2bJn1fhJI7T/sK8uBfpr76EN+mxgd7m6utrsmvDisMd7A0kqVbKo/lq3SDeCjykk6KjWrl6gIkUKWpxj1sxxOui3UQ/uXdSypbNscr2wj08+bqeTJ3cqIvy0tm1dqVKPjZnHNWvWQIf9Nyki/LQO7N+gunXi15KGDOmrC+f3KzzstP5c+6vy5slpsX/Z0tk6fXq3IsJP68L5/Zo9e7yyZPGx6FO7VlVt3bJCN0KO68rlQ1r42zTlyPH6s14uHIzJaGBL4vYysKro/cknn6hUqVI6cuSIQkNDFRYWZt5CQ0NtnfGV0b9fV33arYO6fjpAFSo11N1797R29QK5u7s/8Zj332+ksWOG6pvhP6h02bryP3xMa9cssCgypkqVUuv/2qxvR098HpcBO0uucfT92K/0ToPaatHyY9Wo+a5ey5JZSxfPNO9fvGSlsmYrZrGtX79JW7bsVEjITUnSxx+11YjhA/X1Nz+oSLEaGvb1WE38cYTeaVA7+Z4QvPDu33+gN/Lm1hd9u9o7ChwcYw1J0bBpHQ0e3l/jv5uqBtU/0PEjp/TL0mnK5Jkxwf4lyxTVxBmjtWjBctWv9r7Wr/1bM375UfnfzGvukyPn61q2dp7Onj6v5g07qE7ldzVh7DRFRkaZ+4z7aaRy582pjh9219uV3tW61b6aMnusCr1VINmvGfbRpFk9fT1yoMaOnqyaVZrq6JETWvz7LHk+YayVLlNc02Z9rwXzl6pG5Sb6c42vfv51sgq8mS9e3/rv1FKpUkV1/VqQRXu+fLnlZDCoX68hqlyugQYPHKV2HVroi6G9k+UaYT/2em+QOnUqrVm9QJcuX1WFSg1VtXpT3b5zV2tXL5CLS9wXzp2dnXT//gNNmjRbvr7bku9JQLJ7772G+u67wRoxYrzKlquvgIBjWr1qvsWYeVS5ciU1f94kzZ27UGXL1tPKVeu1ZMlMFSz4hrlP375d1K1re3XvPkiVKjfU3bv3tXr1LxZjd8uWnfrwwy56q0g1tWj5sXLnyqHffp1q3p8zZzYtXTpTm7fsVJmydfVOw9bK5JlRixZOT74nA8ALw2AymUxJPSh16tTy9/dX3rx5n945kVzcstrsXC+ryxf9NG78NP0wbpokKV26tLp25ZA6dOqtxYtXJnjMzu2rtG+/v3r2+lKSZDAYdOHcPk2eMkffjZls0bdqlfLy3bhUmbzeVETEreS9GNhNcoyjdOnSKvDaYbVu+6mWL18jSXrjjTw6GrBVFSs11J69fvHO6emZUZcuHFDnj/tpwYJlkqRtW1Zo5859+nzgcHO/MaOHqEyZ4qpavalNn4cXwf1r/PGeVIUr1tOPowarZpUK9o4CB8dYs06e/I3tHeG5WbFhgfz9jmrI5yMlxf1u3BOwQXNn/KYpP8afjTh51hilSpVS7Vt+am77469fdCzgpAb1/UaSNGnmd4qJjlGvLoOe+LjHL+3RF/2+0fLFq81t/me2adSwcVo4f7mtLu+Fdz826umdHMQ638U65BegAf3jxonBYJD/sS2aOX2+JoybEa//jDnjlCpVSn3Y/BNz258bF+lIwAn17z3U3JY5i7fW+y7RB8066tfF0zT9p3ma9tPPT8zRrUdH/a9jS5Uu+mp9syDs/h17R0hW9npvULJEEe3Z/ady5i6tK1euSZIKFy6gQ36+euPNijp79oLFY86aOU7p06fTu+91TKZnwv6cnayac/hS2LZ1pQ4c8Fev3oMlxY2Zs2f2aspPczR27JR4/X+ZP0WpU6dU02btzW1bt6zQ4cNH9Wn3uN+RF87v148/ztC48Q/H7uVLfurUua+WLEl47L7ToLaWLJmptOnyKCYmRk2b1tf8eZOUNl0e/Vv6alC/lpYunWXu44giH1y2d4SXzoViTMRLqpyHNtg7wlNZ9apbtmxZnTlzxtZZXmm5cmVXliw+8v17u7nt1q3b2rv3oMqVLZngMa6uripRooh8/35YWDOZTPL9e7vKlUv4GDi25BpHJUsUkZubm8UMjJMnz+rixStPHGttWr+ve/fua9myNeY2N3c3PYiMtOh3/8EDlS5dzDzjAwAAe3N1ddFbRQtq+5bd5jaTyaTtW3arROmiCR5TonRRi/6StPXvneb+BoNBNWpX0bmzFzV/6VT5ndysFRsW6O36NSyOObDvkBo2rSuP9OlkMBjUsFldubu7adf2fTa+SrwIXF1dVbRYIW3Z/HC5JZPJpK2bd6pU6eIJHlOqdDFt3bzLom2T73aVKl3M/LPBYNCU6WM0ecIsnTyRuPdt6dKlVXhYRNIvAi8se743OHnqrG7cCFWH9i3k6uqqFClSqP3/WurY8VO6cIGCnCOJGzNv6e9HxpnJZNLfm7Y9cZyVLVfCor8kbdi4RWX/6f9w7D4cY7du3dbefYdUrmyJBM+ZIUN6tWjRVLt27zcXsw8eDJDRaFS7dh/IyclJ6dKlVatWzfT339sdtuAN4CGrit7du3dX3759NXfuXB04cECHDx+22JB0mX28JUlBQSEW7UHBN5Q5s3eCx3h6ZpSLi4uCg25YtAcHhyizj1fyBMULLbnGkU9mL0VGRsb7hkBwcIgyZ054rLVv30K/LfxDDx48MLdt2LBFHdq3VInicetUlixRRB3at5Sbm9sTv8ILAMDzljFTBrm4uOjGP8tz/etGyE15+ST8VW0vb0+FBFv2Dwm+Ka9/1rj19MqoNGlTq2vPDtrsu0Ot3/1Y61f/renzxqlshVLmY7q27ycXVxcFnNuhM4EHNOqHIerctpcunqdI5Ij+HWuPj53gkJvy9vFM8BhvH08FB1v+3RbyWP8evTsrJiZG06fOS1SOXLmzq9NHrfXznIVJvAK8yOz53uDOnbuqWfs9tWrZTHdunVVE2CnVqVNN7zRsrdjYWJtcH14M/46ZoGDLcRYcdEM+T6hLZPbxUtBjr2OP9v/3v4+/1gUHhcjHx3Lsjhg+UKE3TyrweoCyZXtN7z3ybYELFy6rwTut9fWwz3X71lmFBB9T1qxZ1OrDLtZdLICXilVF73fffVfHjx9Xhw4dVLp0aRUrVkzFixc3//dpIiMjdevWLYvNilVWXmotWzZVeOgp8+bqyixXJN2LOo7KlS2pgm/m15w5v1m0Dx8xXuvWb9KO7av04N5FLV82W/N/WSJJMhqN9ogKAMBz4fTP19r/+nOzZv00X8eOnNSUH2fJd/0WtW7/vrlf30GfKp1HWrVs0knv1GihmVPmacrssXojgfWagYQUKVZIH33SVt27DExU/8xZvLVo2UytXLFOv/y8JJnTITm9SO8NUqRIoRnTxmrnrv2qWKmhqlRtoqNHT2rlinlKkSKF3XLB8fwwbqrKlq2r+g1aKdYYq9mzxpv3+fh46acpo/XLL0tVoeI7qlnrPUVFR2vhb1OffEIADsOq34Lnz59/pgcdNWqUhg0bZtFmcEojg3O6Zzrvy2TVqr+0d+9B88/u7m6S4l6UAwODze0+3p465H80wXPcuBGqmJiYeLNAvL29FPjYp/lwTM9rHAUFhsjd3V0eHuksZnR4e3spMDD+WOvQoaUOHjoiv4MBFu0PHjxQ54/6qkvXz+Xj46Xr14PUuVNr3bp123yzSwAA7C30ZphiYmLk+dgNuDy9MikkKOHfVyHBN+TlbdnfyzuTQv6ZpRZ6M0zR0dE6ffKsRZ8zp86rdLm4SSM5cr6u9h+1Uq0KTXTqRFy/40dPqUy5kmrXqYV5bXA4jn/H2uNjx9srU7yZtv8KDrohb2/Lv9u8HulfvnwpeXpl0qGjm8z7XVxcNGzE5/qoS1uVLFLT3O6T2Vt/rJ6nvXsOqk+Pwba6LNjJi/TeoGWLJsqRI5sqVm5knuDWuk033Qg+pkaN3n7ieuJ4+fw7Zny8LWd1e/t4xvuWwb8Cg0Lk89jr2KP9//2vt7enxdj19vHS4cfG7s2bYbp5M0ynz5zXiROnde7sPpUtW0J79vjpk0/aKSLitgZ9MdLcv337Hjp3dp/KlClu8f8XvNpesXm4rwyrZnrnyJHjP7enGThwoCIiIiw2g1Naa6K8tO7cuauzZy+Yt2PHTun69SDVqF7J3Cdt2jQqU6a4du85kOA5oqOj5ed32OIYg8GgGtUraffuhI+BY3le4+iA32FFRUWpRo2HffLnz6McOV6PN9ZSp06l999rGG+W96NiYmJ09ep1GY1GNf+gkdas3fjKfdsDAPDiio6OUYD/MVWsUtbcZjAYVLFqOfnt80/wGL99/hb9JalStfLm/tHRMfI/eFR58ua06JMrTw5duXxdkpQiZUpJ8b/9FGuMNc8Uh2OJjo6W/6GjqlK1vLnNYDCoctXy2r8v4WLM/n2HVLlqOYu2qtUraP++Q5KkxQtXqGqFRqpeqYl5u34tSJMnzNIHzTqZj8mcxVsr1syT/6Gj6tF1IH+LOYAX6b1BqlQpZTQaLcbVvz/zeuZY4sZMgKpXr2huMxgMql6t0hPH2Z7dfhb9Jalmjcra80//8+cvJTx2SxfT7j1+T8zy79j69wOfVClTxv+dGmu06AvAcT3T952OHTumS5cuKSrK8u7qjRo1+s/j3N3d5e7ubtFmMBieJYpDmDBxpgYN7KHTZ87pwoXLGvZVf127FqQVK9ab+/y1bpH+WPGnpvw0V5I07scZmjNrnA74Hda+fQfVo3tnpU6dUnN/XmQ+xsfHS5kzeytPnpySpLcKF9DtO3d16dJVhYWFP8crxPOQHOPo1q3bmj1nocZ+N1RhoeG6deu2fhw/XLt27deevZZ/dHzwfiO5uDhrwa/L42XLly+3Spcupr17DypDeg/16vWRChUqoPYdeyXb84EX371793XpyjXzz1evBenEqbPySJdWWZ6w3iRgDcYakmLmlHn6fvIIBRw6qkN+Aer4SRulSpVSi3/9Q5I0bsoIBV4P1uhvfpQkzZ72ixavmqPO3drq77+2qVGzuipSrJAG9H747cZpE+do8qyx2rPrgHZu26tqNSupVt2qat6wgyTp7OnzOn/2okb9MFTDh4xVeGi43m5QQ5WrlVf7Fp8+9+cAz8fUyXM08afROnTwiPwOHNbHXdspVeqU+u2XuL+lJk0drcDrQRo+7AdJ0vSf5mnF2vnq8ml7bVi/RU3fra9ixQurb88hkqSwsPB4f+NHR0crOOiGzp6J+8ZuXMF7vi5fvqahX462uLfK42vo4uVmr/cGG323avS3X2rihJGaPGW2nJyc9Fn/TxUTE6PNj9y49c0388nNzU0ZM6ZX2jRpVLRoIUmS/xNmouPF9OOEGZo18wcd8Dus/fsOqXv3jkqdOqXmzVssSZo1a5yuXQvU4MGjJUmTJs/Sxg1L1KvnR/rzT1+9/0EjlSxZRF27DTCfc+KkWRowoLvOnDmv8xcu66uh/XT9epBWrowbu6VLF1OpkkW1Y+c+hYdHKHfuHBo6tJ/Onr2g3bvjxuGf63zVo0cnDRrUU4sXrVCatGn0zdef68LFyzp0iDEGODqrit7nzp1T06ZNFRAQIIPBYP709t/CNTemsM6YsVOUOnUqTZ3yndKnT6cdO/apQcPWioyMNPfJnTuHxR+lS5aslJdnRn01pJ8yZ/aSv/9RNXintcUfqx9/1EZDBvc1/7x50++SpA4de2ve/MXP4crwPCXXOOrb7ysZjUYtXjRd7u7u+mvDZn3afVC8x+/QvqV+/+PPeDe2kSRnZyf17vWx3sifR9HR0dq8ZacqV22sixev2PhZwMvkyInT6tD9c/PP302cLklqXK+WRnzZ90mHAUnGWENSrPp9vTJmyqg+A7vJy9tTx46cUJv3PzHf3PK117PIaHw4g/HAXn/1+GiA+g36VJ992VMXzl1U59Y9der4GXOf9Wv+1qC+X6tbr04aNmqAzp65oI/b9dG+PXEzemNiYtSueVcNGNpLs3+dpNSpU+rC+cvq0/ULbdq47fk+AXhu/lj+pzJlyqjPB/WQt4+XjgQcV/NmncxLv73+ehaZHpmpuG/vQX3SqZ8GftlLXwzpo3NnL6hdq246cfx0oh+zWvWKyp0np3LnyamAE5Zjy8vjDdtcGF4I9npvcPLkWTVp+j8N/rKPtm9dKaPRqEOH4s7z6HIVq1bMV86c2cw/H9j3lyTJxS1rsjwfSB5Ll66Sl2dGDRnSV5l9vOTvf0wNG7Uxj5ls2bJa/M7cvfuA2rbrrmFf9dfXX3+mM2cu6P33O+nYsZPmPt9//5NSp06lyZO/Vfr06bRz5z41bNjGPHbv3Xugxk3qafDgvkqdOqUCA4P1119b9OG3Xc0TMzdv3qm27bqrb59P1LdPF927d1979vipUcM2evDgwXN8hgDYg8FkxffYGjZsKGdnZ82cOVO5cuXS3r17dfPmTfXt21djx45V5cqVkxyEX2oAHM39axQoADiWPPkb2zsCXhH3Y6Oe3gmwgbD7d+wdAa8IZ5bTwHMS+eCyvSO8dM4XrW3vCC+dXP4b7B3hqaya6b1r1y79/fff8vT0lJOTk5ycnFSpUiWNGjVKPXr00MGD3AwAAAAAAAAAAPD8WVX0jo2NVdq0cTee9PT01LVr1/TGG28oR44cOnny5FOOBgAAAAAAAAD7Mxm5z6AjsqroXbhwYfn7+ytXrlwqW7asvvvuO7m5uWn69OnKnTu3rTMCAAAAAAAAAJAoVhW9v/zyS929e1eS9PXXX+udd95R5cqVlSlTJi1atMimAQEAAAAAAAAASCyrit516tQx/ztv3rw6ceKEQkNDlSFDBhkMfCUAAAAAAAAAAGAfVhW9E5IxY0ZbnQoAAAAAAAAAAKskuujdrFmzRJ90+fLlVoUBAAAAAAAAAOBZJLro7eHhkZw5AAAAAAAAAOC5MplYqtkRJbroPWfOnOTMAQAAAAAAAADAM3OydwAAAAAAAAAAAGzF6htZLl26VIsXL9alS5cUFRVlsc/Pz++ZgwEAAAAAAAAAkFRWzfSeMGGC2rdvLx8fHx08eFBlypRRpkyZdO7cOdWrV8/WGQEAAAAAAAAASBSrit5TpkzR9OnTNXHiRLm5uemzzz7Thg0b1KNHD0VERNg6IwAAAAAAAAAAiWLV8iaXLl1ShQoVJEkpU6bU7du3JUlt2rRRuXLlNGnSJNslBAAAAAAAAIBkYDLaOwGSg1UzvTNnzqzQ0FBJUvbs2bV7925J0vnz52UymWyXDgAAAAAAAACAJLCq6F2jRg2tXLlSktS+fXv17t1btWvXVvPmzdW0aVObBgQAAAAAAAAAILGsWt5k+vTpMhrj5v5369ZNmTJl0s6dO9WoUSN9/PHHNg0IAAAAAAAAAEBiWVX0dnJykpPTw0niLVq0UIsWLWwWCgAAAAAAAAAAa1hV9JaksLAwzZo1S8ePH5ckFSxYUO3bt1fGjBltFg4AAAAAAAAAgKSwak3vrVu3KleuXJowYYLCwsIUFhamCRMmKFeuXNq6dautMwIAAAAAAACAzRlNBrYkbi8Dq2Z6d+vWTR988IF++uknOTs7S5JiY2PVtWtXdevWTQEBATYNCQAAAAAAAABAYlg10/vMmTPq27evueAtSc7OzurTp4/OnDljs3AAAAAAAAAAACSFVUXvEiVKmNfyftTx48dVtGjRZw4FAAAAAAAAAIA1Er28yeHDh83/7tGjh3r27KkzZ86oXLlykqTdu3dr8uTJ+vbbb22fEgAAAAAAAACARDCYTCZTYjo6OTnJYDDoad0NBoNiY2OTHMTFLWuSjwGAF9n9a9vsHQEAbCpP/sb2joBXxP3YKHtHwCsi7P4de0fAK8LZyaov2gNJFvngsr0jvHROvVnX3hFeOvmPr7N3hKdK9Ezv8+fPJ2cOAAAAAAAAAHiuTCaDvSMgGSS66J0jR47kzAEAAAAAAAAAwDNLdNH7UdmzZ1e1atVUtWpVVatWTXny5LF1LgAAAAAAAAAAksyqRaVGjhypFClSaPTo0cqXL5+yZcum1q1ba8aMGTp9+rStMwIAAAAAAAAAkChWzfRu3bq1WrduLUm6fv26tmzZotWrV6tr164yGo1W3cgSAAAAAAAAAIBnZVXRW5Lu3bun7du3a/Pmzdq0aZMOHjyowoULq1q1ajaMBwAAAAAAAABA4llV9K5QoYIOHjyoN998U9WqVdOAAQNUpUoVZciQwdb5AAAAAAAAACBZmIwGe0dAMrBqTe8TJ04oderUKlCggAoUKKA333yTgjcAAAAAAAAAwO6sKnrfvHlTf//9t8qVK6f169erYsWKypo1q1q1aqUZM2bYOiMAAAAAAAAAAIliMJlMpmc5gclk0oEDBzRp0iQtWLDA6htZurhlfZYYAPDCuX9tm70jAIBN5cnf2N4R8Iq4Hxtl7wh4RYTdv2PvCHhFODtZNecQSLLIB5ftHeGlcyJ/fXtHeOkUOLXW3hGeyqo1vf38/LR582Zt3rxZ27dv1+3bt/XWW2+pe/fuqlq1qq0zAgAAAAAAAACQKFYVvcuUKaPixYuratWq6ty5s6pUqSIPDw9bZwMAAAAAAAAAIEmsKnqHhoYqXbp0ts4CAAAAAAAAAM/Nsy38jBeVVYtKpUuXTuHh4Zo5c6YGDhyo0NBQSXHLnly9etWmAQEAAAAAAAAASCyrZnofPnxYNWvWVPr06XXhwgV17txZGTNm1PLly3Xp0iXNmzfP1jkBAAAAAAAAAHgqq2Z69+nTR+3bt9fp06eVIkUKc3v9+vW1detWm4UDAAAAAAAAACAprCp679u3Tx9//HG89qxZsyowMPCZQwEAAAAAAAAAYA2rit7u7u66detWvPZTp07Jy8vrmUMBAAAAAAAAAGANq9b0btSokb7++mstXrxYkmQwGHTp0iV9/vnnevfdd20aEAAAAAAAAACSg8losHcEJAOrZnp///33unPnjry9vXX//n1VrVpVefPmVZo0aTRixAhbZwQAAAAAAAAAIFGsmunt4eGhDRs2aMeOHfL399edO3dUokQJ1apVy9b5AAAAAAAAAABINKuK3pLk6+srX19fBQcHy2g06sSJE/r1118lSbNnz7ZZQAAAAAAAAAAAEsuqovewYcP09ddfq1SpUsqSJYsMBta+AQAAAAAAAADYn1VF76lTp2ru3Llq06aNrfMAAAAAAAAAAGA1q4reUVFRqlChgq2zAAAAAAAAAMBzYzSxgoUjcrLmoE6dOpnX7wYAAAAAAAAA4EVh1UzvBw8eaPr06dq4caOKFCkiV1dXi/0//PCDTcIBAAAAAAAAAJAUVhW9Dx8+rGLFikmSjhw5YrGPm1oCAAAAAAAAAOzFqqL3pk2bbJ0DAAAAAAAAAIBnZtWa3gAAAAAAAAAAvIismukNAAAAAAAAAC87k4mlmh0RM70BAAAAAAAAAA6DojcAAAAAAAAAwGFQ9AYAAAAAAAAAOAyK3gAAAAAAAAAAh0HRGwAAAAAAAADgMFzsHQAAAAAAAAAA7MFksncCJAdmegMAAAAAAAAAHAZFbwAAAAAAAACAw6DoDQAAAAAAAABwGBS9AQAAAAAAAAAOg6I3AAAAAAAAAMBhuNg7AAAAAAAAAADYg9FksHcEJANmegMAAAAAAAAAHAZFbwAAAAAAAACAw6DoDQAAAAAAAABwGBS9AQAAAAAAAAAOg6I3AAAAAAAAAMBhuNg7AAAAAAAAAADYg8lksHcEJANmegMAAAAAAAAAHAZFbwAAAAAAAACAw6DoDQAAAAAAAABwGBS9AQAAAAAAAAAOg6I3AAAAAAAAAMBhuNg7AAAAAAAAAADYg8lk7wRIDsz0BgAAAAAAAAA4DIreAAAAAAAAAACHQdEbAAAAAAAAAOAwKHoDAAAAAAAAABwGRW8AAAAAAAAAgMNwsXcAAAAAAAAAALAHo8lg7whIBsz0BgAAAAAAAAA4DIreAAAAAAAAAACHQdEbAAAAAAAAAOAwKHoDAAAAAAAAABwGRW8AAAAAAAAAgMNwsXeAf6V2S2HvCHhFfOJZxt4R8IrIk7+xvSMAgE2dPbXC3hHwijA9uGvvCHhFpM5d194R8IowmUz2jgDgCUwmg70jIBkw0xsAAAAAAAAA4DAoegMAAAAAAAAAHAZFbwAAAAAAAACAw6DoDQAAAAAAAABwGBS9AQAAAAAAAAAOw8XeAQAAAAAAAADAHowmg70jIBkw0xsAAAAAAAAA4DAoegMAAAAAAAAAHAZFbwAAAAAAAACAw6DoDQAAAAAAAABwGBS9AQAAAAAAAAAOw8XeAQAAAAAAAADAHkz2DoBkwUxvAAAAAAAAAIDDoOgNAAAAAAAAAHAYFL0BAAAAAAAAAA6DojcAAAAAAAAAwGFQ9AYAAAAAAAAAOAwXewcAAAAAAAAAAHswmgz2joBkwExvAAAAAAAAAIDDoOgNAAAAAAAAAHAYFL0BAAAAAAAAAA6DojcAAAAAAAAAwGFQ9AYAAAAAAAAAOAwXewcAAAAAAAAAAHswmQz2joBkwExvAAAAAAAAAIDDoOgNAAAAAAAAAHAYFL0BAAAAAAAAAA6DojcAAAAAAAAAwGFQ9AYAAAAAAAAAOAwXewcAAAAAAAAAAHsw2jsAkgUzvQEAAAAAAAAADoOiNwAAAAAAAADAYVD0BgAAAAAAAAA4DIreAAAAAAAAAACHQdEbAAAAAAAAAOAwXOwdAAAAAAAAAADswSSDvSMgGTDTGwAAAAAAAADgMCh6AwAAAAAAAAAcBkVvAAAAAAAAAIDDoOgNAAAAAAAAAHAYFL0BAAAAAAAAAA7Dxd4BAAAAAAAAAMAejCZ7J0ByYKY3AAAAAAAAAMBhUPQGAAAAAAAAADgMq4reHTp00O3bt+O13717Vx06dHjmUAAAAAAAAAAAWMOqovfPP/+s+/fvx2u/f/++5s2b98yhAAAAAAAAAACwRpJuZHnr1i2ZTCaZTCbdvn1bKVKkMO+LjY3V2rVr5e3tbfOQAAAAAAAAAAAkRpKK3unTp5fBYJDBYFD+/Pnj7TcYDBo2bJjNwgEAAAAAAABAcjHKYO8ISAZJKnpv2rRJJpNJNWrU0LJly5QxY0bzPjc3N+XIkUOvvfaazUMCAAAAAAAAAJAYSSp6V61aVZJ0/vx5Zc+eXQYDn4QAAAAAAAAAAF4cVt3I8vjx49qxY4f558mTJ6tYsWJq1aqVwsLCbBYOAAAAAAAAAICksKro3b9/f926dUuSFBAQoD59+qh+/fo6f/68+vTpY9OAAAAAAAAAAAAkVpKWN/nX+fPnVbBgQUnSsmXL1LBhQ40cOVJ+fn6qX7++TQMCAAAAAAAAAJBYVhW93dzcdO/ePUnSxo0b1bZtW0lSxowZzTPAAQAAAAAAAOBFZhL3LHREVhW9K1WqpD59+qhixYrau3evFi1aJEk6deqUXn/9dZsGBAAAAAAAAAAgsaxa03vSpElycXHR0qVL9dNPPylr1qySpD///FN169a1aUAAAAAAAAAAABLLqpne2bNn1+rVq+O1jxs37pkDAQAAAAAAAABgLatmekvS2bNn9eWXX6ply5YKDg6WFDfT++jRozYLBwAAAAAAAABAUlhV9N6yZYveeust7dmzR8uXL9edO3ckSf7+/ho6dKhNAwIAAAAAAAAAkFhWFb0HDBig4cOHa8OGDXJzczO316hRQ7t377ZZOAAAAAAAAABILka2JG8vA6uK3gEBAWratGm8dm9vb924ceOZQwEAAAAAAAAAYA2rit7p06fX9evX47UfPHhQWbNmfeZQAAAAAAAAAABYw6qid4sWLfT5558rMDBQBoNBRqNRO3bsUL9+/dS2bVtbZwQAAAAAAAAAIFGsKnqPHDlSBQoUULZs2XTnzh0VLFhQVapUUYUKFfTll1/aOiMAAAAAAAAAAIniYs1Bbm5umjFjhgYPHqwjR47ozp07Kl68uPLly2frfAAAAAAAAAAAJJpVRe9/Zc+eXdmzZ7dVFgAAAAAAAAB4bkwy2DsCkkGSlze5e/euhgwZosKFCytNmjRKmzatihQpoq+//lr37t1LjowAAAAAAAAAACRKkmZ6R0VFqWrVqjpy5Ijq1aunhg0bymQy6fjx4xoxYoT+/PNPbd26Va6ursmVFwAAAAAAAACAJ0pS0funn37SlStX5O/vrzfeeMNi34kTJ1StWjVNnTpV3bt3t2lIAAAAAAAAAAASI0nLmyxfvlyDBw+OV/CWpAIFCuiLL77Q0qVLbRYOAAAAAAAAAICkSFLR+9ixY6pWrdoT91evXl3Hjh171kwAAAAAAAAAAFglScubhIeHK1OmTE/cnylTJkVERDxzKAAAAAAAAABIbkZ7B0CySNJMb6PRKGdn5yefzMlJsbGxzxwKAAAAAAAAAABrJGmmt8lkUs2aNeXikvBhMTExNgkFAAAAAAAAAIA1klT0Hjp06FP7vPvuu1aHAQAAAAAAAADgWdi86A0AAAAAAAAAgL0kaU3vR8XExGjjxo2aNm2abt++LUm6du2a7ty5Y7NwAAAAAAAAAAAkRZJmev/r4sWLqlu3ri5duqTIyEjVrl1badOm1ejRoxUZGampU6faOicAAAAAAAAA2JTR3gGQLKya6d2zZ0+VKlVKYWFhSpkypbm9adOm8vX1tVk4AAAAAAAAAACSwqqZ3tu2bdPOnTvl5uZm0Z4zZ05dvXrVJsEAAAAAAAAAAEgqq2Z6G41GxcbGxmu/cuWK0qZN+8yhAAAAAAAAAACwhlVF77ffflvjx483/2wwGHTnzh0NHTpU9evXt1U2AAAAAAAAAACSxKrlTb7//nvVqVNHBQsW1IMHD9SqVSudPn1anp6e+u2332ydEQAAAAAAAACARLGq6P3666/L399fixYtkr+/v+7cuaOOHTvqww8/tLixJQAAAAAAAAC8qEwy2DsCkoFVRW9JcnFx0YcffqgPP/zQlnkAAAAAAAAAALCaVWt6jxo1SrNnz47XPnv2bI0ePfqZQwEAAAAAAAAAYA2rit7Tpk1TgQIF4rUXKlRIU6dOfeZQAAAAAAAAAABYw6qid2BgoLJkyRKv3cvLS9evX3/mUAAAAAAAAAAAWMOqone2bNm0Y8eOeO07duzQa6+99syhAAAAAAAAAACwhlU3suzcubN69eql6Oho1ahRQ5Lk6+urzz77TH379rVpQAAAAAAAAAAAEsuqmd79+/dXx44d1bVrV+XOnVu5c+dW9+7d1aNHDw0cONDWGR1Sp49a6/DRLQq6cUy+m5apRMki/9m/SdN62uf3l4JuHNPOPWtV++1q5n0uLi4a9vVn2rlnra4FBejE6Z2aOn2sMmf2tjhHnrw59evCqTp3cZ8uXzukdX8tUuUq5ZLj8vCCK9+mtj7fPkHDT/6sbn98o9eL5nli3zItauiTxUM11H+GhvrPUKdfBsXrn8bTQ++P/URf7Jmib47PVYefByhTzszJfRl4wbTt2EI7Dq3TqWv7tWLDAhUtUfg/+zdo/Lb+3r1Sp67t11/bl6t6rcrx+uTNn0uzFkzQkQs7deLyHq3a+Jtey2o5tkqULqrf/pipE5f36OjFXVqyeq7cU7jb9NrwYrHHWPPyzqTxP43U/uObdOLyHq3ZtEj1Gtay+bXBMew/FKBunw1V9UYfqnDFevLdutPekfAS+u2PP1WnVReVrNtSrboNUMCJ00/sGx0To5/mLVG91t1Usm5Lvdu5r7bvPWjRJzY2VhPn/Ka6H3ZVqXqtVK91N02dv0Qmkym5LwV2NnRoP1266KdbEWe07s+Fyps311OP6fJJO50+tVu3b53Vju2rVLpUMYv97u7umvDjCAVeP6Kw0FNatGi6vL09LfpER12Nt33wQaN4j3P48GbdijijI0e2qnXr9575evH8DB3STxcvHFBE+Bn9+edviRpbn3zSTqdO7tKtiDPavm2VSiUwtn78cbiuXwtQ6M2TWrQw/tjKlu01/fHHzwoPO60rlw9p1Kgv5ezsbN5fpUp5RUVeibf5+HiZ+1SqVFa/L5+jC+f3Kyryiho1qvNsTwZeakYDW1K3l4FVRW+DwaDRo0crJCREu3fvlr+/v0JDQzVkyBBb53NIzd5toJGjBmn0qAmqUqmRjhw5od//mCtPr0wJ9i9TtoRmzRmv+T8vUeWKDbVm9Qb9uvAnvVkwvyQpVaoUKlqskMaMnqQqlRqpdauuypcvlxYunm5xnsVLZsrFxUUN67dW1cpNdOTIcS1aMiPeLxA4tiLvlNM7X7aR74/LNKHBIF0/dlEd5w1Q6kzpEuyfu9ybOrRyp6a3HK4pzYYq4vpNdZo/UOl8Mpj7tJ3eRxmzeevnzmP1Y4OBCr8aos6/DJJrSgqPr4qGTeto8PD+Gv/dVDWo/oGOHzmlX5ZOUybPjAn2L1mmqCbOGK1FC5arfrX3tX7t35rxy4/K/2Zec58cOV/XsrXzdPb0eTVv2EF1Kr+rCWOnKTIyytynROmimrfkJ23btEuNardSw5ot9fPM32QyGpP9mmEf9hpr434aqdx5c6rjh931dqV3tW61r6bMHqtCb8W/sTdw//4DvZE3t77o29XeUfCSWrdph8ZM/VmftH1fi6d+p/x5curjz4frZlhEgv0nzv5NS1dv0MDuHfXH7PH6oOHb6jV0jI6fPmfuM3vhH1q88i8N6t5RK+aMV+/OrTVn0Qr9+vva53VZsIN+/brq024d1O3TAapYqaHu3runNasXyN39yX+nv/9+I40ZM1TDh/+gMmXr6vDhY1qzZoG8Hnm/+v3Yr9SgQW21aPmxatZ8V69lyawli2fGO1fHjr31erZi5m3FivXmfR9/1FbDhw/UN9/8oKLFaujrr8dqwo8j1KBBbds+CUgW/fp2Vbdu7fVp94GqVKmh7t29p9Wrf/nvsfVeQ435boiGjxinsmXr6XDAMa1Z/YvF2Bo7dqga1K+tlq0+Vs1a7ylLFh8tXjTDvN/JyUkr/pgnNzdXVa3aWB079VbbNu/rq6H94j1eocKVlS17cfMWHHzDvC916lQ6fPiYevb80kbPCIAXjcH0gny075HmyTNNHY3vpmXy8zus/n2HSYr7EOHYye2aPnWexv0wLV7/OT9PUKpUKdX8/c7mto1/L1VAwHH17jk4wccoUeItbdr6hwoVqKQrV64rY6YMOn9xv+q+3Vy7du6XJKVJk1pXAw+r8TtttHnzqzMD6RPPMvaOYFfd/vhGV/zPasXQuZLixt/AXZO08+f12vzTyqceb3Ay6Cv/mVoxdK78lm+TZ67M6r9pnH6o3V9Bp6+Yz/nlvp+0bswi7Vu0KTkv54X2260j9o7w3KzYsED+fkc15PORkuLGwJ6ADZo74zdN+XFWvP6TZ41RqlQp1b7lp+a2P/76RccCTmpQ328kSZNmfqeY6Bj16jLoiY/7x1+/aNvm3fp+5CQbXxFeVPYaa8cv7dEX/b7R8sWrzW3+Z7Zp1LBxWjh/ua0u74V39tQKe0d46RSuWE8/jhqsmlUq2DvKS8X04K69I9hVq24DVOiNvPqiRydJktFoVO0Wn6hl03rq1LJpvP41Puiszq2aqWWTeua23l+Nkbubm74d1FOS1G3QSGXKkF5f9+/6xD6votS569o7QrK6dNFP48ZP07hxce8z06VLq6tXDqljp95avDjhv/13bF+l/fv91bNXXDHQYDDo/Ll9mjxljsaMmax06dLq+rXDatP2Uy1fvkaS9MYbeXQkYKsqVWqoPXv9JMXN9H73vQ5auXJ9go+zdcsK7dy5TwMGDje3fTd6iMqUKa5q1eOP85edwfCSTI1MpIsXDmj8j9MtxtaVywfVqVMfLV6S8Njavm2V9h/wV69Hxta5s/s0ZcocjRkbN7auXfVX27bdtfz3h2Mr4PAWVarcSHv3+qlOner64/e5ypGzpLmI3blza40cMUivZS2q6OhoValSXhs3LJGXd0FFRNx66rVERV7Re+93fOJYfdlERV6xd4SXzqrMLe0d4aXTMPA3e0d4Kqtmet+9e1eDBw9WhQoVlDdvXvMSJ/9ueDJXV1cVK15Ymzc9LDKbTCZt3rRTpcsUT/CY0mWKa/MmyxuH+vpue2J/Ke4XjtFoVETEbUlS6M0wnTp1Vi1bNlOqVCnl7Oys9h1aKjj4hg4denUKc686Z1dnZS2cS6d3PPzf3GQy6cyOI8peIl+izuGa0l3Ori66F35HkuTi5ipJin5kRqTJZFJMVIxyln7DhunxonJ1ddFbRQtq+5bd5jaTyaTtW3arROmiCR5TonRRi/6StPXvneb+BoNBNWpX0bmzFzV/6VT5ndysFRsW6O36Ncz9M3lmVIlSRXUzJFTL183XgRObtXjVHJUu++TXRrzc7DXWJOnAvkNq2LSuPNKnk8FgUMNmdeXu7qZd2/fZ+CoBvOqio6N17NQ5lSvxcPlDJycnlSvxlvyPnUzwmKioaLm7uVm0ubu56eCRE+afixV6Q3sOBujC5WuSpJNnL8gv4IQq/cd7CrzccuXKrixZfPT339vNbbdu3dbevQdVrmzJBI9xdXVViRJF5Pv3NnObyWTS339vV7lycceUKFFEbm5u8vV92OfkybO6ePGKuc+/Jvw4QtevBWjnjtX6X7vmFvvc3d30IDLSou3+gwcqXbqYXFysuv0YnhPz2HpkDMSNrUMqW+6/xtZb+jve2NqmcuVKSIqbvOfm5mYx/h6Orbg+5cqW1JEjJyxmbW/YsEUeHulU6J9vw/9r3971unjhgNau/VXly5d69gsH8FKx6jdJp06dtGXLFrVp00ZZsmRxuE8sk1OmTBnk4uJi8QItSSHBN5Q/f8IfGPj4eCo45Ga8/o+uR/Uod3c3Dfvmcy1dskq3b98xtzd+p61+XThVVwMPy2g0KiTkpt5t0l7h4U//5BOOIVWGdHJ2cdadG5Zfjb0dEiGvPK8l6hz1B7TSraAwnfmncB589prCroSo3mcttXzQTEXdf6BKHesr/WuZlM47va0vAS+gjP+8rt147HXqRshN5cmf8Lp+Xt6eCgl+/HXtprz+WW7J0yuj0qRNra49O2jMyEka9dU4VatZSdPnjVPzRh21Z+d+Zc/5uiSp9+ddNHzI9zoWcELvtmikX/+YqdoVm+rCuUvJcLWwJ3uNNUnq2r6fJs8eo4BzOxQdHa379x+oc9teunj+cjJcKYBXWVjEbcUajcqUwcOiPVOG9Dp/+WqCx1QoXUzzlq5SySIFle01H+32C5Dv9j2KfWS5r44tm+rOvftq1L6nnJ2cFGs0qkeHlnqnVpVkvR7YT2afuHs8BQWFWLQHBd+Qz2P3f/qXp2fGuPerQTceOyZEb7wR9+3szJm9FBkZGW8GbXBwiHwyP3yPOvSrMdq8abvu3b+vWrWqauLEkUqTJrUmTZ4tSfprwxZ1aN9SK1esk9/BAJUsUUQd2reUm5ubPD0zKjAw+NmeACSbf2sRQY/VNYKDQ5T5CXWKf8fW4+MxOPiG3ngjbtm5zD7eTxhbN8zj2Sezl4KCHxvT/5zTJ7O35H9UgYFB6trtcx04cFju7m7q0L6lNm5YooqVGjLpD3iFWFX0/vPPP7VmzRpVrFjRqgeNjIxU5GOf6JpMJornNuDi4qK58ybKYJD69LJcY33sD18pJOSm6r7dQg/uP1Db/32ghUumq3qVpvF+8QAJqdalkYo2LK9pLb5RTGS0JMkYE6v5n4zTe999pK8Oz1RsTKzO7DiiE5sO8v9pWM3JKe6LSH/9uVmzfpovSTp25KRKlimq1u3f156d++XkFDe+FsxdoiW//iFJOhpwQhWrlFXzD5tq9Dc/2iU7Xi6JGWuS1HfQp0rnkVYtm3RS6M0w1WlQQ1Nmj9V79f+nk8effHM5AHgeBnRrr6++n6pG7XvKICnba5nVuE51/bHu4TJz6zfv1BrfbRo9qKfy5Mymk2cvaPTkOfLKlFGN61SzW3bYTsuWTTVl8mjzz40at7VjGmnkyPHmfx86dFSpU6dSnz5dzEXvESPGK7OPl7ZvXyWDwaCgoBDN/2WJ+vfrJiP3Z3mhtGzRVJMnf2v+uXGTdnZM83SnTp3TqVMP72mwe/cB5c6dUz17dFb7Dq/uck7Aq8aqoneGDBmUMWPCN4xKjFGjRmnYsGEWbW6u6ZXCzfpzvixu3gxTTExMvJtHenl7PrHwHBR0Q96P3eQyof4uLi6aO3+ismXPqoYNWlvM8q5arYLq1quhHK+XMLf37T1U1atXUqsPmyW4ljgcz72wW4qNiVUaT8uZQ2m9PHQ7JPw/j63SuYGqdWmkGR+OVOAJyxm0V4+c14/1BypF2pRydnXR3dDbcWuHHz73hLPBkYT+87r2+M14Pb0yKSToZoLHhATfkJf3469rmRTyz2yR0Jthio6O1umTZy36nDl1XqXLxX0NOzgwru/pk+ce63NOr72exfoLwgvLXmMtR87X1f6jVqpVoYlOnYjrd/zoKZUpV1LtOrUwrw0OALaQwSOtnJ2c4t208mZYuDJlTJ/gMRnTe2jCN58rMipK4RG35e2ZUeNm/KLXszyczfv99Pnq2KKJ6tWoJEnKnzuHrgWFaOZvyyl6O4hVq/7S3r0HzT+7u8cteePj42Uxa9rH21P+/kcTPMeNG6Fx71d9LN+v+nh7KfCf95+BgSFyd3eXh0c6ixm53t5eCgp88mSqvXsP6ssvesvNzU1RUVF68OCBOn/UV126fi4fHy9dvx6kzp1a69at2woJSfj3Ouxj1eq/tHffI2Prn+WUfLw9LcaWt7eX/A//99h6/Bvr3t6eCgqKO0dgUPATxpanAv/pExQYotKlilmcwzzz/D++HbBv/yFVrFD6aZeKV5RRTNhzRFat6f3NN99oyJAhunfvnlUPOnDgQEVERFhs7q4ZrDrXyyY6OlqHDh5R1WoPb2ZkMBhUtVp57XvkD5RH7dt70KK/JFWvXsmi/78F7zx5cqpxw7YKCw236J8yZQpJiveJudFoNM9yg+OLjY7V1SPnlbdCYXObwWBQ3gqFdMnvyTMVq37cUDW7N9Psdt/qasCTC9kPbt/X3dDbypQzs15/K7eObdhv0/x4MUVHxyjA/5gqVilrbjMYDKpYtZz89vkneIzfPn+L/pJUqVp5c//o6Bj5HzyqPHlzWvTJlSeHrly+Lkm6fOmqAq8FKXe++H2u/rNeKRyLvcZaipQpJcX/HRprjOV3KACbc3V1VcH8ubXnYIC5zWg0avfBABUt+N/3S3F3c5OPVybFxMZq47Y9qv5IgefBg8h4r1nOTk4yGU22vQDYzZ07d3X27AXzduzYKV2/HqTq1SuZ+6RNm0ZlyhTX7j0HEjxHdHS0/PwOq8YjxxgMBlWvXkm7d8cd4+d3WFFRUapR42Gf/PnzKEeO1819ElK0aCGFhoYpKirKoj0mJkZXr16X0WjUBx800pq1G2UyMS5fJPHG1vF/xlaNx8dWMe15whiIG1sBFuPx4diKu/mpn19A3Niq/ujYyv3P2Irrs3vPARUuXEBej0yCqFmziiIibunYf3z7rmjRgiyZA7xirJrp/f333+vs2bPy8fFRzpw55erqarHfz8/vP493d3eXu7u7RdurtAzC5Emz9dO0MTroF6ADB/zVtVt7pU6VSr/8slSSNHX6WF2/FqhhX42VJP00Za7WrvtVn3bvqPXrN+nd995R8RKF1bPHF5LiCt7zfpmkosUKq/l7neTs5GSeSR4WFqHo6Gjt3XtQ4eERmjp9jEaPmqj7Dx7of/9roRw5X9f6R772CMe3beYaffB9F10JOKcrh86oUsd6ck3lrv1LtkiSPvi+i24FhWnddwslSVU/aai3e7+v33pOUuiVEKXxipslHnX3gaLuxS1T9Fb9srobekvhV28qc4Fsaji0nY7+tU+ntwUkHAIOZ+aUefp+8ggFHDqqQ34B6vhJG6VKlVKL/1l2ZNyUEQq8HmxecmT2tF+0eNUcde7WVn//tU2NmtVVkWKFNKD3w28BTZs4R5NnjdWeXQe0c9teVatZSbXqVlXzhh0e9pk0V70HdNXxIyd1NOCE3mvZWHnz5VKX//V5rteP58ceY+3s6fM6f/aiRv0wVMOHjFV4aLjeblBDlauVV/sWnz735wAvvnv37uvSlYcfvl29FqQTp87KI11aZXnCOrrAo9q+11BfjJ6kQvnz6K0CeTV/2RrdfxCpJnWqS5IGfTtB3p6Z1KvTh5Kkw8dPKfhGqN7Ik0vBN27qp3mLZTQZ1b5FE/M5q5YvpekLlimLt6fy5MymE2fOa97S1WpSt7o9LhHPyYSJMzVoYA+dOXNOFy5c1ldf9de1a0FasWK9uc/6dYu0YsWfmvLTXEnS+B9naPascTrgd1j79h1Uj+6dlTp1Sv388yJJcTcsnDNnocZ8N1ShoeG6feu2xo8frl279mvP3rhaQIMGteXj7ak9e/304EGkatWsogGfd9cP46aaHzdfvtwqXbqY9u49qAzpPdSz10cqVKiAOnTs9dyeH1hv4sRZGjigh86cOa8L5y/rq6/66dr1IK1Y+XBsrVu3UCtWrNNP/4ytH3+crlmzxsnvgL/27T+k7t07xY2teY+MrbkL9d13QxQaFq5bt25r/LhvtGvXfu39Z2xt2LBFx4+f1pw5P2rQwBHyyeytYV/119SpP5s/UOnevaMuXLisY8dOKYW7u9p3aKnq1SqqfoNW5mypU6dS3jw5zT/nzJlNRYsUVGhYuC4zgQZwCFYVvZs0aWLjGK+W5cvWKJNnRg36spd8fDwVcPi4mjVtb77R1uvZsljMJtu7x0+dOvTWl4P7aMhXfXX27EW1atFFx4+dkiS99pqPGrxTW5K0Y/cai8dqUK+Vtm/bo9CbYXq3SQcNHtpHq9b8IhdXF504flotm3+iI4/c1R2O7/Dq3UqdMZ3e7v2e0nql17XjFzW73bfmm1umz+ppMbOiXOvacnF3VZupvS3Os2H8Um0cv0ySlNY7vd75so3SeHrodnCY/JZvk+/E5c/vomB3q35fr4yZMqrPwG7y8vbUsSMn1Ob9T8w3HHzt9SwyPjKT7MBef/X4aID6DfpUn33ZUxfOXVTn1j116vgZc5/1a/7WoL5fq1uvTho2aoDOnrmgj9v10b49D7/lMmvqL3J3d9eQEZ8pffp0Onb0lD5s9pEuXrjy/C4ez5U9xlpMTIzaNe+qAUN7afavk5Q6dUpdOH9Zfbp+oU0btz3fJwAvhSMnTqtD98/NP383cbokqXG9WhrxZV97xcJLpG71igqNuKXJcxfqRli4CuTJqanffiHPf5Y3uR58QwbDw1nbkVHRmjh7oa5cD1KqlClUuWxxjRzQQ+nSpDb3GdS9oybNWajhP85QaPgteWXKoPfeqa0ubd573peH52js2ClKnTqVfpryndKnT6cdO/bpnYatLe6xlTt3DmXyfLjU6JIlK+XlmVFDh/RT5sxe8vc/qnfeaa3gR25a2LffVzIajVq8aLrc3d3114bN6t59kHl/dHS0unT5n8aO/UoGg0Fnz15Q//7DNHPWAnMfZ2cn9e71sfLnz6Po6Ght3rJTVao21sWL/B33Mhj7fdzYmjJ5dNzY2rlPDR8fW7lyyDPTI2Nr6Sp5emXSEPPYOqZ3GraxGFv9+g2T0WjUooXT5e7upg0btqh7j4djy2g0qknTdpo4cZS2bl2pu3fvaf4vS/TVsLHmPm5ubho9eoiyvpZZ9+7dV0DAcdWt11Jbtuw09ylZsqg2bljy8HrGfCVJmjdvsTp1ZgIN4AgMphfke0MeafLYOwJeEZ94lrF3BLwifrvFncEBOJazp1bYOwJeEaYHd+0dAa+I1Lnr2jsCXhGv0rfbYV9RkXxwlFQrMrd6eidYaBz4q70jPBULUQIAAAAAAAAAHIZVy5vExsZq3LhxWrx4sS5duhTvRhShoaE2CQcAAAAAAAAAyeWFWAIDNmfVTO9hw4bphx9+UPPmzRUREaE+ffqoWbNmcnJy0ldffWXjiAAAAAAAAAAAJI5VRe8FCxZoxowZ6tu3r1xcXNSyZUvNnDlTQ4YM0e7du22dEQAAAAAAAACARLGq6B0YGKi33npLkpQmTRpFRERIkt555x2tWbPGdukAAAAAAAAAAEgCq4rer7/+uq5fvy5JypMnj/766y9J0r59++Tu7m67dAAAAAAAAAAAJIFVRe+mTZvK19dXktS9e3cNHjxY+fLlU9u2bdWhQwebBgQAAAAAAAAAILFcrDno22+/Nf+7efPmyp49u3bt2qV8+fKpYcOGNgsHAAAAAAAAAMnFaO8ASBZWFb0fV758eZUvX94WpwIAAAAAAAAAwGqJLnqvXLky0Sdt1KiRVWEAAAAAAAAAAHgWiS56N2nSJFH9DAaDYmNjrc0DAAAAAAAAAIDVEl30NhpZ4QYAAAAAAAAA8GJzsncAAAAAAAAAAABsxeobWd69e1dbtmzRpUuXFBUVZbGvR48ezxwMAAAAAAAAAJKT0WCwdwQkA6uK3gcPHlT9+vV179493b17VxkzZtSNGzeUKlUqeXt7U/QGAAAAAAAAANiFVcub9O7dWw0bNlRYWJhSpkyp3bt36+LFiypZsqTGjh1r64wAAAAAAAAAACSKVUXvQ4cOqW/fvnJycpKzs7MiIyOVLVs2fffddxo0aJCtMwIAAAAAAAAAkChWFb1dXV3l5BR3qLe3ty5duiRJ8vDw0OXLl22XDgAAAAAAAACAJLBqTe/ixYtr3759ypcvn6pWraohQ4boxo0bmj9/vgoXLmzrjAAAAAAAAAAAJIpVM71HjhypLFmySJJGjBihDBkyqEuXLgoJCdH06dNtGhAAAAAAAAAAkoOJLcnby8Cqmd6lSpUy/9vb21vr1q2zWSAAAAAAAAAAAKxlVdH7X8HBwTp58qQkqUCBAvLy8rJJKAAAAAAAAAAArGHV8ia3b99WmzZtlDVrVlWtWlVVq1bVa6+9ptatWysiIsLWGQEAAAAAAAAASBSrit6dOnXSnj17tHr1aoWHhys8PFyrV6/W/v379fHHH9s6IwAAAAAAAAAAiWLV8iarV6/W+vXrValSJXNbnTp1NGPGDNWtW9dm4QAAAAAAAAAASAqrit6ZMmWSh4dHvHYPDw9lyJDhmUMBAAAAAAAAQHIz2jsAkoVVy5t8+eWX6tOnjwIDA81tgYGB6t+/vwYPHmyzcAAAAAAAAAAAJEWiZ3oXL15cBoPB/PPp06eVPXt2Zc+eXZJ06dIlubu7KyQkhHW9AQAAAAAAAAB2keiid5MmTZIxBgAAAAAAAAAAzy7RRe+hQ4cmZw4AAAAAAAAAAJ6ZVWt6AwAAAAAAAADwIkr0TO8MGTJYrOn9X0JDQ60OBAAAAAAAAADPgzFx5U68ZBJd9B4/frz53zdv3tTw4cNVp04dlS9fXpK0a9curV+/XoMHD7Z5SAAAAAAAAAAAEiPRRe927dqZ//3uu+/q66+/1qeffmpu69GjhyZNmqSNGzeqd+/etk0JAAAAAAAAAEAiWLWm9/r161W3bt147XXr1tXGjRufORQAAAAAAAAAANawquidKVMmrVixIl77ihUrlClTpmcOBQAAAAAAAACANRK9vMmjhg0bpk6dOmnz5s0qW7asJGnPnj1at26dZsyYYdOAAAAAAAAAAAAkllVF7//973968803NWHCBC1fvlyS9Oabb2r79u3mIjgAAAAAAAAAvMiMMtg7ApKBVUVvSSpbtqwWLFhgyywAAAAAAAAAADyTRK/pfevWrURvAAAAAAAAAABI0uTJk5UzZ06lSJFCZcuW1d69exN13MKFC2UwGNSkSZMkPV6iZ3qnT59eBsN/T/c3mUwyGAyKjY1NUggAAAAAAAAAgONZtGiR+vTpo6lTp6ps2bIaP3686tSpo5MnT8rb2/uJx124cEH9+vVT5cqVk/yYiS56b9q0KcknBwAAAAAAAAC8un744Qd17txZ7du3lyRNnTpVa9as0ezZszVgwIAEj4mNjdWHH36oYcOGadu2bQoPD0/SYya66F21alWLn8PDwzVr1iwdP35cklSwYEF17NhRHh4eSQoAAAAAAAAAAHg5REZGKjIy0qLN3d1d7u7u8fpGRUXpwIEDGjhwoLnNyclJtWrV0q5du574GF9//bW8vb3VsWNHbdu2LckZE72m96P279+vvHnzaty4cQoNDVVoaKjGjRunPHnyyM/Pz5pTAgAAAAAAAMBzZWJL8jZq1Ch5eHhYbKNGjUrw+b1x44ZiY2Pl4+Nj0e7j46PAwMAEj9m+fbtmzZqlGTNmJLg/MRI90/tRvXv3VsOGDTVjxgy5uMSdIiYmRp06dVKvXr20detWqwMBAAAAAAAAAF5MAwcOVJ8+fSzaEprlbY3bt2+rTZs2mjFjhjw9Pa0+j1VF7/3791sUvCXJxcVFn332mUqVKmV1GAAAAAAAAADAi+tJS5kkxNPTU87OzgoKCrJoDwoKUubMmeP1P3v2rC5cuKCGDRua24xGo6S4+vPJkyeVJ0+epz6uVcubpEuXTpcuXYrXfvnyZaVNm9aaUwIAAAAAAAAAHIibm5tKliwpX19fc5vRaJSvr6/Kly8fr3+BAgUUEBCgQ4cOmbdGjRqpevXqOnTokLJly5aox7Vqpnfz5s3VsWNHjR07VhUqVJAk7dixQ/3791fLli2tOSUAAAAAAAAAwMH06dNH7dq1U6lSpVSmTBmNHz9ed+/eVfv27SVJbdu2VdasWTVq1CilSJFChQsXtjg+ffr0khSv/b9YVfQeO3asDAaD2rZtq5iYGEmSq6urunTpom+//daaUwIAAAAAAAAAHEzz5s0VEhKiIUOGKDAwUMWKFdO6devMN7e8dOmSnJysWpDkiQwmk8lk7cH37t3T2bNnJUl58uRRqlSprA7ikebpa7EAtvCJZxl7R8Ar4rdbR+wdAQBs6uypFfaOgFeE6cFde0fAKyJ17rr2joBXhMFgsHcEvCKiIq/YO8JLZ17W1vaO8NJpe/UXe0d4Kqtmev8rVapUeuutt2yVBQAAAAAAAACAZ2LbeeMAAAAAAAAAANgRRW8AAAAAAAAAgMOg6A0AAAAAAAAAcBgUvQEAAAAAAAAADuOZbmQJAAAAAAAAAC8ro70DIFkw0xsAAAAAAAAA4DAoegMAAAAAAAAAHAZFbwAAAAAAAACAw6DoDQAAAAAAAABwGBS9AQAAAAAAAAAOw8XeAQAAAAAAAADAHkz2DoBkwUxvAAAAAAAAAIDDoOgNAAAAAAAAAHAYFL0BAAAAAAAAAA6DojcAAAAAAAAAwGFQ9AYAAAAAAAAAOAwXewcAAAAAAAAAAHswGuydAMmBmd4AAAAAAAAAAIdB0RsAAAAAAAAA4DAoegMAAAAAAAAAHAZFbwAAAAAAAACAw6DoDQAAAAAAAABwGC72DgAAAAAAAAAA9mC0dwAkC2Z6AwAAAAAAAAAcBkVvAAAAAAAAAIDDoOgNAAAAAAAAAHAYFL0BAAAAAAAAAA6DojcAAAAAAAAAwGG42DsAAAAAAAAAANiD0d4BkCyY6Q0AAAAAAAAAcBgUvQEAAAAAAAAADoOiNwAAAAAAAADAYVD0BgAAAAAAAAA4DIreAAAAAAAAAACH4WLvAAAAAAAAAABgDyaDvRMgOTDTGwAAAAAAAADgMCh6AwAAAAAAAAAcBkVvAAAAAAAAAIDDoOgNAAAAAAAAAHAYFL0BAAAAAAAAAA7Dxd4BgOft7ftGe0fAK2J2bJS9IwCATZke3LV3BLwiDClS2zsCXhEGg8HeEQAAdkaVyDEx0xsAAAAAAAAA4DAoegMAAAAAAAAAHAZFbwAAAAAAAACAw6DoDQAAAAAAAABwGBS9AQAAAAAAAAAOw8XeAQAAAAAAAADAHoz2DoBkwUxvAAAAAAAAAIDDoOgNAAAAAAAAAHAYFL0BAAAAAAAAAA6DojcAAAAAAAAAwGFQ9AYAAAAAAAAAOAwXewcAAAAAAAAAAHsw2TsAkgUzvQEAAAAAAAAADoOiNwAAAAAAAADAYVD0BgAAAAAAAAA4DIreAAAAAAAAAACHQdEbAAAAAAAAAOAwXOwdAAAAAAAAAADswWiwdwIkB2Z6AwAAAAAAAAAcBkVvAAAAAAAAAIDDoOgNAAAAAAAAAHAYFL0BAAAAAAAAAA6DojcAAAAAAAAAwGG42DsAAAAAAAAAANiD0d4BkCyY6Q0AAAAAAAAAcBgUvQEAAAAAAAAADoOiNwAAAAAAAADAYVD0BgAAAAAAAAA4DIreAAAAAAAAAACH4WLvAAAAAAAAAABgD0Z7B0CyYKY3AAAAAAAAAMBhUPQGAAAAAAAAADgMit4AAAAAAAAAAIdB0RsAAAAAAAAA4DAoegMAAAAAAAAAHIaLvQMAAAAAAAAAgD2Y7B0AyYKZ3gAAAAAAAAAAh0HRGwAAAAAAAADgMCh6AwAAAAAAAAAcBkVvAAAAAAAAAIDDoOgNAAAAAAAAAHAYLtYc5OzsrOvXr8vb29ui/ebNm/L29lZsbKxNwgEAAAAAAABAcjEa7J0AycGqmd4mkynB9sjISLm5uT1TIAAAAAAAAAAArJWkmd4TJkyQJBkMBs2cOVNp0qQx74uNjdXWrVtVoEAB2yYEAAAAAAAAACCRklT0HjdunKS4md5Tp06Vs7OzeZ+bm5ty5sypqVOn2jYhAAAAAAAAAACJlKSi9/nz5yVJ1atX1/Lly5UhQ4ZkCQUAAAAAAAAAgDWsWtN706ZNFgXv2NhYHTp0SGFhYTYLBgAAAAAAAABAUllV9O7Vq5dmzZolKa7gXaVKFZUoUULZsmXT5s2bbZkPAAAAAAAAAJKFkS3J28vAqqL3kiVLVLRoUUnSqlWrdOHCBZ04cUK9e/fWF198YdOAAAAAAAAAAAAkllVF75s3bypz5sySpLVr1+r9999X/vz51aFDBwUEBNg0IAAAAAAAAAAAiWVV0dvHx0fHjh1TbGys1q1bp9q1a0uS7t27J2dnZ5sGBAAAAAAAAAAgsVysOah9+/b64IMPlCVLFhkMBtWqVUuStGfPHhUoUMCmAQEAAAAAAAAASCyrit5fffWVChcurMuXL+v999+Xu7u7JMnZ2VkDBgywaUAAAAAAAAAAABLLqqK3JL333nuSpAcPHpjb2rVr9+yJAAAAAAAAAOA5MNk7AJKFVWt6x8bG6ptvvlHWrFmVJk0anTt3TpI0ePBgzZo1y6YBAQAAAAAAAABILKuK3iNGjNDcuXP13Xffyc3NzdxeuHBhzZw502bhAAAAAAAAAABICquK3vPmzdP06dP14YcfytnZ2dxetGhRnThxwmbhAAAAAAAAAABICquK3levXlXevHnjtRuNRkVHRz9zKAAAAAAAAAAArGFV0btgwYLatm1bvPalS5eqePHizxwKAAAAAAAAAABruFhz0JAhQ9SuXTtdvXpVRqNRy5cv18mTJzVv3jytXr3a1hkBAAAAAAAAwOaMMtk7ApKBVTO9GzdurFWrVmnjxo1KnTq1hgwZouPHj2vVqlWqXbu2rTMCAAAAAAAAAJAoVs30lqTKlStrw4YNtswCAAAAAAAAAMAzsarobTKZdODAAV24cEEGg0G5c+dWsWLFZDAYbJ0PAAAAAAAAAIBES3LRe9OmTerYsaMuXrwokyluzRuDwaBcuXJp9uzZqlKlis1DAgAAAAAAAACQGEla0/vMmTN65513lDNnTi1fvlzHjx/XsWPHtGTJEr3++uuqX7++zp07l1xZAQAAAAAAAAD4T0ma6T1+/HiVK1dOvr6+Fu0FChRQ06ZNVatWLY0bN04TJ060aUgAAAAAAAAAsDWjvQMgWSRppvfmzZvVq1evBPcZDAb16tVLmzZtskUuAAAAAAAAAACSLElF70uXLumtt9564v7ChQvr4sWLzxwKAAAAAAAAAABrJKnofefOHaVKleqJ+1OlSqV79+49cygAAAAAAAAAAKyRpDW9JenYsWMKDAxMcN+NGzeeORAAAAAAAAAAANZKctG7Zs2aMplM8doNBoNMJpMMBoNNggEAAAAAAAAAkFRJKnqfP38+uXIAAAAAAAAAwHMVf2ovHEGSit45cuRIrhwAAAAAAAAAADyzJN3I8lHbtm1T69atVb58eV29elWSNH/+fG3fvt1m4QAAAAAAAAAASAqrit7Lli1TnTp1lDJlSh08eFCRkZGSpIiICI0cOdKmAQEAAAAAAAAASCyrit7Dhw/X1KlTNWPGDLm6uprbK1asKD8/P5uFAwAAAAAAAAAgKawqep88eVJVqlSJ1+7h4aHw8PBnzQQAAAAAAAAAgFWSdCPLf2XOnFlnzpxRzpw5Ldq3b9+u3Llz2yIXAAAAAAAAACQro70DIFlYNdO7c+fO6tmzp/bs2SODwaBr165pwYIF6tevn7p06WLrjAAAAAAAAAAAJIpVM70HDBggo9GomjVr6t69e6pSpYrc3d3Vr18/de/e3dYZAQAAAAAAAABIFKuK3gaDQV988YX69++vM2fO6M6dOypYsKDSpElj63wAAAAAAAAAACSaVUXviIgIxcbGKmPGjCpYsKC5PTQ0VC4uLkqXLp3NAgIAAAAAAAAAkFhWrendokULLVy4MF774sWL1aJFi2cOBQAAAAAAAACANawqeu/Zs0fVq1eP116tWjXt2bPnmUMBAAAAAAAAQHIzGtiSur0MrCp6R0ZGKiYmJl57dHS07t+//8yhAAAAAAAAAACwhlVF7zJlymj69Onx2qdOnaqSJUs+cygAAAAAAAAAAKxh1Y0shw8frlq1asnf3181a9aUJPn6+mrfvn3666+/bBoQAAAAAAAAAIDEsmqmd8WKFbVr1y5ly5ZNixcv1qpVq5Q3b14dPnxYlStXtnVGAAAAAAAAAAASxaqZ3pJUrFgxLViwwJZZAAAAAAAAAAB4JlbN9JYko9GoU6dOafv27dq6davFhqfr9FFrHT66RUE3jsl30zKVKFnkP/s3aVpP+/z+UtCNY9q5Z61qv13NvM/FxUXDvv5MO/es1bWgAJ04vVNTp49V5sze8c7zdp1q8t20TIEhR3Xxsp8W/DbV1peGl8Dr7d9WhX0TVe3ifJX6c7jSFc+TqON8mlRQzaBFKjK3X7x9qfJlVZF5/VX19BxVO/+zSq8bKfesmWwdHS+wDp1a6cBhX10OOqx1votVvMRb/9m/UZO62rnvT10OOqwtO1eqVu0qT+w7ZtwwhUSc1Mdd2pnbsmXPqvGTRmj/YV9dCvTX3kMb9NnA7nJ1dbXZNeHFxFiDPf32x5+q06qLStZtqVbdBijgxOkn9o2OidFP85aoXutuKlm3pd7t3Ffb9x606BMbG6uJc35T3Q+7qlS9VqrXupumzl8ik8mU3JcCB7D/UIC6fTZU1Rt9qMIV68l36057R4KdffJJO506uUu3Is5o+7ZVKlWq2H/2f7dZAwUc3qxbEWfkd2Cj6tatEa/P0CH9dPHCAUWEn9Gff/6mvHlzWezPkCG9fp47UTdCjis46KimTR2r1KlTmffnyPG6oiKvxNvKlCmRYKYP3m+kqMgrWrpkZtKfADxXTxsbCXnaGHV3d9ePPw7X9WsBCr15UosWTpe3t6dFn2zZXtMff/ys8LDTunL5kEaN+lLOzs7m/VWqlE9wzPn4eJn7fPRRGx3Yv0E3Qo7rRshxbd2yQnXqVH+2JwQvLaNMbEncXgZWFb13796tvHnz6s0331SVKlVUrVo181a9Oi8ST9Ps3QYaOWqQRo+aoCqVGunIkRP6/Y+58vRKuEBYpmwJzZozXvN/XqLKFRtqzeoN+nXhT3qzYH5JUqpUKVS0WCGNGT1JVSo1UutWXZUvXy4tXGx5s9FGjeto+ozvteCXpapYvoHerv2Bli5ZmezXixeLd+Pyyjesrc5/v0z7ag/QnaMXVWzhILl6pvvP41Jk81Leoa0Vtut4vH0pc/io1Mphunf6mg40HaY91T7T+XHLZIyMTq7LwAumSbN6+nrkQI0dPVk1qzTV0SMntPj3WfL0zJhg/9JlimvarO+1YP5S1ajcRH+u8dXPv05WgTfzxetb/51aKlWqqK5fC7Joz5cvt5wMBvXrNUSVyzXQ4IGj1K5DC30xtHeyXCNeDIw12NO6TTs0ZurP+qTt+1o89Tvlz5NTH38+XDfDIhLsP3H2b1q6eoMGdu+oP2aP1wcN31avoWN0/PQ5c5/ZC//Q4pV/aVD3jloxZ7x6d26tOYtW6Nff1z6vy8JL7P79B3ojb2590bervaPgBfD+ew015rshGj5inMqWrafDAce0ZvUv8nrC+8xy5Upq/vzJmjN3ocqUrauVK9dp6ZKZKlTwDXOffn27qlu39vq0+0BVqtRQ9+7e0+rVv8jd3d3c5+efJ6pgwfyqV7+VmjT9nypVLqufpnwX7/Hq1G2ubNmLmzc/v8Px+uTI8bq+/Xawtm3bbYNnBMkpMWPjcYkZo2PHDlWD+rXVstXHqlnrPWXJ4qPFi2aY9zs5OWnFH/Pk5uaqqlUbq2On3mrb5n19NTT+xKxChStbjLng4BvmfVevXtcXX45SufL1Vb5CfW3evEPLls5SwTfz2+gZAmBvBpMV00iKFSum/Pnza9iwYcqSJYsMBoPFfg8PjyQH8UiTuJmmjsB30zL5+R1W/77DJEkGg0HHTm7X9KnzNO6HafH6z/l5glKlSqnm73c2t238e6kCAo6rd8/BCT5GiRJvadPWP1SoQCVduXJdzs7OCji2RaNG/Kj585Ykz4W9JJanLmXvCHZV6s/hunXwrE4NmhPXYDCo4sEpujJrnS5OXJHwQU4GlVwxTNd+26T0ZQvI1SO1Dv9vrHl34Wk9ZYyO0bFPJz+HK3h5tHhwyN4Rnpt1vot1yC9AA/p/Iynudc3/2BbNnD5fE8bNiNd/xpxxSpUqpT5s/om57c+Ni3Qk4IT69x5qbsucxVvrfZfog2Yd9eviaZr+0zxN++nnJ+bo1qOj/texpUoXrWXDq8OLhLFmX1ePLrV3BLtq1W2ACr2RV1/06CQp7puPtVt8opZN66lTy6bx+tf4oLM6t2qmlk3qmdt6fzVG7m5u+nZQT0lSt0EjlSlDen3dv+sT+7yKDClS2zvCS6dwxXr6cdRg1axSwd5RXiqpsz752z8vm+3bVmn/AX/16vWlpLjfkefO7tOUKXM0Zmz8v9MX/DJFqVKnUtOm/zO3bdu6Uv6Hj+rTTwdKki5eOKDxP07XuHFx71PTpUurK5cPqlOnPlq8ZKUKFMirw/6bVa58fXMR++23q2nlinnKlbu0rl8PUo4cr+v0qd0qXfpt+R8+9sT8Tk5O+tt3meb+vEiVKpZR+vTp9N77nWz19MDGnjY2EvK0MZouXVpdu+qvtm27a/nvayRJb7yRRwGHt6hS5Ubau9dPdepU1x+/z1WOnCXNRezOnVtr5IhBei1rUUVHR6tKlfLauGGJvLwLKiLiVqKvKfD6EQ0YOFxz5y58lqfG7qIir9g7wkvny5yt7B3hpTP8wq/2jvBUVs30Pn36tEaOHKk333xT6dOnl4eHh8WGJ3N1dVWx4oW1edPDrx6aTCZt3rRTpcsUT/CY0mWKa/OmHRZtvr7bnthfivuFYzQaFRFxW5JUtFghZc2aRUajUdt2rNTJM7u0dPls82xxvBoMrs5KWyS3QrcFPGw0mRS2NUAepeLPevxXrr7vKepGhK7/uimBkxqUqVZx3Tt7XcUWDlLlo9NV6s/h8qz3an+48CpxdXVV0WKFtGWz5eva1s07Vap0wq9TpUoX09bNuyzaNvluV6nSxcw/GwwGTZk+RpMnzNLJE2cSlSVdurQKf8KMS7z8GGuwp+joaB07dU7lSjxcks7JyUnlSrwl/2MnEzwmKipa7m5uFm3ubm46eOSE+edihd7QnoMBunD5miTp5NkL8gs4oUr/8XceADzO1dVVJUq8pb//3mZuM5lM+vvvbSpXLuFlRMqWLWnRX5I2bNiicmVLSpJy5cquLFl89Lfvwz63bt3W3r2HVLZcSfM5wsLCLWZt+/puk9FoVJnHfjcvWzZHVy4f0qa/l+udd2rHy/PlF70VEnLzpS84vgoSMzYel5gxWqLEW3Jzc5PvI31OnjyrixevmPuUK1tSR46csJi1vWHDFnl4pFOhx+ob+/au18ULB7R27a8qX/7J70+dnJz0wfuNlDp1Su3ZfSAJzwSAF5lVRe+yZcvqzJnEvSmEpUyZMsjFxcXiBVqSQoJvWKwv9SgfH08Fh9xMdH93dzcN++ZzLV2ySrdv35EU90tJkgYM6qkx301W8/c6Kzw8Qmv+XKAMGfig4lXhmjGdnFycFRViWaiJComQm3f6BI/xKPOGXmtVXSf6Tk9wv5tnOrmkSamcPRrr5qZDOvjBCIWs3acis/sqffk3bX0JeAFl/Od1LSTY8nUqOOSmvH08EzzG28cz/uvgY/179O6smJgYTZ86L1E5cuXOrk4ftdbPc3ij5KgYa7CnsIjbijUalemxv5syZUivm6HhCR5ToXQxzVu6ShevXJfRaNTO/f7y3b5HIaFh5j4dWzZV3eoV1ah9TxV/u7ne/7i/2rzbQO/UcpzZpwCSn6dnRrm4uCgoKMSiPTj4hnx84t/rSZIyZ/ZScJDl78ig4BDz+8x//xv02O/R4OAQZf5nX2YfL4U89l41NjZWoaHh8skc1+fOnbvq/9kwtWz1iRo3aaedO/dp6ZJZFoXvChVK63//a6FPuvRP6qXDDhIzNh6XmDGa2cdbkZGR8WZnBwffUOZ/+vhk9lJQsOU5/j2nzz/3NQsMDFLXbp+reYuP1LzFR7py+Zo2bliiYsUKWxxXuFABhd48qTu3z2nSpFF6/4POOv4f9+oA8HJxseag7t27q2/fvgoMDNRbb70V70ZORYr8900ZIyMjFRkZadFmMpniLZOCpHNxcdHceRNlMEh9eg0xt//73H4/ZopWrlgvSer6yec6fmq7mjStrzmzf7NLXrzYnFOnUKHJn+pE3+mKDr2dcCenuM/OQtbt1+VpceuP3jl6UR6l8ytru9oKT2ANcOBpihQrpI8+aasaVZolqn/mLN5atGymVq5Yp19+frWXcELSMNaQnAZ0a6+vvp+qRu17yiAp22uZ1bhOdf2x7uE3p9Zv3qk1vts0elBP5cmZTSfPXtDoyXPklSmjGtepZrfsAGArN2+G6ccfHy5BduCAv7Jk8VGf3p9o9eoNSpMmtebM+VFdun6mmzfD/uNMsJeWLZpq8uRvzT83btLuP3rb36lT53Tq1MP7Z+zefUC5c+dUzx6d1b7Dw6XDTp46q9Jl6ihdurR6t1kDzZo5TrVqvUfhG3AQVhW93333XUlShw4dzG0Gg8FcuI6Njf3P40eNGqVhw4ZZtLm5plcKt4RvQuVIbt4MU0xMTLy7D3t5e8b7xPNfQUE35P3YzUcS6u/i4qK58ycqW/asatigtXmWd9w54vqeeOTFOyoqShfOX9br2V57pmvCyyM69JaMMbFy87Kcpebm5aGo4PB4/VPm9FHK7N4qMv8zc5vBKe4DlOpXf9XuCr314NoNGaNjdPfUVYtj7566qvRlC9j+IvDCCf3ndc3L2/J1ytsrU7zZQ/8KDroR/3Xwkf7ly5eSp1cmHTr6sDDk4uKiYSM+10dd2qpkkZrmdp/M3vpj9Tzt3XNQfXokfJ8DOAbGGuwpg0daOTs5xbtp5c2wcGXKmD7BYzKm99CEbz5XZFSUwiNuy9szo8bN+EWvZ3k46/L76fPVsUUT1atRSZKUP3cOXQsK0czfllP0BpBoN26EKiYmJt63gb29PRUUFJzgMYGBIfG+KeXj7WV+72iePevtqcDAh+fw9vaS/+GjcecICol3o0xnZ2dlzJheQYEJv7+VpL37DqpmzcqSpDy5cyhXzuz6ffkc836nfybW3Lt7QYXfqqpz5y4++eKR7Fat/kt79x00//zv0l3/NTYel5gxGhgULHd3d3l4pLOY7e3t7anAf/oEBYaodKliFucwzzwPTHisS9K+/YdUsUJpi7bo6GidPXtBknTwYIBKliqqT7t3VLduA554HjimJN/sEC8Fq5Y3OX/+fLzt3Llz5v8+zcCBAxUREWGxubtmsCbKSyc6OlqHDh5R1WoPbzBjMBhUtVp57dt7MMFj9u09aNFfkqpXr2TR/9+Cd548OdW4YVuFPfY120MHj+jBg0jly5fb4pjsOV7X5UuWxUo4LlN0rG4fPqeMld962GgwKEPlworYH//T7Htnrml31X7aW/Nz83Zj/QGF7TiqvTU/14NrN2SKjtWtQ2eVKk8Wi2NT5cmiB1ee/IcuHEd0dLT8Dx1VlarlzW0Gg0GVq5bX/n0Jv67t33fo/+zdd3gU1RrH8d+GQEICCSUQihQBG9J7kyJdpEoRQQFRQbqhK9IEEUQpgjTpFpr0SxFD7y0klARIBGkhgHQQErJz/4gsLEkgWTYs2Xw/95nnsmfOzL6zeZ3dfffMGb1RpZxVW5VqFbR3zwFJ0oJ5y1SlQgNVq9TIsoSfi9DE8dPVvMmDGxply55Vy/43R4EHDqtbp/6y4d7MSEbINThS6tSpVfDlfNoV8OC+GGazWTsDDqpowVceu61bmjTyzZJZ96Kj9eeWXar20JfuO3fuWoo796VycZFhJscAJFxUVJT27z+oatUqWdpMJpOqVauknTv3x7nNrl379OZD/SWpevU3tHNXzJzGJ06cUnh4hKq9+aBP+vTpVKZMMcu8x7t27VPGjBlUvPiD7xfVqlWUi4uLVZH0UUWLvG4ploYcDVPx4tVVunRty7Jy5R/auGm7SpeurdP/3fMAjnPz5i2FhZ20LEeCjz0xNx6VkBzdv/+gIiMjrfLy5ZfzKU+eFyx9du7ap0KFXrX6saV69cq6du26jgTHP0K7aNGCVgX6uLiYXGLdiwNA8mXTSO88efI81ZO6ubnJzc3Nqi0lTW0yccIMTZryrQL2H9S+fYHq1LmdPD089PPPiyRJk6eOVvi58xoyeLQkadKPs7Rqza/q0rW91q7doHeavq3iJQqpe7cvJMUUr+f8PEFFixVSi6YfKZWLi2VU25Ur1xQVFaUbN25qxvRf1f+L7jp7JlynTp9V9+4fS5KWLlnlgFcBjnJq8v9UcHwnXT8QpusBYcr9yVtK5eGm8HkbJUkFf+isu+cvK2z4bzLfjdKtkNNW20dduyVJVu2nJq5Qoak9dHVnsK5sPazMbxaTT62S2t/Y+ooOOK/JE2fqh0kjdSDgkPbvC1KHTm3k4ZlWv/28WJI0YfJInQ+P0LAh30uSpk6ao2Wr5urTLu20bu0mNX7nLRUrXkg9u8dMy3TlylVduXLV6jmioqJ0IeKSwkJPSLpfhJyr06fPadCAkfLxeXC10KNzOMN5kGtwpA+a1tcXIyfo9Zfzq/CrBTT39//p3zt31ah2NUnS59+MV1afzOrxUStJUlDwMV24dFmv5H9RFy79o0lzFshsmNXu3UaWfVYpX0pTf/ld2bP6KH/eXAoJPaE5i1aqUZ1qjjhEJDO3b/+rU2ceFATPnotQyLEweXulV/Zscc/jDOc1btxUTZ8+Rvv3BWrP3gPq2vUjeXqm1ew58yVJM6aP1blz5zXgy5hpKn6YMF3+fy5Sjx6faPVqfzVv1lAlSxZRp059Lfv84Yfp6t+vm0JDT+jkidMaPLiXzoVHaNnymCkzQ0JCtWbtBk2eNEqdu/RX6tSuGjd2mBYsWK7w8AhJ0vutmyoyMkoHAg9Jkho1rKu2bVuoQ8eY+bvv3r2rw4/cEPjq1ZhRvo+24/nxpNyQpDVr5mnZsjWaNGmWpCfn6PXrNzRz1jyNGjVQl69c1fXrNzR2zFfasWOvdu+OKXqvW7dJwcHHNXPmOH3ef7h8s2XVkMG9NXnybEVGRkqSunZtr5MnT+vIkWNyd3NTuw9bqlrVinqr3nuW2IZ91U9r1m7Q6dNnlT5dOr37biNVqVJe9d5u9YxeQQBJzaai931HjhzRqVOnLCeW+xo0aPBUQTm7xb//T5l9MunzAT3k6+ujg0HBatK4neXGXC/kyi6z2Wzpv3vXfn304Wca8KWfBg7uqbCwv/Xeu58q+MgxSVKOHL6q999NQLbt/J/Vc9Wr+562btklSfryi28UfS9aU376Tu7ubtq3N1D167W2fKBAynBh2Q6lyeylfH2ayy1rBt04fFIHWo6w3NzSPWdmGQ/lX0JcXL1HIX2mKW+3Rnp5WDvdDjung+2/17XdfEhNKZYuXq3MmTOp7+fdlNU3iw4dDFaLJh9Zbmz0wgvZrfJqz+4Adfyol/oP6KEvBvrpr7CTavNeZ4U8ZnTGo6pWq6h8+fMqX/68OhiyxWpdFu/Hj7pE8kWuwZHqVKuoy9eua+Ksebp05apezZ9Xk7/5Qj7/TW8SfuGSTKYHo7bvRkbphxnzdCY8Qh5p3fVG2eL6ul83eaXztPT5vGt7TZg5T8PGTdPlq9eVJXNGNX27pj59v+mzPjwkQ4dCjuvDrg8KlKN+iLnxeMO6NTR8QE9HhQUHWbhohXyyZNbAgb2ULVsWBQYe0dv137f8QJsrV06r75k7d+7TBx900ZAhffTV0L4KDT2hps0+sio0j/7uR3l6eujHiSOVIYOXtm3fo/r1W1vdo6tNm64aN3aY1q6ZJ7PZrCVLVukzvwf3l5Kkzz/vrty5X9C9e/d09GiYWrXqpMVLrL+7InlJSG7kezGPfDI/GCzwpByVpF69hshsNmv+vKlyc0ujdes2qWu3zy3rzWazGjVuox9+GKHNm5fr1q3bmvvzQg0eMtrSJ02aNBo5cqBy5sim27f/1cGDwapTt6U2bdpu6ZMli49mTB+r7Nmz6tq1Gzp4KFj13m4lf3/rz3oAki+TYcP1uX/99ZcaN26sgwcPWubylh6M1n7SnN5x8U6XP9HbALZY7FnK0SEghXj3zgFHhwAAdnX28CJHh4AUwuTu+eROgB145qzs6BAAwK4i755xdAjJzhd533tyJ1gZfvJXR4fwRDbN6d29e3e9+OKLunDhgjw8PHT48GFt3rxZpUqV0saNG+0cIgAAAAAAAAAACWPT9CY7duzQ+vXr5ePjIxcXF7m4uKhSpUoaMWKEunXrpoCA+G9YAQAAAAAAAADPg8RN8IrkwqaR3tHR0UqfPr0kycfHR+fOxdw8JU+ePDp6lDl8AQAAAAAAAACOYdNI70KFCikwMFAvvviiypYtq1GjRilNmjSaOnWq8uXLZ+8YAQAAAAAAAABIEJuK3gMGDNCtW7ckSUOHDtXbb7+tN954Q5kzZ9b8+fPtGiAAAAAAAAAAAAllU9G7du3aln8XKFBAISEhunz5sjJmzCiTyWS34AAAAAAAAAAASAybit5xyZQpk712BQAAAAAAAACATRJc9G7SpEmCd7p48WKbggEAAAAAAACAZ8Usw9EhIAkkuOjt7e2dlHEAAAAAAAAAAPDUElz0njlzZlLGAQAAAAAAAADAU3NxdAAAAAAAAAAAANiLzTeyXLRokRYsWKBTp04pMjLSat3+/fufOjAAAAAAAAAAABLLppHe48ePV7t27eTr66uAgACVKVNGmTNn1l9//aW6devaO0YAAAAAAAAAABLEpqL3jz/+qKlTp+qHH35QmjRp1KdPH61bt07dunXTtWvX7B0jAAAAAAAAANidwZLoJTmwqeh96tQpVahQQZKUNm1a3bhxQ5L0/vvv67fffrNfdAAAAAAAAAAAJIJNRe9s2bLp8uXLkqTcuXNr586dkqQTJ07IMJJLvR8AAAAAAAAA4GxsKnq/+eabWr58uSSpXbt2+uyzz1SzZk21aNFCjRs3tmuAAAAAAAAAAAAklKstG02dOlVms1mS1LlzZ2XOnFnbt29XgwYN1KFDB7sGCAAAAAAAAABAQtlU9HZxcZGLy4NB4u+++67effdduwUFAAAAAAAAAIAtbCp6S9KVK1c0ffp0BQcHS5IKFiyodu3aKVOmTHYLDgAAAAAAAACSitnRASBJ2DSn9+bNm/Xiiy9q/PjxunLliq5cuaLx48frxRdf1ObNm+0dIwAAAAAAAAAACWLTSO/OnTurefPmmjRpklKlSiVJio6OVqdOndS5c2cdPHjQrkECAAAAAAAAAJAQNo30Dg0NVc+ePS0Fb0lKlSqV/Pz8FBoaarfgAAAAAAAAAABIDJuK3iVKlLDM5f2w4OBgFS1a9KmDAgAAAAAAAADAFgme3iQoKMjy727duql79+4KDQ1VuXLlJEk7d+7UxIkT9c0339g/SgAAAAAAAAAAEiDBRe9ixYrJZDLJMAxLW58+fWL1e++999SiRQv7RAcAAAAAAAAAScQs48mdkOwkuOh94sSJpIwDAAAAAAAAAICnluCid548eZIyDgAAAAAAAAAAnlqCi94Py507t6pWraoqVaqoatWqyp8/v73jAgAAAAAAAAAg0Vxs2ejrr7+Wu7u7Ro4cqZdeekm5cuVS69atNW3aNB0/ftzeMQIAAAAAAAAAkCA2jfRu3bq1WrduLUkKDw/Xpk2btHLlSnXq1Elms1nR0dF2DRIAAAAAAAAAgISwqegtSbdv39bWrVu1ceNGbdiwQQEBASpUqJCqVq1qx/AAAAAAAAAAIGkYjg4AScKmoneFChUUEBCg1157TVWrVlW/fv1UuXJlZcyY0d7xAQAAAAAAAACQYDbN6R0SEiJPT0+9+uqrevXVV/Xaa69R8AYAAAAAAAAAOJxNRe9//vlH69evV7ly5bR27VpVrFhROXPm1Hvvvadp06bZO0YAAAAAAAAAABLEpqK3yWRSkSJF1K1bNy1atEirV69WzZo1tXDhQnXs2NHeMQIAAAAAAAAAkCA2zem9f/9+bdy4URs3btTWrVt148YNFS5cWF27dlWVKlXsHSMAAAAAAAAAAAliU9G7TJkyKl68uKpUqaKPP/5YlStXlre3t71jAwAAAAAAAIAkY3Z0AEgSNhW9L1++LC8vL3vHAgAAAAAAAADAU7FpTm8vLy9dvXpVP/30k/r376/Lly9Lipn25OzZs3YNEAAAAAAAAACAhLJppHdQUJCqV6+uDBky6OTJk/r444+VKVMmLV68WKdOndKcOXPsHScAAAAAAAAAAE9k00hvPz8/tWvXTsePH5e7u7ul/a233tLmzZvtFhwAAAAAAAAAAIlhU9F7z5496tChQ6z2nDlz6vz5808dFAAAAAAAAAAAtrBpehM3Nzddv349VvuxY8eUJUuWpw4KAAAAAAAAAJKaIcPRISAJ2DTSu0GDBho6dKiioqIkSSaTSadOnVLfvn31zjvv2DVAAAAAAAAAAAASyqai93fffaebN28qa9as+vfff1WlShUVKFBA6dKl0/Dhw+0dIwAAAAAAAAAACWLT9Cbe3t5at26dtm3bpsDAQN28eVMlSpRQjRo17B0fAAAAAAAAAAAJZlPRW5L8/f3l7++vCxcuyGw2KyQkRL/++qskacaMGXYLEAAAAAAAAACAhLKp6D1kyBANHTpUpUqVUvbs2WUymewdFwAAAAAAAAAAiWZT0Xvy5MmaNWuW3n//fXvHAwAAAAAAAADPhNnRASBJ2HQjy8jISFWoUMHesQAAAAAAAAAA8FRsKnp/9NFHlvm7AQAAAAAAAAB4Xtg0vcmdO3c0depU/fnnnypSpIhSp05ttf7777+3S3AAAAAAAAAAACSGTUXvoKAgFStWTJJ06NAhq3Xc1BIAAAAAAAAA4Cg2Fb03bNhg7zgAAAAAAAAAAHhqNhW9AQAAAAAAACC5M8twdAhIAjbdyBIAAAAAAAAAgOcRRW8AAAAAAAAAgNOg6A0AAAAAAAAAcBoUvQEAAAAAAAAAToOiNwAAAAAAAADAabg6OgAAAAAAAAAAcATD0QEgSTDSGwAAAAAAAADgNCh6AwAAAAAAAACcBkVvAAAAAAAAAIDToOgNAAAAAAAAAHAaFL0BAAAAAAAAAE7D1dEBAAAAAAAAAIAjmGU4OgQkAUZ6AwAAAAAAAACcBkVvAAAAAAAAAIDToOgNAAAAAAAAAHAaFL0BAAAAAAAAAE6DojcAAAAAAAAAwGm4OjoAAAAAAAAAAHAEs6MDQJJgpDcAAAAAAAAAwGlQ9AYAAAAAAAAAOA2K3gAAAAAAAAAAp0HRGwAAAAAAAADgNCh6AwAAAAAAAACchqujAwAAAAAAAAAARzBkODoEJAFGegMAAAAAAAAAnAZFbwAAAAAAAACA06DoDQAAAAAAAABwGhS9AQAAAAAAAABOg6I3AAAAAAAAAMBpuDo6AAAAAAAAAABwBLOjA0CSYKQ3AAAAAAAAAMBpUPQGAAAAAAAAADgNit4AAAAAAAAAAKdB0RsAAAAAAAAA4DQoegMAAAAAAAAAnIarowO4z0UmR4eAFOLj6GOODgEpxM3IO44OASlEVPQ9R4eAFMIzXx1Hh4AUwmTiuwGejVtnNzs6BKQQOfLXdXQIAOJhyHB0CEgCjPQGAAAAAAAAADgNit4AAAAAAAAAAKdB0RsAAAAAAAAA4DQoegMAAAAAAAAAnAZFbwAAAAAAAACA03B1dAAAAAAAAAAA4AhmRweAJMFIbwAAAAAAAACA06DoDQAAAAAAAABwGhS9AQAAAAAAAABOg6I3AAAAAAAAAMBpUPQGAAAAAAAAADgNV0cHAAAAAAAAAACOYDYMR4eAJMBIbwAAAAAAAACA06DoDQAAAAAAAABwGhS9AQAAAAAAAABOg6I3AAAAAAAAAMBpUPQGAAAAAAAAADgNV0cHAAAAAAAAAACOYDg6ACQJRnoDAAAAAAAAAJwGRW8AAAAAAAAAgNOg6A0AAAAAAAAAcBoUvQEAAAAAAAAAToOiNwAAAAAAAADAabg6OgAAAAAAAAAAcASzDEeHgCTASG8AAAAAAAAAgNOg6A0AAAAAAAAAcBoUvQEAAAAAAAAAToOiNwAAAAAAAADAaVD0BgAAAAAAAAA4DVdHBwAAAAAAAAAAjmDIcHQISAKM9AYAAAAAAAAAOA2K3gAAAAAAAAAAp0HRGwAAAAAAAADgNCh6AwAAAAAAAACcBkVvAAAAAAAAAIDTcHV0AAAAAAAAAADgCGZHB4AkwUhvAAAAAAAAAIDToOgNAAAAAAAAAHAaFL0BAAAAAAAAAE6DojcAAAAAAAAAwGlQ9AYAAAAAAAAAOA1XRwcAAAAAAAAAAI5gluHoEJAEGOkNAAAAAAAAAHAaFL0BAAAAAAAAAE6DojcAAAAAAAAAwGlQ9AYAAAAAAAAAOA2K3gAAAAAAAAAAp+Hq6AAAAAAAAAAAwBEMGY4OAUmAkd4AAAAAAAAAAKdB0RsAAAAAAAAA4DQoegMAAAAAAAAAnAZFbwAAAAAAAACA06DoDQAAAAAAAABwGq6ODgAAAAAAAAAAHMHs6ACQJBjpDQAAAAAAAABwGhS9AQAAAAAAAABOg6I3AAAAAAAAAMBpUPQGAAAAAAAAADgNit4AAAAAAAAAAKdB0RsAAAAAAABAimQYBksiF1tMnDhRefPmlbu7u8qWLavdu3fH23fatGl64403lDFjRmXMmFE1atR4bP+4UPQGAAAAAAAAACSJ+fPny8/PT4MGDdL+/ftVtGhR1a5dWxcuXIiz/8aNG9WyZUtt2LBBO3bsUK5cuVSrVi2dPXs2wc9pMmwtz9tZxnQFHB0CUoiM7ukdHQJSiPBblx0dAlKIqOh7jg4BKYTJ0QEgxTCZyDY8G7fObnZ0CEghcuSv6+gQkEJcvHbU0SEkO41z13d0CMnOklMrEtW/bNmyKl26tCZMmCBJMpvNypUrl7p27ap+/fo9cfvo6GhlzJhREyZM0AcffJCg52SkNwAAAAAAAADA7iIjI7Vv3z7VqFHD0ubi4qIaNWpox44dCdrH7du3FRUVpUyZMiX4eV0THSkAAAAAAAAAIEW6e/eu7t69a9Xm5uYmNze3WH0vXbqk6Oho+fr6WrX7+voqJCQkQc/Xt29f5ciRw6pw/iSM9AYAAAAAAAAAJMiIESPk7e1ttYwYMSJJnuubb77RvHnztGTJErm7uyd4O0Z6AwAAAAAAAEiRzHoubneYrPTv319+fn5WbXGN8pYkHx8fpUqVShEREVbtERERypYt22OfZ/To0frmm2/0559/qkiRIomKkZHeAAAAAAAAAIAEcXNzk5eXl9USX9E7TZo0KlmypPz9/S1tZrNZ/v7+Kl++fLzPMWrUKH311Vdas2aNSpUqlegYGekNAAAAAAAAAEgSfn5+atOmjUqVKqUyZcpo7NixunXrltq1aydJ+uCDD5QzZ07LFCkjR47UwIED9euvvypv3rw6f/68JCldunRKly5dgp6TojcAAAAAAAAAIEm0aNFCFy9e1MCBA3X+/HkVK1ZMa9assdzc8tSpU3JxeTAhyaRJkxQZGammTZta7WfQoEEaPHhwgp7TZBjGczFxTcZ0BRwdAlKIjO7pHR0CUojwW5cdHQJSiKjoe44OASmEydEBIMUwmcg2PBu3zm52dAhIIXLkr+voEJBCXLx21NEhJDsNc7/t6BCSnWWnVjo6hCdiTm8AAAAAAAAAgNNgehMAAAAAAAAAKZLZ0QEgSTDSGwAAAAAAAADgNCh6AwAAAAAAAACcBkVvAAAAAAAAAIDTSPCc3k2aNEnwThcvXmxTMAAAAAAAAAAAPI0Ej/T29va2LF5eXvL399fevXst6/ft2yd/f395e3snSaAAAAAAAAAAADxJgkd6z5w50/Lvvn37qnnz5po8ebJSpUolSYqOjlanTp3k5eVl/ygBAAAAAAAAwM4MGY4OAUnApjm9Z8yYoV69elkK3pKUKlUq+fn5acaMGXYLDgAAAAAAAACAxLCp6H3v3j2FhITEag8JCZHZbH7qoAAAAAAAAAAAsEWCpzd5WLt27dS+fXuFhYWpTJkykqRdu3bpm2++Ubt27ewaIAAAAAAAAAAACWVT0Xv06NHKli2bvvvuO4WHh0uSsmfPrt69e6tnz552DRAAAAAAAAAAgISyqejt4uKiPn36qE+fPrp+/bokcQNLAAAAAAAAAIDD2VT0fhjFbgAAAAAAAADJkVmGo0NAErCp6P3iiy/KZDLFu/6vv/6yOSAAAAAAAAAAAGxlU9G7R48eVo+joqIUEBCgNWvWqHfv3vaICwAAAAAAAACARLOp6N29e/c42ydOnKi9e/c+VUAAAAAAAAAAANjKxZ47q1u3rn7//Xd77hIAAAAAAAAAgASza9F70aJFypQpkz13CQAAAAAAAABAgtk0vUnx4sWtbmRpGIbOnz+vixcv6scff7RbcAAAAAAAAAAAJIZNI70bNWqkhg0bWpYmTZpo0KBBOnTokD755BN7x+iUPvqktQIPb1T4pcNat2GRSpQs8tj+DRvX1a79axV+6bC27fqfataqYrW+7+fdtGv/Wp2JCNKJ0/u0ZMVslSxV1LI+V+6cGj9xhA4c2qBzFw9pf9B69fuiu1KnTp0kx4fnx/sfNtfm/f9T8JmdWrx2jooUf/2x/es2qKF1OxYr+MxOrd68QFVrVLJa/9elgDiXj7t8IEkqW7FkvH2KFC+YZMeJ51OHDh8oJGSrrlw5qs2bl6rUQ+eluDRp8pYOHPDXlStHtWfPWtWuXc1qfcOGdbRixVydOXNA//77t4oUIadSisGDeun03/t141qo1q6epwIFXnziNp92bKPQYzt183qYtm9dodKlilmtd3Nz0/hxwxURfkhXLx/TgvlTlTWrj1WfUiWL6o8183XpwhFdjDisVSt/sco7Nzc3Tf9pjAL2/6k7t//W74um2+V44TiDBvXSqb/36/q1UK1JRK4dP7ZTN66Hadtjcu18+CFduXxM8+PItajIs7GW5s0bxHqeoKCNun4tVIcObVbr1k2f+njxbHTs2EbHju7Q9Wuh2rplhUo9kiOPeqdJPR3872+9f9+fqlPnzVh9Bg3spb9P7tO1q6Favfq3WLmaMWMGzZ71gy5dDNaFiMOaMnm0PD09LOvz5HlBkXfPxFrKlCkRZ0zNmzVQ5N0zWrTwp8S/AEj29h44qM59Bqlag1YqVLGu/Ddvd3RIeM59+NF72hfkr9MRQVrjv0DFSxR+bP8Gjepo+57VOh0RpE3bl6tGzcrx9v12zBBdvHZUHT5tE+f6NGlSa8OWpbp47agKFX71qY4DKYNhGCyJXJIDm4regwYNslq+/PJLdezYUa++yskkIRq/85aGjfhcI0f8oKqVGurQoRD9vnSmfLLEPTVMmbLF9dPMMfp59kJVqdhA/1u5Tj/Pm6TXCr5k6RN2/IT6+A1RxbL1VLfWuzr191ktXjZL0dZqPQAAZuhJREFUmX1i9vnyy/nl4mLSZ92+VPnSdfVFv+Fq176lvhzc85kcMxyjXqNa+vyrnhr/7RTVf/M9BR8+ptkLf1Rmn4xx9i9RuqjGTR2hBb8s1dvVWuqPVRs1ec73evnV/JY+ZQrWsFr6dB0ks9msNSv8JUn7dwfG6jNv7mKdOnlGQQFHnslx4/nQtOnbGjlygIYPH6fy5d9WUFCwli+fqyxZMsfZv1y5kpo9+wfNnr1A5crV04oVf2jBgqkqWPBlSx8Pj7Tavn2PBgz45lkdBp4DvXt1UpfOH6pTl36qUKm+bt2+rVUrf5Gbm1u82zRr1kCjvx2kr4Z9r9Jl6ygw6IhW/e8Xq/z7bvRgvV2vpt5t2UFvVn9HObJn06IFD4o5np4e+t/KX3Tq9FlVqFRfVao11o2bt7Rq5S9ydY25WC5VKhf9++8dTZgwQ/7+W5LuRcAz0eu/XOvcpZ8q/pdr/0tArn377SANG/a9ypSto6CgI/pfHLlW779cq/5fri1cELtw2L79Z3ohVzHLsmzZWsu6Dp98oGHD+uurr75X0WJvaujQ0Ro/brjq1atp3xcBdtesaX19O2qghg0fo7Jl6yro4BH9b+XPj30/nDt3ombOmqcyZeto+fI1WrTwJ71e8BVLn149O6lz53bq0rW/KlWqr9u3bmvlyp+tcnX27B9UsODLqvvWe2rUuK0qvVFWk34cFev5atdpoVy5i1uW/fuDYvXJk+cFffPNl9qyZacdXhEkR//+e0evFMinL3p2cnQoSAYaNamroV/31+iRE1W9cmMdPhSiBUumy8cn7ppH6TLFNWX6d/pl7iK9+UYjrf6fv2b/OlGvvvZSrL5vvV1DpUoVVfi5iHiff9DQPjp//oLdjgdA8mQynrI8f+fOHUVGRlq1eXl5JXo/GdMVeJowkpV1GxYpYP9B9ek5RJJkMpl06OgWTZs8V2O/nxKr//TZ4+TpkVbvNnswiv6P9Yt06OAR+XUfGOdzpE+fTqfCD6jh2+9r88Ydcfbp2v0jffjReypeOPbIEWeW0T29o0N4ZhavnaOggMMa3G+kpJhc2xa0RnOmzdPk8TNj9R//0zfy8Eirj97rbmn7fc1sBR86pgG9hsf5HJPnfK906TzUuknHONe7urpq+8G1mvPTPE34bpodjir5CL912dEhONTmzUu1b1+QPvss5jxlMpkUGrpTkybN0ujRk2L1nzt3gjw8PPTOOx9a2jZtWqLAwCPq1u0Lq765c7+go0e3xRQPgvgxJSr6nqNDSFKn/96vMWOn6PsxMe+RXl7pde7MAX340WdasGB5nNts37pCe/YGqnuPAZJi8u/kX3s08ceZGvXtRHl5pdf5c0Fq/UEXLV78P0nSK6/k1+GDm1WxUn3t2r1fJUsU0a6dq5U3X2mdOXNOklSo0Ks6sN9fr7xWUWFhJ62ec/pPY5Qhg5feado+iV4JxzM9uUuyduq/XBvzUK6dPXNA7R+Ta9u2rtDeR3LtxH+59u1/uRZ+LkjvP5Jrhw5uVqX/ck2KGen9TtMPtXz52jifZ/OmZdq+fY/69R9maRs1cqDKlCmuqtUa2+01eF48PJVicrd1ywrt3ReoHg/lyF9he/TjjzP17eiJsfr/8vOP8vD0UOPGbS1tWzYvV2DQYXXp0l+S9PfJfRo7bqpVrp45HaCPPvLTgoXL9eqrBRQUuFHlyr9lKWLXqlVVy5fN0Yv5Sis8PEJ58ryg48d2qnTpWgp8zHupi4uL1vv/rlmz56tSxTLKkMFLTZt9ZK+Xx+Fund3s6BCSnUIV62rciC9VvXIFR4eSrOTIX9fRITwza/wX6MD+g+rX+ytJMee9wCOb9NPUuRo/JvZ3wmkzx8jDI61atXjwnXL1n/N16GCIen82yNKWLXtWrfVfqOZN2uvXBVM0ddIcTZk022pf1WtU1tCv+6nd+121bfcqVavUUIcOhiTRkT6fLl476ugQkp26uVLOf5/2svr0akeH8EQ2jfS+deuWunTpoqxZs8rT01MZM2a0WhC/1KlTq1jxQtq4YZulzTAMbdqwXaXLFI9zmzJlimvjBuvLx9b7b4m3f+rUqdWmXQtdu3r9sSd3L+/0unLlmg1HgeQgdWpXFSr6mrZt2mVpMwxD2zbtUvHScU+nU6JUEav+krRlww4VLxV3f58smVStZiUt+GVpvHHUqFNFGTN5a9GvyxJ/EEi2UqdOreLFC2v9+q2WNsMwtH791ngvmy5btoQ2bNhq1bZu3WaVLRt3f6QML76YW9mz+8r/oVy6fv2Gdu8OULmyJePcJnXq1CpRooj81z8YeW0YhvzXb1W5cjHblCxRRGnSpLEanX30aJj+/vuMpc/RY2G6dOmyPmz3rlKnTi13d3e1a9tSR4KP6eTJ00lxuHCg+7m23g65tv6hXCuRgFy7b/y44Qo/d1Dbt61U2zYtrNa5uaXRnbt3rdr+vXNHpUsXs1x5gOdPTI4U1vpYObJF5crF935Y0qq/JK1bt8mSh5ZcfSinYnL1gMr+l1Nly5bUlStXrUZt+/tvkdlsVpnS1t8hfv99ps6cPqAN6xfr7bdjXzkw4IvPdPHiP5o1a14ijx5ASpQ6dWoVLfa6Nm18UMMwDEObN25XqdJx1zBKlS4Wa7DeBv+tKlW6mOWxyWTSj1O/1cTx03U0JDTO/WTJklnfj/9KnTr00b//3nn6gwGQrNlU9O7Tp4/Wr1+vSZMmyc3NTT/99JOGDBmiHDlyaM6cOfaO0alkzpxRrq6uunjhH6v2ixcuKauvT5zbZPX10cWLl+Lon8WqrXadajp9PlDn/zmsT7u0U+MGbXT5nytx7vPFfHn0SYcPNGsGH16dVcb/cu3SRevRxpcu/qMsWeO+nNYnq0/s/hfi79/k3fq6dfO21qxcH28czVs10pb1O3Q+nMvLUhIfn5j8u3DB+tx14cIlZcuWJc5tfH2zxNnf1zfu/kgZsvlmlSRFRFy0ao+4cEnZsmWNcxsfn0wx+RfxaD5dVLb/8sk3WxbdvXtX165dj93nvxy9efOWqtdsqvdaNtHN62G6duWYateuqrfrt1Z0dLRdjg/Pj8flmm8icy3ioVzL9phc833ofDho8Ld6772OqvvWu1q8ZJV++OFrden84MqXP9Zt0oftWqpE8Zg5UUuWKKIP27VUmjRp4r1cHI53P0cezauY97e48ypbtixx5tT998P7/x8R6z3zobzzzaKLF62/b0RHR+vy5auWvLt585Z69xmilu91VMNGbbR9+x4tWjjdqvBdoUJptW37rjp+2juxhw4ghcoUT83jwsV/HlvzePR7wMVH+nf77GPdu3dPUyfHX3P6YdI3mj1jngIDDj3FEQBwFjYNC1mxYoXmzJmjqlWrql27dnrjjTdUoEAB5cmTR7/88otatWr12O3v3r2ru4+MVDEMw6kuY3SELZt3qnKFBsqcOaM+aNtCM+eMV41q78QqYmbP7qtFS2Zo6ZLVmjNrvoOihTNo9l5DLVu0WpF3I+Ncny17Vr3xZnl1bd/3GUcGILlq2bKxJk0caXncoOEHDovF3d1d06aM1vYde9X6/c5KlSqV/Pw6avmyOSpXvp7u3GEEUXLWsmVj/fic5Jokff31WMu/Dxw4LE9PD/n5faoJE2dIkoYPH6tsvlm0desKmUwmRURc1NyfF6p3r84ym80OihrJ2T//XNG4cQ+mGdi3L1DZs/vK77OOWrlyndKl89TMmeP0aac++ieegTQA8CwUKfa6Pun4gd6s3CTePh93eF/p0nnGOWUsgJTJppHely9fVr58+STFzN99+XJMUbVSpUravPnJc6KNGDFC3t7eVsudqJTxQeqff67o3r17sUbOZsnqE2tEx30XIi4pSxafOPpbjxi5fftfnfjrb+3dc0DdOvfXvXvRev+D5lZ9smXLquWrftbuXfvVo6v1HLlwLlf+y7VHb5DqkyVzrF/d77t04VLs/lnj7l+6XHHlf+lFzf95SbwxNH2voa5cvqY/12yy4QiQnF26FJN/WbNan7uyZvXR+fMX49wmIuJinP0fHR0H57ZixR8qWbqWZbn0T8xnjEdH/Ptm9Yn3BkWXLl2OyT/fR/Mpi87/l08R5y/Kzc1N3t5esfv8l6Mt322kPHlyqf1Hn2nvvkDt2r1frd/vrBfz5laDBrXscrxwnBUr/lCp0rUsyz+PybWIROaa70O5dv4xuRYRz/lQknbvDlCuXDmUJk0aSTH30fn4k57y8i6gAi+VU778ZfT3yTO6fv1GrBG9eH7cz5FH8yrm/S3uvDp//mKcOXX//fD+//vGes98KO8iLsa6UWaqVKmUKVOGx+fdngDlz59XkpQ/Xx69mDe3liyeqdu3Tur2rZNq3bqp3n67lm7fOql8+fI84egBpESX46l5ZM2S+bE1j0e/B2R5qH/58qXkkyWzDhzeoPB/Div8n8PKnecFDRneV/uC/CVJlSqXU6kyxXT24kGF/3NYuwP+kCSt2/i7Jkz6xt6HCSdjZkn0khzYVPTOly+fTpw4IUl69dVXtWDBAkkxI8AzZMjwxO379++va9euWS3uqVPGXOBRUVE6EHBIVao+uOmHyWRS5aoVtGd3QJzb7N4dYNVfkqpVqxhv//tcXFyUxi2N5XH27L5asfoXBR44pM4d++op72GK51xU1D0dCgxWhcplLW0mk0kVKpdRwJ6gOLfZvzdIFSqXsWqrWKWcAvbG7t+sVSMdPHBEIYePxRtD05YNtGTBSt2759w32UNsUVFRCgg4qGrVKlraTCaTqlWrqN3/3bTtUbt27VfVqhWt2qpXf0O7dsXdH87p5s1bCgs7aVmOHDmm8PAIvVmtkqVP+vTpVKZMce3ctS/OfURFRWn//iCrbUwmk96sVkk7d8Zss29/kCIjI/Xmmw/6vPxyfuXJ84Klj4dHWpnNZqv3y/uPXVxs+giF50h8uVbNDrlW7aFc25+AXItL0aKv6/LlK7FuGH/v3j2dPRsus9ms5s0b6H+r/uQz3XMsJkcOWuXVgxyJ7/1wn1VOSTHvh/fz8MSJUzG5+uajuVpMu/7LqV279iljxgwq/t90OFLM9wcXFxft3hP/d4iiRV63/KAYcjRMxYtXV+nStS3LypV/aOOm7SpdurZOnz6XyFcDQEoQFRWlwAOHVblKeUubyWTSG1XKa28855+9ew7ojSrlrNqqVKugvXsOSJIWzFumKhUaqFqlRpYl/FyEJo6fruZNYm6s+3nfYapasaFlfctmn0iSPm73mYZ/NSYJjhTA886m6U3atWunwMBAValSRf369VP9+vU1YcIERUVF6fvvv3/i9m5ubnJzc7NqS0lTm/w4YYZ+nPKtAvYf1P59Qfq0c1t5eqTVLz8vkiRNmvqtws9FaOjg0ZKkKT/O0so1v6pz1/b6Y+0GNWn6toqVKKQe3WJGant4pFXP3p20epW/Is5fUKbMGfXRJ62VPYevli2JuZvq/YL36dNn9eXn31jN/fjo3FlwHtMn/azRE4bq4IEjCtx/SO06vicPj7Ra9FvMTSVHT/xKEeEX9O2wHyRJs6b8pt+WT1P7Tu9rwx9bVL9JbRUuVlBf+H1ltd906Tz1VoOa+npQ/P+9V3ijjHLnfUHz58Y/EhzObfz4nzRt2nfaty9Ie/cGqkuXD+Xh4aE5cxZKkn766XudO3deAweOkiRNnDhTf/wxX927f6zVq9erWbP6KlGisDp37mfZZ8aM3sqVK6eyZ/eVJL38csxVRxERFxkR7sTG//CTPu/fTcdD/9LJk6c1ZHBvnTsXoWXL1lr6/LFmvpYuW60fJ82SJI0ZN00zp4/Rvv1B2rMnQN26fixPz7SaNTtmWq/r129oxsx5Gj1qkK5cvqrr129o3Nhh2rFjr3b998PMn/6bNfKbAfph/Nea+OMMubi4qE/vLrp37542PnRzptdee0lp0qRRpkwZlD5dOhUt+rokKTDw8DN6hWAv93Mt9L9cGxxHrq1dM1/LHsq1seOmaUYcuTb7oVybOXOevh01SJcvX9WN6zc09pFcq1evpnyz+mjX7v26c+eualSvrH59u+r7MZMtz/vSS/lUunQx7d4doIwZvNW9xyd6/fVX9WH7Hs/s9YFtxo2bqunTx2j/vkDt2XtAXbt+FJMjc2JyZMb0sTp37rwGfBkzEvGHCdPl/+ci9ejxiVav9lfzZg1VsmQRder0YLq4H36Yrv79uik09IROnjitwYN76Vx4hJYtj8nVkJBQrVm7QZMnjVLnLv2VOrWrxo0dpgULlis8PEKS9H7rpoqMjNKBwJi5bxs1rKu2bVuoQ8eY+bvv3r2rw0eOWh3L1asxc9M/2g7nd/v2vzp15sEPHWfPRSjkWJi8vdIrezz3PUDKNXniTP0waaQOBBzS/n1B6tCpjTw80+q3nxdLkiZMHqnz4REaNiTm++TUSXO0bNVcfdqlndat3aTG77ylYsULqWf3gZKkK1eu6sqVq1bPERUVpQsRlxQWGjMg8+yZcKv1t27dliSdPHFK4ecikvJwATynbCp6f/bZZ5Z/16hRQyEhIdq3b58KFCigIkWK2C04Z7Xk91Xy8cmszwf0UFbfLDoYdERNG39omULihVw5rOZm3L0rQB9/6KcvvvxMXw7uqb/CTqr1u58q+MhxSTE3pXnplXx6t1VjZc6cSZcvX1HAvoN6q9a7CgmO6VP1zYrKXyCv8hfIqyPHt1nFkzFdgWd05HjW/rf0D2XKnFGf9ftUPlkzK/jQUbVt3tkyz3uOF7JZ5dr+PYHq0eFz9fy8s3p90UUn/zqljh/46VhImNV+325SWyaTtOL3NfE+d/PWjbR31wH9FXoySY4Nz79Fi1bKxyezBg70k69vFgUFHVHDhh9YfmjL9ci5bufOfWrbtpsGDeqlIUN6KzT0pJo3/0RHjjy4mqBevZqaNu07y+O5cydKkoYNG6Phw8c+mwPDM/ft6B/l6emhyT+OUoYMXtq2bY/q1W9tdX+QfPnyWP2gu3DhcmXxyaTBA3spW7YsCgw8rHpvt7b6obdnr8Eym81aMH+q3Nzc9Me6jerS9XPL+qNHw9SocVt9OcBPWzcvl9ls1oEDMft5eGqVFcvmKm/eXJbH+/bEXE7rmiZnkrweSDqj/8u1SQ/l2ttx5FrmOHJt0EO59nYCcq3rQ7kWFRWlTz9tq9GjB8tkMiks7KR69x6in6b/YumTKpWLPuvRQS+/nF9RUVHauGm7KldpqL//PpPErwqe1sJFK+STJbMGWnLkiN6u//5D74c5Y70ffvBBFw0Z0kdfDe2r0NATatrsI6tC8+jvYnL1x4kjY3J1+x7VfyRX27TpqnFjh2ntmnkym81asmSVPvMbaBXb5593V+7cL+jevXs6ejRMrVp10uIl/0viVwTJ0aGQ4/qw64MfXkb9MFWS1LBuDQ0f0NNRYeE5tXTxamXOnEl9P++mrL5ZdOhgsFo0+cgyHdcLL2SX8dB5b8/uAHX8qJf6D+ihLwb66a+wk2rzXmdLPQMAbGEyEnk9ZFRUlOrUqaPJkyfrpZdeslsgFF7xrGR0T+/oEJBChN+6/OROgB1ERTOFEJ6NlHNdHhwtJV0FCse6dfbJ96QC7CFH/rqODgEpxMVrXI2TWLVz8d9nYq09vdrRITxRoiekTJ06tYKC4p4PGAAAAAAAAAAAR7LpLkytW7fW9OnT7R0LAAAAAAAAADwzBv9L9P+SA5vm9L53755mzJihP//8UyVLlpSnp6fV+oTczBIAAAAAAAAAAHuzqeh96NAhlShRQpJ07Ngxq3XMvwcAAAAAAAAAcJREFb3/+usvvfjii9qwYUNSxQMAAAAAAAAAgM0SNaf3Sy+9pIsXL1oet2jRQhEREXYPCgAAAAAAAAAAWySq6G0Y1hOVr1q1Srdu3bJrQAAAAAAAAAAA2MqmOb0BAAAAAAAAILkzy3hyJyQ7iRrpbTKZYt2okhtXAgAAAAAAAACeF4ka6W0Yhtq2bSs3NzdJ0p07d9SxY0d5enpa9Vu8eLH9IgQAAAAAAAAAIIESVfRu06aN1ePWrVvbNRgAAAAAAAAAAJ5GooreM2fOTKo4AAAAAAAAAAB4aoma0zs+169f19KlSxUSEmKP3QEAAAAAAAAAYJNEjfS+r3nz5qpcubK6dOmif//9V6VKldLJkydlGIbmzZund955x95xAgAAAAAAAIBdGYbh6BCQBGwa6b1582a98cYbkqQlS5bIMAxdvXpV48eP17Bhw+waIAAAAAAAAAAACWVT0fvatWvKlCmTJGnNmjV655135OHhoXr16un48eN2DRAAAAAAAAAAgISyqeidK1cu7dixQ7du3dKaNWtUq1YtSdKVK1fk7u5u1wABAAAAAAAAAEgom+b07tGjh1q1aqV06dIpd+7cqlq1qqSYaU8KFy5sz/gAAAAAAAAAAEgwm4renTp1UtmyZXXq1CnVqlVLLi4xA8bz5cun4cOH2zVAAAAAAAAAAAASKsFFbz8/P3311Vfy9PSUn5+fpX3Lli2x+laoUME+0QEAAAAAAABAEjHLcHQISAIJLnoHBAQoKirK8u/4mEymp48KAAAAAAAAAAAbJLjovWHDhjj/DQAAAAAAAADA88LF0QEAAAAAAAAAAGAvFL0BAAAAAAAAAE6DojcAAAAAAAAAwGkkeE5vAAAAAAAAAHAmhgxHh4AkwEhvAAAAAAAAAIDToOgNAAAAAAAAAHAaFL0BAAAAAAAAAE6DojcAAAAAAAAAwGlQ9AYAAAAAAAAAOA1XRwcAAAAAAAAAAI5gNgxHh4AkwEhvAAAAAAAAAIDToOgNAAAAAAAAAHAaFL0BAAAAAAAAAE6DojcAAAAAAAAAwGlQ9AYAAAAAAAAAOA1XRwcAAAAAAAAAAI5gODoAJAlGegMAAAAAAAAAnAZFbwAAAAAAAACA06DoDQAAAAAAAABwGhS9AQAAAAAAAABOg6I3AAAAAAAAAMBpuDo6AAAAAAAAAABwBLMMR4eAJMBIbwAAAAAAAACA06DoDQAAAAAAAABwGhS9AQAAAAAAAABOg6I3AAAAAAAAAMBpUPQGAAAAAAAAADgNV0cHAAAAAAAAAACOYJbh6BCQBBjpDQAAAAAAAABwGhS9AQAAAAAAAABOg6I3AAAAAAAAAMBpUPQGAAAAAAAAADgNit4AAAAAAAAAAKfh6ugAAAAAAAAAAMARDMNwdAhIAoz0BgAAAAAAAAA4DYreAAAAAAAAAACnQdEbAAAAAAAAAOA0KHoDAAAAAAAAAJwGRW8AAAAAAAAAgNNwdXQAAAAAAAAAAOAIZhmODgFJgJHeAAAAAAAAAACnQdEbAAAAAAAAAOA0KHoDAAAAAAAAAJwGRW8AAAAAAAAAgNOg6A0AAAAAAAAAcBqujg4AAAAAAAAAABzBkOHoEJAEGOkNAAAAAAAAAHAaFL0BAAAAAAAAAE6DojcAAAAAAAAAwGlQ9AYAAAAAAAAAOA2K3gAAAAAAAAAAp+Hq6AAAAAAAAAAAwBEMw3B0CEgCjPQGAAAAAAAAADgNit4AAAAAAAAAAKdB0RsAAAAAAAAA4DQoegMAAAAAAAAAnAZFbwAAAAAAAACA03B1dAAAAAAAAAAA4AhmGY4OAUmAkd4AAAAAAAAAAKdB0RsAAAAAAAAA4DQoegMAAAAAAAAAnAZFbwAAAAAAAACA06DoDQAAAAAAAABwGq6ODgAAAAAAAAAAHMEwDEeHgCTASG8AAAAAAAAAgNOg6A0AAAAAAAAAcBoUvQEAAAAAAAAAToOiNwAAAAAAAADAaVD0BgAAAAAAAAA4DVdHB3Df7Xt3HR0CUog7t6IcHQJSCLNhdnQISCFSufAbNp4N7mwPwNnkyF/X0SEghTgXttrRIQCIh1l8xnVGfEsGAAAAAAAAADgNit4AAAAAAAAAAKdB0RsAAAAAAAAA4DQoegMAAAAAAAAAnAZFbwAAAAAAAACA03B1dAAAAAAAAAAA4AiGDEeHgCTASG8AAAAAAAAAgNOg6A0AAAAAAAAAcBoUvQEAAAAAAAAAToOiNwAAAAAAAADAaVD0BgAAAAAAAAA4DVdHBwAAAAAAAAAAjmA2DEeHgCTASG8AAAAAAAAAgNOg6A0AAAAAAAAAcBoUvQEAAAAAAAAAToOiNwAAAAAAAADAaVD0BgAAAAAAAAA4DVdHBwAAAAAAAAAAjmDIcHQISAKM9AYAAAAAAAAAOA2K3gAAAAAAAAAAp0HRGwAAAAAAAADgNCh6AwAAAAAAAACcBkVvAAAAAAAAAIDTcHV0AAAAAAAAAADgCGbDcHQISAKM9AYAAAAAAAAAOA2K3gAAAAAAAAAAp0HRGwAAAAAAAADgNCh6AwAAAAAAAACcBkVvAAAAAAAAAIDTcHV0AAAAAAAAAADgCIYMR4eAJMBIbwAAAAAAAACA06DoDQAAAAAAAABwGhS9AQAAAAAAAABOg6I3AAAAAAAAAMBpUPQGAAAAAAAAADgNV0cHAAAAAAAAAACOYDYMR4eAJMBIbwAAAAAAAACA06DoDQAAAAAAAABwGhS9AQAAAAAAAABOg6I3AAAAAAAAAMBpUPQGAAAAAAAAADgNV0cHAAAAAAAAAACOYMhwdAhIAoz0BgAAAAAAAAA4DYreAAAAAAAAAACnQdEbAAAAAAAAAOA0KHoDAAAAAAAAAJxGgm9kuXz58gTvtEGDBjYFAwAAAAAAAADA00hw0btRo0ZWj00mkwzDsHp8X3R09NNHBgAAAAAAAABJyPxQfRPOI8HTm5jNZsvyxx9/qFixYlq9erWuXr2qq1evatWqVSpRooTWrFmTlPECAAAAAAAAABCvBI/0fliPHj00efJkVapUydJWu3ZteXh46JNPPlFwcLDdAgQAAAAAAAAAIKFsupFlWFiYMmTIEKvd29tbJ0+efMqQAAAAAAAAAACwjU1F79KlS8vPz08RERGWtoiICPXu3VtlypSxW3AAAAAAAAAAACSGTUXvGTNmKDw8XLlz51aBAgVUoEAB5c6dW2fPntX06dPtHSMAAAAAAAAAAAli05zeBQoUUFBQkNatW6eQkBBJ0muvvaYaNWrIZDLZNUAAAAAAAAAASAqGDEeHgCRgU9Fbkkwmk2rVqqVatWrZMx4AAAAAAAAAAGxmU9F76NChj10/cOBAm4IBAAAAAAAAAOBp2FT0XrJkidXjqKgonThxQq6ursqfPz9FbwAAAAAAAACAQ9hU9A4ICIjVdv36dbVt21aNGzd+6qAAAAAAAAAAALCFi7125OXlpSFDhujLL7+01y4BAAAAAAAAAEgUm29kGZdr167p2rVr9twlAAAAAAAAACQJwzA7OgQkAZuK3uPHj7d6bBiGwsPDNXfuXNWtW9cugQEAAAAAAAAAkFg2Fb3HjBlj9djFxUVZsmRRmzZt1L9/f7sEBgAAAAAAAABAYtlU9D5x4oS94wAAAAAAAAAA4KnZ7UaWAAAAAAAAAAA4ms03sty7d68WLFigU6dOKTIy0mrd4sWLnzowAAAAAAAAAAASy6aR3vPmzVOFChUUHBysJUuWKCoqSocPH9b69evl7e1t7xgBAAAAAAAAwO7MMlgSuSQHNhW9v/76a40ZM0YrVqxQmjRpNG7cOIWEhKh58+bKnTu3vWMEAAAAAAAAACBBbCp6h4WFqV69epKkNGnS6NatWzKZTPrss880depUuwYIAAAAAAAAAEBC2VT0zpgxo27cuCFJypkzpw4dOiRJunr1qm7fvm2/6AAAAAAAAAAASASbbmRZuXJlrVu3ToULF1azZs3UvXt3rV+/XuvWrVP16tXtHSMAAAAAAAAAAAliU9F7woQJunPnjiTpiy++UOrUqbV9+3a98847GjBggF0DBAAAAAAAAAAgoRJd9L53755Wrlyp2rVrS5JcXFzUr18/uwcGAAAAAAAAAEnJMAxHh4AkkOg5vV1dXdWxY0fLSG8AAAAAAAAAAJ4XNt3IskyZMjpw4ICdQwEAAAAAAAAA4OnYNKd3p06d5Ofnp9OnT6tkyZLy9PS0Wl+kSBG7BAcAAAAAAAAAQGKYDBsmrnFxiT1A3GQyyTAMmUwmRUdHJzoQN/dcid4GsIWLyaYLHIBEMxtmR4cAAHbFfIcAnI23u+eTOwF2cC5staNDQAqR2iefo0NIdnJnKuzoEJKdU5cPOjqEJ7JppPeJEyfsHQcAAAAAAAAAAE8tUUXvypUra/ny5cqTJ48kafny5apZs6bSpk2bJMEBAAAAAAAAQFIxi6sZnVGi5nnYunWrIiMjLY9bt26t8PBwuwcFAAAAAAAAAIAtnmpyY+Z1BAAAAAAAAAA8T7ijHwAAAAAAAADAaST6RpZr166Vt7e3JMlsNsvf31+HDh2y6tOgQQP7RAcAAAAAAAAAQCKYjETMUeLi8uSB4SaTSdHR0YkOxM09V6K3AWzhYuICBzwbZsPs6BAAwK6Y2g6As/F293R0CEghzoWtdnQISCFS++RzdAjJzguZCjk6hGTnzOVDT+7kYIka6W02U8ABAAAAAAAA4BwY2OGcGPIKAAAAAAAAAHAaCR7pvXz58gTvlDm9AQAAAAAAAACOkOCid6NGjawem0wmq+H/JpPJ8m9b5vQGAAAAAAAAAOBpJXh6E7PZbFn++OMPFStWTKtXr9bVq1d19epVrVq1SiVKlNCaNWuSMl4AAAAAAAAAAOKVqBtZ3tejRw9NnjxZlSpVsrTVrl1bHh4e+uSTTxQcHGy3AAEAAAAAAAAASCibbmQZFhamDBkyxGr39vbWyZMnnzIk59SxQxsdPbpd164e15bNy1WqVLHH9m/SpJ6CAjfo2tXj2rd3nerUrharz8CBPXXyxF5dvXJcq1f9qgL581qt/33RDB0/vlPXrh7XyRN7NWPGWGXP7mtZ//JL+bR27Xyd+nu/rl09rpDgrRo8uLdcXW36LQTPqQ4dPlBIyFZduXJUmzcvValSRR/bv0mTt3TggL+uXDmqPXvWqvYjudewYR2tWDFXZ84c0L///q0iRQparc+Y0Vvffz9EgYHrdfnyUR07tl3ffTdYXl7p7X5scKzn8bwmSTVrVNHmTct06WKwzpw+oHm/TVGePC887eHCgcg1JKVBA3vp75P7dO1qqFav/k0FCrz4xG06dmyjY0d36Pq1UG3dsiJWTrq5uWncuGEKP3dQl/85qvnzpiprVh+rPrly5dDSpbN19cpxnTl9QCNGDFCqVKks6ytXLq/Iu2diLb6+WSx9KlUqqyWLZ+rkib2KvHtGDRrUfroXA0kqOefaJ5+8r3171+nSxWBduhiszZuWxfqMiOThw4/e074gf52OCNIa/wUqXqLwY/s3aFRH2/es1umIIG3avlw1alaOt++3Y4bo4rWj6vBpmzjXp0mTWhu2LNXFa0dVqPCrT3UccF57DxxU5z6DVK1BKxWqWFf+m7c7OiSkAGbDYEnkkhzYVPQuXbq0/Pz8FBERYWmLiIhQ7969VaZMGbsF5yyaNq2vUaO+1PDhY1W23Fs6ePCIVq6YqyxZMsfZv1y5kpo7Z4JmzZqnsmXravmKtVq48CcVLPiKpU/Pnp+qc6d26tr1c1V6o75u3fpXK1f+LDc3N0ufTZu2q1WrT1W4SFW927KD8r2YR7/9OtmyPurePf3yy++q93YrFS5SVb16DdGH7Vpq4MCeSfdi4Jlq2vRtjRw5QMOHj1P58m8rKChYy5c/Pvdmz/5Bs2cvULly9bRixR9asGCqChZ82dLHwyOttm/fowEDvolzH9mz+yp7dl/17z9cJUvW1Mcf91LNmlU0efKoJDlGOMbzel7LmzeXFi36SRs3bVeZsnX0dv3WyuyTSfPnTU26FwNJilxDUurVs5M6d26nLl37q1Kl+rp963asXHhUs6b19e2ogRo2fIzKlq2roINH9L+VP1vl5OjRg1TvrZpq+V4HVa/RVNmz+2rB/GmW9S4uLlq2dI7SpEmtKlUaqv1Hn+mD95tp8KBesZ7v9UJvKFfu4pblwoVLlnWenh4KCjqi7t0H2OkVQVJJ7rl29my4vhgwQuXKv6XyFd7Sxo3b9Pui6Sr42sux9oPnV6MmdTX06/4aPXKiqldurMOHQrRgyXT5+GSKs3/pMsU1Zfp3+mXuIr35RiOt/p+/Zv86Ua++9lKsvm+9XUOlShVV+LmIOPYUY9DQPjp//oLdjgfO6d9/7+iVAvn0Rc9Ojg4FQDJnMozEl+dDQ0PVuHFjHTt2TLly5ZIknT59Wi+99JKWLl2qAgUKJDoQN/dcid4mudiyebn27QtUj8++lBRz08+w0N36cdJMjR79Y6z+P8/9UZ6eadW4STtL2+ZNyxQUdFhdun4uSTp5Yq/GjZumMWOnSJK8vNLr9Kn9+ujjnlq4cHmccbxdr6YWLvxJ6b3y6969e3H2GTVyoEqWKqrq1d95qmN+nrmYbPqtJ1navHmp9u0L0mefDZQUk3uhoTs1adIsjR49KVb/uXMnyMPDQ++886GlbdOmJQoMPKJu3b6w6ps79ws6enRbzJewoCOPjaNJk7c0Y8ZYZc78Woq60a3ZMDs6hCTzvJ7XGjd+S3PnTFB6r/yWmy3Xe6uGFi2a/thzH55f5NrzxYaPjc+1v0/u09hxUzVmzINcOHM6QB995KcF8eTC1i0rtHdfoHr0iCk0m0wm/RW2Rz/+OFPfjp4oL6/0Onc2UB980FWLl/xPkvTKK/l1MGiTKr3RQLt371ft2tW0dMks5clb0lJY/Pjj1vp6+OfKkbOooqKiVLlyef25bqGyZC2oa9euP/FYIu+eUdNm7bV8+Vp7vDSwM2fKtfvOhx9Sv/7DNGvWvKd5aRzO293T0SE8M2v8F+jA/oPq1/srSTE5FXhkk36aOlfjx0yL1X/azDHy8EirVi06WtpW/zlfhw6GqPdngyxt2bJn1Vr/hWrepL1+XTBFUyfN0ZRJs632Vb1GZQ39up/avd9V23avUrVKDXXoYEgSHenz6VzYakeHkOwUqlhX40Z8qeqVKzg6lGQltU8+R4eQ7GTPUPDJnWAl/Orj60DPA5uqfwUKFFBQUJBWrFihbt26qVu3blq5cqUOHjxoU8HbmaVOnVolShTW+vVbLW2GYWj9hi0qV7ZknNuULVfCqr8krftzk8r+1//FF3Mre3Zf+a/fYll//foN7d5zQOXKlohznxkzZtC77zbWjp174/0inj9fXtWqVUVbtuxM1DHi+ZQ6dWoVLx5H7q3fqjJl4s6TsmVLaMOGR3Jv3WaVjSevEsrLy0vXr99MUQVvZ/Y8n9cCAg7KbDarTZvmcnFxkZdXer33XhOtX7/VaYuQzoxcQ1K6nwvr/R/Jhd0HVLZc3Pn1ICcfbBPz3rpF5crF5E+JEoWVJk0aqxw7ejRMf/99xtKnXNmSOnQoxGok7bp1m+Tt7aXXC1qPnN2ze63+PrlPq1b9qvLlSz39geOZc7Zcc3FxUfNmDeTpmVa7du5LxCsBR0qdOrWKFntdmzY+mCrCMAxt3rhdpUoXj3ObUqWLafPGHVZtG/y3qlTpYpbHJpNJP079VhPHT9fRkNA495MlS2Z9P/4rderQR//+e+fpDwYAgASweciryWRSrVq19Mknn6hr166qWbOmTCaTPWNzCj4+meTq6qqICxet2i9EXLKaJ+9h2XyzKOKhD6aP9r///xdi9bkoX9+sVm3Dh/XX5X+O6nz4QeXKlUNNm7aP9XwbNyzRtavHdeTIFm3btltDhoxO3EHiueTjk1Gurq6x8+TCJWXLFnfu+fpmibN/fLmaEJkzZ1T//l01Y8ZvNu8Dz5fn+bx28uRp1Xu7tYYO6asb18N08cIR5cyZXe+1+tS2g4VDkWtISvdzIVa+XLiobPHklyUnIx7JyQuXLPmTzTer7t69G2vE7IULl5Ttvz6+2bLEyuv7+/TNFtPn/PkIdercVy3e/UQt3v1EZ06f05/rFqpYsUK2HC4cyFlyrdDrr+ryP0d188ZfmjBhhJo1/1jBIccT/DrAsTJljvlucPHCP1btFy7+o6y+PnFuk9XXJ9b75cVH+nf77GPdu3dPUyfPife5f5j0jWbPmKfAgENPcQQAACSOTUVvs9msr776Sjlz5lS6dOl04sQJSdKXX36p6dOnP3H7u3fv6vr161aLs10u+7z4fsxklS1bR2/Ve0/R5mjNmD42Vp/W73dS2XJv6f0PuqhOnery+6zDsw8UTil9+nRasmSmgoNDNWzYGEeHAyfxuPOar28WTfpxpH7+eZEqVHxb1Ws0VWRUlOb9Njn+HQLxINecS8t3G+vyP0ctS+rUqR0d0mMdO/aXfvrpFwUEHNTOnfv0SYde2rFjn7p3+9jRoeEJnDXXjh4LU+kytVWxUn1NnTpX038ao9dejT23M1KOIsVe1ycdP1DXT/vH2+fjDu8rXTpPjf1+yjOMDAAAydWWjYYNG6bZs2dr1KhR+vjjBx+GChUqpLFjx6p9+9ijiR82YsQIDRkyxKrNJVV6ubp62xLOc+3Spcu6d++efLNaj+LI6usTa+TGfecjLsr3kbuuP9z//v9nzepjdSOQrL5ZFBR42Gq7f/65on/+uaLjoScUEnJcf4XtUdmyJbRr135LnzNnwiVJISHHlSqVi36cOFJjxk6V2ey88xGnBJcuXdG9e/eU9dFcyuqj8+fjzr2IiItx9o8vVx8nXTpPLV8+Rzdu3FKLFp9wub8TeZ7Pax07ttG1azf0+RdfW/q3a9dNf4XtUZkyxbV7d4DtB45njlyDPa1Y+Yd273nwd3FLk0aS5PtoLmTNosCgw7G2lx7KyUdG58a8V8bs43zEBbm5ucnb28tqBG7WrD46/1+fiPMXVbpUMat9WEYDP+Ymb3v2HlDFCqWfdKhwMGfNtaioKIWFnZQUM8VTyVJF1aVre3Xu3C/e/eD5cfmfmO8GWbJa3wg6a5bMuhBxKc5tLkRcivXdIMtD/cuXLyWfLJl14PAGy3pXV1cNGd5Xn3z6gUoWqa5KlcupVJliOnvxoNV+1m38Xb8vWKEun5I/ABzPEANxnZFNI73nzJmjqVOnqlWrVkqVKpWlvWjRogoJefLNKPr3769r165ZLalSedkSynMvKipK+/cfVLVqFS1tJpNJ1apW0s5dcc+Bt2vnfqv+klT9zTe067/+J06cUnh4hN6sVsmyPn36dCpTuph2PlTMfpSLS8yf280tzWP7pE7taumL5CsqKkoBAXHkXrWK2r077jzZtWu/qlZ9JPeqv2H1I0lCpE+fTitX/qzIyEg1bdped+/eTfwB4Ln1PJ/XPNKmjfWDXXS02aovkg9yDfZ08+YthYWdtCxHgo8pPDxC1d58JBfKFIt3nuIHOflgm5j31krauTMmf/bvP6jIyEirHHv55XzKk+cFS5+du/apUKFXlSXLg+JT9eqVde3adR0Jjn+6iKJFC1oVTfF8Sim55mJysRT08fyLiopS4IHDqlylvKXNZDLpjSrltXdP3D/U7t1zQG9UKWfVVqVaBe3dc0CStGDeMlWp0EDVKjWyLOHnIjRx/HQ1b/KRJOnzvsNUtWJDy/qWzT6RJH3c7jMN/4orQQEAScemkd5nz56N84aVZrNZUVFRT9zezc1Nbm5uVm3OPB/4uPHTNP2n77Vvf5D27jmgrl3by9MzrebMWSBJmj59jM6dO68vvxwpSZowcbr+XLdQPbp/otWr/dWseQOVLFlEnR4aRfHDhOnq16+rQkNP6MTJ0xo8qJfCwyO0fPlaSVLp0sVUqmRRbdu+R1evXlO+fHk0aFAvhYWdtHwIfvfdRoqKuqfDh0J0NzJSJUoU0VdD+2nhohWMynUS48f/pGnTvtO+fUHauzdQXbp8KA8PD82Zs1CS9NNP3+vcufMaOHCUJGnixJn644/56t79Y61evV7NmtVXiRKFrUbwZMzorVy5cip7dl9JMV+upJjRkxERF/8reM9V2rRp1a5dd3l5pZeXV3pJMXMAcgWBc3hez2ur1/irW7eP9Pnn3bVg/jKlS59OXw3tq5N/n9aBA3GPpsPzjVxDUvrhh+nq36+bQkNP6OSJ0xo8uJfOhUdo2X+5IElr1szTsmVrNGnSLEnSuHFTNX36GO3fF6g9ew+oa9eP5OmZVrPnzJcUc4PCmbPmadSogbp85aquX7+hsWO+0o4dey0/Oq9bt0nBwcc1c+Y4fd5/uHyzZdWQwb01efJsRUZGSpK6dm2vkydP68iRY3J3c1O7D1uqWtWKeqvee5bYPD09VCB/XsvjvHlzqWiRgrp85apOnz6XxK8eEiO559qwr/ppzdoNOn36rNKnS6d3322kKlXKq97brZ7RKwh7mDxxpn6YNFIHAg5p/74gdejURh6eafXbz4slSRMmj9T58AgNG/K9JGnqpDlatmquPu3STuvWblLjd95SseKF1LP7QEnSlStXdeXKVavniIqK0oWISwoLjZkC9ex/VxXfd+vWbUnSyROnFH4uIikPF8nU7dv/6tSZB+9hZ89FKORYmLy90it7tqyP2RIArNlU9C5YsKC2bNmiPHnyWLUvWrRIxYvHfefnlGzRohXK4pNJAwf2VDbfLAoMPKL6Dd633BQkV66cMpsfXEqxc+c+fdCmq4YM7q2hQ/soNPSkmjX7SEeOHLX0+e67SfL09NDEid8oQwYvbd++R/Xrv28ZUXv79h01bFRXX37ZU56eaXX+/AX98ccmtfqmk+UD7r170erV81O99FI+mUwmnTp1RpMmz9L48T89w1cHSWnRopXy8cmsgQP95OubRUFBR9Sw4QcP5V4OqyL0zp371LZtNw0a1EtDhvRWaOhJNW/+iY4cOWbpU69eTU2b9p3l8dy5EyVJw4aN0fDhY1WsWCGVKVNCknTkyBareF55paJOnTqTZMeLZ+d5Pa9t3LhdH7Tpqp5+HdXT71Pdvv2vdu3arwb139edO3ee4SsEeyHXkJRGf/ejPD099OPEkcqQwUvbtu9R/fqtra5QyvdiHvlkzmR5vHDRCvlkyayBA3spW7aYnHy7/vtWN3vr1WuIzGaz5s+bKje3NFq3bpO6dvvcst5sNqtR4zb64YcR2rx5uW7duq25Py/U4IduJp4mTRqNHDlQOXNk0+3b/+rgwWDVqdtSmzZtt/QpWbKo/ly38MHxfDtYkjRnzgJ99LGfXV8rPJ3knmtZsvhoxvSxyp49q65du6GDh4JV7+1W8ve3/qyH59vSxauVOXMm9f28m7L6ZtGhg8Fq0eQjXbwYc3PLF17ILuOh7wZ7dgeo40e91H9AD30x0E9/hZ1Um/c6K+QxVwkAT+tQyHF92LWv5fGoH6ZKkhrWraHhA3o6KiwAyZDJsOEOksuWLVObNm3Uv39/DR06VEOGDNHRo0c1Z84crVy5UjVr1kx0IG7uuRK9DWALFxOXnePZMBuMagfgXLjxOABn4+3u6egQkEKcC1vt6BCQQqT2yefoEJKdbBlec3QIyc75q8GODuGJbKr+NWzYUCtWrNCff/4pT09PDRw4UMHBwVqxYoVNBW8AAAAAAAAAAOzBpulNJOmNN97QunXr7BkLAAAAAAAAADwzXM3onJjnAQAAAAAAAADgNGwa6Z0xY0aZTKZY7SaTSe7u7ipQoIDatm2rdu3aPXWAAAAAAAAAAAAklE1F74EDB2r48OGqW7euypQpI0navXu31qxZo86dO+vEiRP69NNPde/ePX388cd2DRgAAAAAAAAAgPjYVPTeunWrhg0bpo4dO1q1T5kyRX/88Yd+//13FSlSROPHj6foDQAAAAAAAAB4Zmya03vt2rWqUaNGrPbq1atr7dq1kqS33npLf/3119NFBwAAAAAAAABAIthU9M6UKZNWrFgRq33FihXKlCmTJOnWrVtKnz7900UHAAAAAAAAAEnELIMlkUtyYNP0Jl9++aU+/fRTbdiwwTKn9549e7Rq1SpNnjxZkrRu3TpVqVLFfpECAAAAAAAAAPAEJsMwbCrPb9u2TRMmTNDRo0clSa+88oq6du2qChUq2BSIm3sum7YDEsvFZNMFDkCimQ2zo0MAALuy8WMjADy3vN09HR0CUohzYasdHQJSiNQ++RwdQrKTxfsVR4eQ7Fy8dtTRITyRTSO9JalixYqqWLGiPWMBAAAAAAAAAOCp2FT0vn79epztJpNJbm5uSpMmzVMFBQAAAAAAAACALWwqemfIkEEmkyne9S+88ILatm2rQYMGycWFqSQAAAAAAAAAAM+GTUXvWbNm6YsvvlDbtm0tN7LcvXu3Zs+erQEDBujixYsaPXq03Nzc9Pnnn9s1YAAAAAAAAACwB+5b45xsKnrPnj1b3333nZo3b25pq1+/vgoXLqwpU6bI399fuXPn1vDhwyl6AwAAAAAAAACeGZvmHtm+fbuKFy8eq7148eLasWOHJKlSpUo6derU00UHAAAAAAAAAEAi2FT0zpUrl6ZPnx6rffr06cqVK5ck6Z9//lHGjBmfLjoAAAAAAAAAABLBpulNRo8erWbNmmn16tUqXbq0JGnv3r0KCQnRokWLJEl79uxRixYt7BcpAAAAAAAAAABPYDJsnK395MmTmjJlio4ePSpJeuWVV9ShQwflzZvXpkDc3HPZtB2QWC4mmy5wABLNbJgdHQIA2BU3+QHgbLzdPR0dAlKIc2GrHR0CUojUPvkcHUKy4+P1sqNDSHYuXT/m6BCeyOait71R9MazQtEbzwpFbwDO5jn52AgAdkPRG88KRW88KxS9Ey9T+pccHUKyc/nGcUeH8EQ2TW9y3+3bt3Xq1ClFRkZatRcpUuSpggIAAAAAAAAAwBY2Fb0vXryodu3aafXquH+pjI6OfqqgAAAAAAAAAACwhU3zPPTo0UNXr17Vrl27lDZtWq1Zs0azZ8/WSy+9pOXLl9s7RgAAAAAAAAAAEsSmkd7r16/XsmXLVKpUKbm4uChPnjyqWbOmvLy8NGLECNWrV8/ecQIAAAAAAAAA8EQ2jfS+deuWsmbNKknKmDGjLl68KEkqXLiw9u/fb7/oAAAAAAAAAABIBJtGer/yyis6evSo8ubNq6JFi2rKlCnKmzevJk+erOzZs9s7RgAAAAAAAACwO8MwHB0CkoBNRe/u3bsrPDxckjRo0CDVqVNHv/zyi9KkSaNZs2bZMz4AAAAAAAAAABLMZNjh54zbt28rJCREuXPnlo+Pj037cHPP9bRhAAniYrJpVh8g0cyG2dEhAIBdMQoGgLPxdvd0dAhIIc6FrXZ0CEghUvvkc3QIyU7GdAUcHUKyc+VmqKNDeCKbRno/ysPDQyVKlLDHrgAAAAAAAAAAsFmCi95+fn4J3un3339vUzAAAAAAAAAAADyNBBe9AwICEtTPZDLZHAwAAAAAAAAAAE8jwUXvDRs2JGUcAAAAAAAAAPBMmcV9a5xRou7o99dff3EDIwAAAAAAAADAcytRRe+XXnpJFy9etDxu0aKFIiIi7B4UAAAAAAAAAAC2SFTR+9FR3qtWrdKtW7fsGhAAAAAAAAAAALZKVNEbAAAAAAAAAIDnWaKK3iaTSSaTKVYbAAAAAAAAAADPA9fEdDYMQ23btpWbm5sk6c6dO+rYsaM8PT2t+i1evNh+EQIAAAAAAABAEnh0Omc4h0QVvdu0aWP1uHXr1nYNBgAAAAAAAACAp5GoovfMmTOTKg4AAAAAAAAAAJ6aXW5kef36dS1dulQhISH22B0AAAAAAAAAADaxqejdvHlzTZgwQZL077//qlSpUmrevLkKFy6s33//3a4BAgAAAAAAAACQUDYVvTdv3qw33nhDkrRkyRIZhqGrV69q/PjxGjZsmF0DBAAAAAAAAAAgoRI1p/d9165dU6ZMmSRJa9as0TvvvCMPDw/Vq1dPvXv3tmuAAAAAAAAAAJAUzIbh6BCQBGwa6Z0rVy7t2LFDt27d0po1a1SrVi1J0pUrV+Tu7m7XAAEAAAAAAAAASCibRnr36NFDrVq1Urp06ZQ7d25VrVpVUsy0J4ULF7ZnfAAAAAAAAAAAJJhNRe9OnTqpbNmyOnXqlGrVqiUXl5gB4/ny5dPw4cPtGiAAAAAAAAAAAAmV4KK3n5+fvvrqK3l6esrPz8/SvmXLllh9K1SoYJ/oAAAAAAAAAABIhAQXvQMCAhQVFWX5d3xMJtPTRwUAAAAAAAAAgA0SXPTesGFDnP8GAAAAAAAAgOTIkOHoEJAEXBwdAAAAAAAAAAAA9kLRGwAAAAAAAADgNCh6AwAAAAAAAACcBkVvAAAAAAAAAIDToOgNAAAAAAAAAHAaro4OAAAAAAAAAAAcwWwYjg4BSYCR3gAAAAAAAAAAp0HRGwAAAAAAAADgNCh6AwAAAAAAAACcBkVvAAAAAAAAAIDToOgNAAAAAAAAAHAaro4OAAAAAAAAAAAcwTAMR4eAJMBIbwAAAAAAAACA06DoDQAAAAAAAABwGhS9AQAAAAAAAABOg6I3AAAAAAAAAMBpUPQGAAAAAAAAADgNV0cHAAAAAAAAAACOYMhwdAhIAoz0BgAAAAAAAAA4DYreAAAAAAAAAACnQdEbAAAAAAAAAOA0KHoDAAAAAAAAAJLMxIkTlTdvXrm7u6ts2bLavXv3Y/svXLhQr776qtzd3VW4cGGtWrUqUc9H0RsAAAAAAAAAkCTmz58vPz8/DRo0SPv371fRokVVu3ZtXbhwIc7+27dvV8uWLdW+fXsFBASoUaNGatSokQ4dOpTg5zQZhvFc3KLUzT2Xo0NACuFi4rcePBtmw+zoEADArp6Tj40AYDfe7p6ODgEpxLmw1Y4OASlEap98jg4h2Unj9oKjQ0h2Iu+eSVT/smXLqnTp0powYYIkyWw2K1euXOratav69esXq3+LFi1069YtrVy50tJWrlw5FStWTJMnT07Qc1L9AwAAAAAAAADYXWRkpPbt26caNWpY2lxcXFSjRg3t2LEjzm127Nhh1V+SateuHW//uLjaFi4AAAAAAAAAIKW5e/eu7t69a9Xm5uYmNze3WH0vXbqk6Oho+fr6WrX7+voqJCQkzv2fP38+zv7nz59PcIyM9AYAAAAAAAAAJMiIESPk7e1ttYwYMcLRYVlhpDcAAAAAAAAAIEH69+8vPz8/q7a4RnlLko+Pj1KlSqWIiAir9oiICGXLli3ObbJly5ao/nFhpDcAAAAAAAAAIEHc3Nzk5eVltcRX9E6TJo1Kliwpf39/S5vZbJa/v7/Kly8f5zbly5e36i9J69ati7d/XBjpDQAAAAAAACBFMgzD0SE4PT8/P7Vp00alSpVSmTJlNHbsWN26dUvt2rWTJH3wwQfKmTOnZYqU7t27q0qVKvruu+9Ur149zZs3T3v37tXUqVMT/JwUvQEAAAAAAAAASaJFixa6ePGiBg4cqPPnz6tYsWJas2aN5WaVp06dkovLgwlJKlSooF9//VUDBgzQ559/rpdeeklLly5VoUKFEvycJuM5+TnDzT2Xo0NACuFiYlYfPBtmw+zoEADArp6Tj40AYDfe7p6ODgEpxLmw1Y4OASlEap98jg4h2UmdJqejQ0h2oiLPOjqEJ6L6BwAAAAAAAABwGhS9AQAAAAAAAABOg6I3AAAAAAAAAMBpcCNLAAAAAAAAACkSd61xToz0BgAAAAAAAAA4DYreAAAAAAAAAACnQdEbAAAAAAAAAOA0KHoDAAAAAAAAAJwGRW8AAAAAAAAAgNMwGYbBTUqTobt372rEiBHq37+/3NzcHB0OnBi5hmeFXMOzQq7hWSHX8KyQa3hWyDU8K+QagKdF0TuZun79ury9vXXt2jV5eXk5Ohw4MXINzwq5hmeFXMOzQq7hWSHX8KyQa3hWyDUAT4vpTQAAAAAAAAAAToOiNwAAAAAAAADAaVD0BgAAAAAAAAA4DYreyZSbm5sGDRrEDR2Q5Mg1PCvkGp4Vcg3PCrmGZ4Vcw7NCruFZIdcAPC1uZAkAAAAAAAAAcBqM9AYAAAAAAAAAOA2K3gAAAAAAAAAAp0HRGwAAAAAAAADgNCh6A0AKsHHjRplMJl29ejXePrNmzVKGDBksjwcPHqxixYo99XObTCYtXbr0qfcD53by5EmZTCYdOHDgqfbTtm1bNWrUyC4xPU+c9bgSi3MZkgvOaXCkqlWrqkePHo4OI1HIdfux198/ueXR8/w+/TzHBjgzit7POd784czIbzjS5cuX1aNHD+XJk0dp0qRRjhw59OGHH+rUqVOODg1Oavbs2SpdurQ8PDyUPn16ValSRStXrkzQtuPGjdOsWbOSNkAkO4MHD5bJZJLJZJKrq6t8fHxUuXJljR07Vnfv3rXb8yTkxwakHPcL+veX9OnT6/XXX1fnzp11/Phxuz5X3rx5NXbsWLvuMyVYvHixvvrqqyf2a9u2rdXf8v4SGhr6DKJEUuHvHyOuY6tUqZKjwwLwDFH0BgCkOJcvX1a5cuX0559/avLkyQoNDdW8efMUGhqq0qVL66+//op328jIyGcYKZxFr1691KFDB7Vo0UJBQUHavXu3KlWqpIYNG2rChAnxbhcdHS2z2Sxvb2+r0cvAfa+//rrCw8N16tQpbdiwQc2aNdOIESNUoUIF3bhxw9HhwYn9+eefCg8PV2BgoL7++msFBweraNGi8vf3d3RoKV6mTJmUPn36BPWtU6eOwsPDrZYXX3wxVj8+/yQfSfH3T65mzpxpdWzLly+Ps19UVNQzjgzAs0DR+zmxaNEiFS5cWGnTplXmzJlVo0YN9e7dW7Nnz9ayZcssv0xu3LhRknT69Gk1b95cGTJkUKZMmdSwYUOdPHnSsr/7I2iHDBmiLFmyyMvLSx07duTDihNas2aNKlWqpAwZMihz5sx6++23FRYWJunBSJwFCxbojTfeUNq0aVW6dGkdO3ZMe/bsUalSpZQuXTrVrVtXFy9etOzTbDZr6NCheuGFF+Tm5qZixYppzZo1lvVxjfg6cOCATCaTJQ/vX16+du1avfbaa0qXLp3lQ5UUMzotvvyGbe7evatu3bopa9ascnd3V6VKlbRnz554+8+aNUu5c+eWh4eHGjdurH/++SfOflOmTFGuXLnk4eGh5s2b69q1a5Z1e/bsUc2aNeXj4yNvb29VqVJF+/fvf2ycffv21csvvywPDw/ly5dPX375pdUHzftTEcydO1d58+aVt7e33n33Xavijdls1qhRo1SgQAG5ubkpd+7cGj58uGX9k86RX3zxhc6dO6c///xTdevWVe7cuVW5cmWtXbtWqVOnVufOnS19q1atqi5duqhHjx7y8fFR7dq1JUnLly/XSy+9JHd3d1WrVk2zZ892upGQVatWVbdu3dSnTx9lypRJ2bJl0+DBgy3rr169qo8++sjyPvPmm28qMDBQknTt2jWlSpVKe/fulRTzN8uUKZPKlStn2f7nn39Wrly5rJ4zJCREFSpUkLu7uwoVKqRNmzZZ1kVHR6t9+/Z68cUXlTZtWr3yyisaN27cY4/hcedI6cF5cvHixapWrZo8PDxUtGhR7dixw2o/27ZtU9WqVeXh4aGMGTOqdu3aunLliuXYRowYYYmraNGiWrRokWXbnTt36rvvvtO3336rXr16qUCBAnrttdc0fPhw9ejRQ35+fjp9+rSkB+fO5cuXq2DBgnJzc9OpU6diXRlz48YNtWrVSp6ensqePbvGjBmT7C5Djg/nsoSfyyTJ1dVV2bJlU44cOVS4cGF17dpVmzZt0qFDhzRy5Eir17VXr17KmTOnPD09VbZsWav33b///lv169dXxowZ5enpqddff12rVq3SyZMnVa1aNUlSxowZZTKZ1LZt28e+Ns8rzmkPPM057b7MmTMrW7Zsypcvnxo2bKg///xTZcuWVfv27RUdHW3pt2zZMpUoUULu7u7Kly+fhgwZonv37kmSDMPQ4MGDlTt3brm5uSlHjhzq1q2b5e/1999/67PPPrN8VkTCPPx+8OOPP1o+r/j6+qpp06ZWfd3c3JQtWzarJVWqVPF+/vn+++9VuHBheXp6KleuXOrUqZNu3rxp2V9cU0qNHTtWefPmtTyOjo6Wn5+fJY/79OkjwzCS5LVIiezx94/L3LlzVapUKaVPn17ZsmXTe++9pwsXLlj1Scjn42nTplnejxs3bqzvv/8+1g/7jztvSNLx48dVuXJlubu7q2DBglq3bl2cMWfIkMHq2DJlymQ5T86fP19VqlSRu7u7fvnlF/3zzz9q2bKlcubMKQ8PDxUuXFi//fab1f7iuvqkWLFiVu8lCY0NQNKj6P0cCA8PV8uWLfXhhx8qODhYGzduVJMmTTRo0CA1b97c6tfXChUqKCoqSrVr11b69Om1ZcsWbdu2zVJQfLio7e/vb9nfb7/9psWLF2vIkCEOPFIkhVu3bsnPz0979+6Vv7+/XFxc1LhxY5nNZkufQYMGacCAAdq/f79cXV313nvvqU+fPho3bpy2bNmi0NBQDRw40NJ/3Lhx+u677zR69GgFBQWpdu3aatCgQaIvWb19+7ZGjx6tuXPnavPmzTp16pR69eolKWbUY1z5Ddv16dNHv//+u2bPnq39+/erQIECql27ti5fvhyr765du9S+fXt16dJFBw4cULVq1TRs2LBY/UJDQ7VgwQKtWLFCa9asUUBAgDp16mRZf+PGDbVp00Zbt27Vzp079dJLL+mtt9567OjC9OnTa9asWTpy5IjGjRunadOmacyYMVZ9wsLCtHTpUq1cuVIrV67Upk2b9M0331jW9+/fX998842+/PJLHTlyRL/++qt8fX0l6YnnSLPZrHnz5qlVq1bKli2b1fOmTZtWnTp10tq1a61et9mzZytNmjTatm2bJk+erBMnTqhp06Zq1KiRAgMD1aFDB33xxRdP+AslT7Nnz5anp6d27dqlUaNGaejQoZYP782aNdOFCxe0evVq7du3TyVKlFD16tV1+fJleXt7q1ixYpai2sGDB2UymRQQEGD5crxp0yZVqVLF6vl69+6tnj17KiAgQOXLl1f9+vUtRUyz2awXXnhBCxcu1JEjRzRw4EB9/vnnWrBgQbzxJ+QcKcX8ENKrVy8dOHBAL7/8slq2bGn5cnXgwAFVr15dBQsW1I4dO7R161bVr1/fUtQZMWKE5syZo8mTJ+vw4cP67LPP1Lp1a0tx67ffflO6dOnUoUOHWPH17NlTUVFR+v333y1tt2/f1siRI/XTTz/p8OHDypo1a6zt/Pz8tG3bNi1fvlzr1q3Tli1bnlikTS44lyXsXPY4r776qurWravFixdb2rp06aIdO3Zo3rx5CgoKUrNmzVSnTh3Le3vnzp119+5dbd68WQcPHtTIkSOVLl065cqVy5KfR48eVXh4+BMLs88zzmlPf06Lj4uLi7p3766///5b+/btkyRt2bJFH3zwgbp3764jR45oypQpmjVrluXHnd9//11jxozRlClTdPz4cS1dulSFCxeWFDNFwwsvvKChQ4daPisicfbu3atu3bpp6NChOnr0qNasWaPKlSsnePtHP/9IMX/n8ePH6/Dhw5o9e7bWr1+vPn36JCqu7777TrNmzdKMGTO0detWXb58WUuWLEnUPvBkT/v3f1RUVJS++uorBQYGaunSpTp58qTVj6AJ+Xy8bds2dezYUd27d9eBAwdUs2ZNqx97pSefN8xms5o0aaI0adJo165dmjx5svr27Zvo4+nXr5+6d++u4OBg1a5dW3fu3FHJkiX1v//9T4cOHdInn3yi999/X7t3707wPu0V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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "col_names = ['amount', 'oldbalanceOrg', 'newbalanceOrig','oldbalanceDest','newbalanceDest']\n",
        "features = data[col_names]\n",
        "scaler = StandardScaler().fit(features.values)\n",
        "features = scaler.transform(features.values)\n",
        "scaled_features = pd.DataFrame(features, columns = col_names)"
      ],
      "metadata": {
        "id": "-A5gBm_suwyf"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_extract=data[['type','isFraud']]\n",
        "\n",
        "type_dummies = pd.get_dummies(data_extract['type'], drop_first = True)\n",
        "data_extract.drop(['type'], axis=1, inplace=True)\n",
        "new_data=pd.concat([data_extract,type_dummies, scaled_features], axis=1, ignore_index=False)\n",
        "new_data.head()\n",
        "new_data.to_csv('/content/drive/My Drive/MoneyLaundering_collabNotebook/ML_data.csv', index=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CcDWrNDfuzmS",
        "outputId": "7f625af8-5f0f-4ed2-d516-b81f321d5b47"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-20-c477064aa309>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  data_extract.drop(['type'], axis=1, inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "correlations = new_data.corr()\n",
        "f, ax = plt.subplots(figsize = (20,20))\n",
        "sns.heatmap(correlations, annot = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "FZ_EjFa5u1bo",
        "outputId": "54ce08f8-60da-4918-92c7-eb57b445e702"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x2000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# still no visible correlation\n",
        "# newbalance and old balance correlation..may be...there is not transaction in the account\n",
        "     \n",
        "#TRAIN AND DEPLOYMENT OF MODEL\n",
        "X = new_data.iloc[:, new_data.columns != 'isFraud']\n",
        "y = new_data.iloc[:, new_data.columns == 'isFraud']"
      ],
      "metadata": {
        "id": "vGjA87b5u3K6"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y.head()\n",
        "     "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "PgVxqGmju8JV",
        "outputId": "1d6a1d91-fa78-4b16-facb-a92225229818"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   isFraud\n",
              "0        0\n",
              "1        0\n",
              "2        1\n",
              "3        1\n",
              "4        0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-557b8828-8315-452c-a393-ffbcee6e79dc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>isFraud</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-557b8828-8315-452c-a393-ffbcee6e79dc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-557b8828-8315-452c-a393-ffbcee6e79dc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-557b8828-8315-452c-a393-ffbcee6e79dc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "0jYo4BCzu94Q",
        "outputId": "33153c64-cc19-410e-f83e-b7eb34b53311"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   CASH_OUT  DEBIT  PAYMENT  TRANSFER    amount  oldbalanceOrg  \\\n",
              "0         0      0        1         0 -0.281560      -0.229810   \n",
              "1         0      0        1         0 -0.294767      -0.281359   \n",
              "2         0      0        0         1 -0.297555      -0.288654   \n",
              "3         1      0        0         0 -0.297555      -0.288654   \n",
              "4         0      0        1         0 -0.278532      -0.274329   \n",
              "\n",
              "   newbalanceOrig  oldbalanceDest  newbalanceDest  \n",
              "0       -0.237622       -0.323814       -0.333411  \n",
              "1       -0.285812       -0.323814       -0.333411  \n",
              "2       -0.292442       -0.323814       -0.333411  \n",
              "3       -0.292442       -0.317582       -0.333411  \n",
              "4       -0.282221       -0.323814       -0.333411  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6c5557f4-2308-4f27-aeb2-b29a49dc281b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CASH_OUT</th>\n",
              "      <th>DEBIT</th>\n",
              "      <th>PAYMENT</th>\n",
              "      <th>TRANSFER</th>\n",
              "      <th>amount</th>\n",
              "      <th>oldbalanceOrg</th>\n",
              "      <th>newbalanceOrig</th>\n",
              "      <th>oldbalanceDest</th>\n",
              "      <th>newbalanceDest</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.281560</td>\n",
              "      <td>-0.229810</td>\n",
              "      <td>-0.237622</td>\n",
              "      <td>-0.323814</td>\n",
              "      <td>-0.333411</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.294767</td>\n",
              "      <td>-0.281359</td>\n",
              "      <td>-0.285812</td>\n",
              "      <td>-0.323814</td>\n",
              "      <td>-0.333411</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>-0.297555</td>\n",
              "      <td>-0.288654</td>\n",
              "      <td>-0.292442</td>\n",
              "      <td>-0.323814</td>\n",
              "      <td>-0.333411</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.297555</td>\n",
              "      <td>-0.288654</td>\n",
              "      <td>-0.292442</td>\n",
              "      <td>-0.317582</td>\n",
              "      <td>-0.333411</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.278532</td>\n",
              "      <td>-0.274329</td>\n",
              "      <td>-0.282221</td>\n",
              "      <td>-0.323814</td>\n",
              "      <td>-0.333411</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c5557f4-2308-4f27-aeb2-b29a49dc281b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6c5557f4-2308-4f27-aeb2-b29a49dc281b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6c5557f4-2308-4f27-aeb2-b29a49dc281b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state=0)"
      ],
      "metadata": {
        "id": "jU_5MTwHu_zB"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Number transactions X_train dataset: \", X_train.shape)\n",
        "print(\"Number transactions y_train dataset: \", y_train.shape)\n",
        "print(\"Number transactions X_test dataset: \", X_test.shape)\n",
        "print(\"Number transactions y_test dataset: \", y_test.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DmOH2JgvvBfb",
        "outputId": "19c057a4-c2ed-4b7e-e1d9-a74fa905dea4"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number transactions X_train dataset:  (4453834, 9)\n",
            "Number transactions y_train dataset:  (4453834, 1)\n",
            "Number transactions X_test dataset:  (1908786, 9)\n",
            "Number transactions y_test dataset:  (1908786, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GMDJ27BpvG8e",
        "outputId": "1b6ede4a-bb49-4071-e528-556432b7b287"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4453834, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WQyGD-U5vIi_",
        "outputId": "31db78ec-ffc3-419b-bae5-110e297e5d47"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1908786, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Decision trees\n",
        "\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "decision_tree = DecisionTreeClassifier()"
      ],
      "metadata": {
        "id": "AqrqSPlMvKOA"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "decision_tree.fit(X_train,y_train.values.ravel())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "E6WrWYrEvMhL",
        "outputId": "f5e95514-18a0-4557-daff-b451444914a7"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = decision_tree.predict(X_test)"
      ],
      "metadata": {
        "id": "VOxCZDG5vO2_"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import  classification_report\n",
        "print(classification_report(y_test, y_pred))\n",
        "     "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FJwVA9-0vRK8",
        "outputId": "4f2a97ea-56fd-4f5f-f69b-8ead988e86e2"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00   1906367\n",
            "           1       0.89      0.89      0.89      2419\n",
            "\n",
            "    accuracy                           1.00   1908786\n",
            "   macro avg       0.95      0.94      0.95   1908786\n",
            "weighted avg       1.00      1.00      1.00   1908786\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from imblearn.over_sampling import SMOTE\n",
        "sm = SMOTE(random_state = 42)\n",
        "X_res, y_res = sm.fit_resample(X,y)\n",
        "X_train_res, X_test_res, y_train_res, y_test_res = train_test_split(X_res,y_res, test_size = 0.3, random_state=0) \n",
        "print('After OverSampling, the shape of X: {}'.format(X_res.shape))\n",
        "print('After OverSampling, the shape of y: {} \\n'.format(y_res.shape))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CxAMW1etvSyx",
        "outputId": "52f5750e-e3cd-44c3-9cbb-49235742edcc"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After OverSampling, the shape of X: (12708814, 9)\n",
            "After OverSampling, the shape of y: (12708814, 1) \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('No of Money Laundering transction: {} \\n'.format(y_res == 1))\n",
        "print('No of NOT Money Laundering transction: {} \\n'.format(y_res == 0))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "91ffVL5zvUwe",
        "outputId": "67683a43-4444-4078-89bd-f16f12ef0082"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No of Money Laundering transction:           isFraud\n",
            "0           False\n",
            "1           False\n",
            "2            True\n",
            "3            True\n",
            "4           False\n",
            "...           ...\n",
            "12708809     True\n",
            "12708810     True\n",
            "12708811     True\n",
            "12708812     True\n",
            "12708813     True\n",
            "\n",
            "[12708814 rows x 1 columns] \n",
            "\n",
            "No of NOT Money Laundering transction:           isFraud\n",
            "0            True\n",
            "1            True\n",
            "2           False\n",
            "3           False\n",
            "4            True\n",
            "...           ...\n",
            "12708809    False\n",
            "12708810    False\n",
            "12708811    False\n",
            "12708812    False\n",
            "12708813    False\n",
            "\n",
            "[12708814 rows x 1 columns] \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "decision_tree.fit(X_train_res,y_train_res.values.ravel())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "s9RPRgNKvWXR",
        "outputId": "488dd787-6b67-49fb-c8f8-d105f1acdaa0"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier()"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_res = decision_tree.predict(X_test_res)"
      ],
      "metadata": {
        "id": "fFsua7LsED8A"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_res.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kvzL23AqEG0r",
        "outputId": "f2fa858c-5245-4739-bfb3-a47560c66702"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "isFraud\n",
              "0          6354407\n",
              "1          6354407\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print(classification_report(y_test_res, y_pred_res))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mk6FfrJ2EIgB",
        "outputId": "1aa6157e-35a8-44c4-b49a-65a13ede94b0"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00   1905975\n",
            "           1       1.00      1.00      1.00   1906670\n",
            "\n",
            "    accuracy                           1.00   3812645\n",
            "   macro avg       1.00      1.00      1.00   3812645\n",
            "weighted avg       1.00      1.00      1.00   3812645\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "cm = confusion_matrix(y_pred_res, y_test_res)\n",
        "sns.heatmap(cm, annot=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 463
        },
        "id": "k1g60TVqEKet",
        "outputId": "6c9d2f01-0271-4e39-ce20-1eda1c719114"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier"
      ],
      "metadata": {
        "id": "6mB0C1AUEMg6"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "random_forest = RandomForestClassifier()"
      ],
      "metadata": {
        "id": "bEdXu57bEOnz"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "random_forest.fit(X_train,y_train.values.ravel())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 318
        },
        "id": "M3F1I6PoEQSu",
        "outputId": "dad84bc4-eef3-4b88-a342-0de6f20fe4ea"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-45-462ff2706543>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrandom_forest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    471\u001b[0m             \u001b[0;31m# parallel_backend contexts set at a higher level,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    472\u001b[0m             \u001b[0;31m# since correctness does not rely on using threads.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 473\u001b[0;31m             trees = Parallel(\n\u001b[0m\u001b[1;32m    474\u001b[0m                 \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    475\u001b[0m                 \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         )\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1086\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1088\u001b[0;31m             \u001b[0;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1089\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1090\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    899\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    900\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 901\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    902\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    903\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    817\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    818\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 819\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    820\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    821\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    595\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    596\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 597\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    598\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    599\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    286\u001b[0m         \u001b[0;31m# change the default number of processes to -1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 288\u001b[0;31m             return [func(*args, **kwargs)\n\u001b[0m\u001b[1;32m    289\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    286\u001b[0m         \u001b[0;31m# change the default number of processes to -1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 288\u001b[0;31m             return [func(*args, **kwargs)\n\u001b[0m\u001b[1;32m    289\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 123\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36m_parallel_build_trees\u001b[0;34m(tree, bootstrap, X, y, sample_weight, tree_idx, n_trees, verbose, class_weight, n_samples_bootstrap)\u001b[0m\n\u001b[1;32m    182\u001b[0m             \u001b[0mcurr_sample_weight\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0mcompute_sample_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"balanced\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 184\u001b[0;31m         \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurr_sample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    185\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m         \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m    887\u001b[0m         \"\"\"\n\u001b[1;32m    888\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m         super().fit(\n\u001b[0m\u001b[1;32m    890\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    891\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m    377\u001b[0m             )\n\u001b[1;32m    378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 379\u001b[0;31m         \u001b[0mbuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    380\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    381\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "y_pred = random_forest.predict(X_test)"
      ],
      "metadata": {
        "id": "cBN7AyO-EQYD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test, y_pred))"
      ],
      "metadata": {
        "id": "NVxF5E2_EVW0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "random_forest.fit(X_train_res,y_train_res.values.ravel())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 318
        },
        "id": "sRIUEjk8EXWy",
        "outputId": "5d1cde08-54fe-40da-8f3b-1902a3e25d21"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-46-9da7289cbeee>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrandom_forest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_res\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train_res\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    471\u001b[0m             \u001b[0;31m# parallel_backend contexts set at a higher level,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    472\u001b[0m             \u001b[0;31m# since correctness does not rely on using threads.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 473\u001b[0;31m             trees = Parallel(\n\u001b[0m\u001b[1;32m    474\u001b[0m                 \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    475\u001b[0m                 \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         )\n\u001b[0;32m---> 63\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1086\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1088\u001b[0;31m             \u001b[0;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1089\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1090\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    899\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    900\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 901\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    902\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    903\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    817\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    818\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 819\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    820\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    821\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    595\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    596\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 597\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    598\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    599\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    286\u001b[0m         \u001b[0;31m# change the default number of processes to -1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 288\u001b[0;31m             return [func(*args, **kwargs)\n\u001b[0m\u001b[1;32m    289\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    286\u001b[0m         \u001b[0;31m# change the default number of processes to -1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 288\u001b[0;31m             return [func(*args, **kwargs)\n\u001b[0m\u001b[1;32m    289\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 123\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36m_parallel_build_trees\u001b[0;34m(tree, bootstrap, X, y, sample_weight, tree_idx, n_trees, verbose, class_weight, n_samples_bootstrap)\u001b[0m\n\u001b[1;32m    182\u001b[0m             \u001b[0mcurr_sample_weight\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0mcompute_sample_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"balanced\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 184\u001b[0;31m         \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcurr_sample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    185\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m         \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m    887\u001b[0m         \"\"\"\n\u001b[1;32m    888\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m         super().fit(\n\u001b[0m\u001b[1;32m    890\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    891\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input)\u001b[0m\n\u001b[1;32m    377\u001b[0m             )\n\u001b[1;32m    378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 379\u001b[0;31m         \u001b[0mbuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    380\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    381\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "y_pred_res = random_forest.predict(X_test_res)"
      ],
      "metadata": {
        "id": "4XOvTrdwEZFh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test_res, y_pred_res))\n",
        "     "
      ],
      "metadata": {
        "id": "DffU5WxnEau8"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
